
proyecto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000d7e  00000e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800124  00800124  00000e36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d54  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c77  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e23  00000000  00000000  000039eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  00004810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073c  00000000  00000000  00004cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018ed  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00006d25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__ctors_end>
   4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  10:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  14:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  18:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  1c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  20:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  24:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  28:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  38:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  3c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  44:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_18>
  4c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__vector_19>
  50:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  58:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  5c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  60:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  64:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>

00000068 <CHARACTERS>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <INIT_ST7735B>:
 248:	0b 01 80 c8 11 80 c8 3a 81 05 0a b1 83 00 06 03     .......:........
 258:	0a 20 80 0a 36 01 a0 b6 02 15 02 b4 01 00 e0 10     . ..6...........
 268:	09 16 09 20 21 1b 13 19 17 15 1e 2b 04 05 02 0e     ... !......+....
 278:	e1 90 0b 14 08 1e 22 1d 18 1e 1b 1a 24 2b 06 06     ......".....$+..
 288:	02 0f 0a 13 80 0a                                   ......

0000028e <__ctors_end>:
 28e:	11 24       	eor	r1, r1
 290:	1f be       	out	0x3f, r1	; 63
 292:	cf ef       	ldi	r28, 0xFF	; 255
 294:	d8 e0       	ldi	r29, 0x08	; 8
 296:	de bf       	out	0x3e, r29	; 62
 298:	cd bf       	out	0x3d, r28	; 61

0000029a <__do_copy_data>:
 29a:	11 e0       	ldi	r17, 0x01	; 1
 29c:	a0 e0       	ldi	r26, 0x00	; 0
 29e:	b1 e0       	ldi	r27, 0x01	; 1
 2a0:	ee e7       	ldi	r30, 0x7E	; 126
 2a2:	fd e0       	ldi	r31, 0x0D	; 13
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x10>
 2a6:	05 90       	lpm	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	a4 32       	cpi	r26, 0x24	; 36
 2ac:	b1 07       	cpc	r27, r17
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0xc>

000002b0 <__do_clear_bss>:
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	a4 e2       	ldi	r26, 0x24	; 36
 2b4:	b1 e0       	ldi	r27, 0x01	; 1
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <.do_clear_bss_start>

000002b8 <.do_clear_bss_loop>:
 2b8:	1d 92       	st	X+, r1

000002ba <.do_clear_bss_start>:
 2ba:	ae 33       	cpi	r26, 0x3E	; 62
 2bc:	b2 07       	cpc	r27, r18
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <.do_clear_bss_loop>
 2c0:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
 2c4:	0c 94 bd 06 	jmp	0xd7a	; 0xd7a <_exit>

000002c8 <__bad_interrupt>:
 2c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002cc <main>:
#include "ST7735/st7735.h"
#include "USART/USART.h"


void main(void)
{ 
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <main+0xa>
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <main+0xc>
 2d8:	1f 92       	push	r1
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
	St7735Init();
 2de:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <St7735Init>
	USART_configuration config_57600_8N1 = {57600, 8, 0, 1};
 2e2:	85 e0       	ldi	r24, 0x05	; 5
 2e4:	e6 e0       	ldi	r30, 0x06	; 6
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	de 01       	movw	r26, r28
 2ea:	11 96       	adiw	r26, 0x01	; 1
 2ec:	01 90       	ld	r0, Z+
 2ee:	0d 92       	st	X+, r0
 2f0:	8a 95       	dec	r24
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x20>
	USART_Init(config_57600_8N1);
 2f4:	49 81       	ldd	r20, Y+1	; 0x01
 2f6:	5a 81       	ldd	r21, Y+2	; 0x02
 2f8:	6b 81       	ldd	r22, Y+3	; 0x03
 2fa:	7c 81       	ldd	r23, Y+4	; 0x04
 2fc:	8d 81       	ldd	r24, Y+5	; 0x05
 2fe:	0e 94 fd 04 	call	0x9fa	; 0x9fa <USART_Init>
	buff_init(&TX_buffer, 60);
 302:	6c e3       	ldi	r22, 0x3C	; 60
 304:	70 e0       	ldi	r23, 0x00	; 0
 306:	8a e2       	ldi	r24, 0x2A	; 42
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 24 05 	call	0xa48	; 0xa48 <buff_init>
	buff_init(&RX_buffer, 60);
 30e:	6c e3       	ldi	r22, 0x3C	; 60
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	82 e3       	ldi	r24, 0x32	; 50
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 24 05 	call	0xa48	; 0xa48 <buff_init>
	sei();
 31a:	78 94       	sei
	UpdateScreen();	
 31c:	0e 94 9e 04 	call	0x93c	; 0x93c <UpdateScreen>
	ClearScreen(0xffff);
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	9f ef       	ldi	r25, 0xFF	; 255
 324:	0e 94 8d 04 	call	0x91a	; 0x91a <ClearScreen>
	//DrawString(char *str, uint16_t color, ESizes size)
	//SetPosition(uint8_t x, uint8_t y)
	
  // draw line
  DrawLine(23, 137, 20, 20, 0x04af);
 328:	0f ea       	ldi	r16, 0xAF	; 175
 32a:	14 e0       	ldi	r17, 0x04	; 4
 32c:	24 e1       	ldi	r18, 0x14	; 20
 32e:	44 e1       	ldi	r20, 0x14	; 20
 330:	69 e8       	ldi	r22, 0x89	; 137
 332:	87 e1       	ldi	r24, 0x17	; 23
 334:	0e 94 0f 04 	call	0x81e	; 0x81e <DrawLine>
  // draw line
  DrawLine(23, 137, 21, 21, 0x04af);
 338:	25 e1       	ldi	r18, 0x15	; 21
 33a:	45 e1       	ldi	r20, 0x15	; 21
 33c:	69 e8       	ldi	r22, 0x89	; 137
 33e:	87 e1       	ldi	r24, 0x17	; 23
 340:	0e 94 0f 04 	call	0x81e	; 0x81e <DrawLine>
  // set text position
  SetPosition(41, 10);
 344:	6a e0       	ldi	r22, 0x0A	; 10
 346:	89 e2       	ldi	r24, 0x29	; 41
 348:	0e 94 ad 02 	call	0x55a	; 0x55a <SetPosition>
  // draw text
  DrawString("ST7735 DRIVER", 0x007b, X1);
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	6b e7       	ldi	r22, 0x7B	; 123
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	8b e0       	ldi	r24, 0x0B	; 11
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <DrawString>
  // set text position
  SetPosition(53, 26);
 35a:	6a e1       	ldi	r22, 0x1A	; 26
 35c:	85 e3       	ldi	r24, 0x35	; 53
 35e:	0e 94 ad 02 	call	0x55a	; 0x55a <SetPosition>
  // draw text
  DrawString("ATMEGA 16", 0x0000, X1);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	89 e1       	ldi	r24, 0x19	; 25
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <DrawString>
}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <__vector_18>:


ISR(USART_RX_vect)
{
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	3f 93       	push	r19
 392:	4f 93       	push	r20
 394:	5f 93       	push	r21
 396:	6f 93       	push	r22
 398:	7f 93       	push	r23
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
 3a2:	ef 93       	push	r30
 3a4:	ff 93       	push	r31
	char data = UDR0;
 3a6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	//DrawChar(char character, uint16_t color, ESizes size)
	push(&RX_buffer, data);
 3aa:	82 e3       	ldi	r24, 0x32	; 50
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 37 05 	call	0xa6e	; 0xa6e <push>
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_19>:

ISR(USART_UDRE_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	2f 93       	push	r18
 3e0:	3f 93       	push	r19
 3e2:	4f 93       	push	r20
 3e4:	5f 93       	push	r21
 3e6:	6f 93       	push	r22
 3e8:	7f 93       	push	r23
 3ea:	8f 93       	push	r24
 3ec:	9f 93       	push	r25
 3ee:	af 93       	push	r26
 3f0:	bf 93       	push	r27
 3f2:	ef 93       	push	r30
 3f4:	ff 93       	push	r31
	char data = pop(&TX_buffer);
 3f6:	8a e2       	ldi	r24, 0x2A	; 42
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	0e 94 5c 05 	call	0xab8	; 0xab8 <pop>
	if (data == 0) UCSR0B &= ~(1<<UDRIE0); // UDR Empty Interrupt Disable
 3fe:	81 11       	cpse	r24, r1
 400:	06 c0       	rjmp	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 402:	e1 ec       	ldi	r30, 0xC1	; 193
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	8f 7d       	andi	r24, 0xDF	; 223
 40a:	80 83       	st	Z, r24
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	else UDR0 = data;
 40e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <HardwareReset>:
*/

void HardwareReset(void)
{
	// Actiavte pull-up register logical high on pin RST
	PORTB |= BIT0;
 434:	28 9a       	sbi	0x05, 0	; 5
	// DDR as output
	DDRB  |= BIT0;
 436:	20 9a       	sbi	0x04, 0	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	8f e4       	ldi	r24, 0x4F	; 79
 43a:	93 ec       	ldi	r25, 0xC3	; 195
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <HardwareReset+0x8>
 440:	00 c0       	rjmp	.+0      	; 0x442 <HardwareReset+0xe>
 442:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset Low
	PORTB &= ~BIT0;
 444:	28 98       	cbi	0x05, 0	; 5
 446:	8f e4       	ldi	r24, 0x4F	; 79
 448:	93 ec       	ldi	r25, 0xC3	; 195
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <HardwareReset+0x16>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <HardwareReset+0x1c>
 450:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset High
	PORTB |= BIT0;
 452:	28 9a       	sbi	0x05, 0	; 5
 454:	08 95       	ret

00000456 <SpiInit>:

void SpiInit(void)
{

	// Output: SCK, MOSI, CS_LD, DC_LD
	DDRB  |= BIT5 | BIT3 | BIT2 | BIT1;
 456:	84 b1       	in	r24, 0x04	; 4
 458:	8e 62       	ori	r24, 0x2E	; 46
 45a:	84 b9       	out	0x04, r24	; 4
	DDRB  &= ~BIT4;
 45c:	24 98       	cbi	0x04, 4	; 4
	DDRD  |= BIT2 | BIT3;
 45e:	8a b1       	in	r24, 0x0a	; 10
 460:	8c 60       	ori	r24, 0x0C	; 12
 462:	8a b9       	out	0x0a, r24	; 10
	PORTD |= BIT2 | BIT3;
 464:	8b b1       	in	r24, 0x0b	; 11
 466:	8c 60       	ori	r24, 0x0C	; 12
 468:	8b b9       	out	0x0b, r24	; 11
	PORTB |= BIT4;
 46a:	2c 9a       	sbi	0x05, 4	; 5
	SPCR  |= BIT6 | BIT4;// | BIT0 | BIT1;
 46c:	8c b5       	in	r24, 0x2c	; 44
 46e:	80 65       	ori	r24, 0x50	; 80
 470:	8c bd       	out	0x2c, r24	; 44
	// SPI2X - Prescaler fclk/2 = 8MHz
	SPSR |= (1 << SPI2X);
 472:	8d b5       	in	r24, 0x2d	; 45
 474:	81 60       	ori	r24, 0x01	; 1
 476:	8d bd       	out	0x2d, r24	; 45
 478:	08 95       	ret

0000047a <CommandSend>:
}

uint8_t CommandSend(uint8_t data)
{
	// chip enable - active low
	PORTD &= ~BIT2;
 47a:	5a 98       	cbi	0x0b, 2	; 11
	// command (active low)
	PORTB &= ~BIT1;
 47c:	29 98       	cbi	0x05, 1	; 5
	// transmitting data
	SPDR = data;
 47e:	8e bd       	out	0x2e, r24	; 46
	// wait till data transmit
	while (!(SPSR & (1 << SPIF)));
 480:	0d b4       	in	r0, 0x2d	; 45
 482:	07 fe       	sbrs	r0, 7
 484:	fd cf       	rjmp	.-6      	; 0x480 <CommandSend+0x6>
	// chip disable - idle high
	PORTD |= BIT2;
 486:	5a 9a       	sbi	0x0b, 2	; 11
	// return received data
	return SPDR;
 488:	8e b5       	in	r24, 0x2e	; 46
}
 48a:	08 95       	ret

0000048c <Data8BitsSend>:
  }
  // set window
  SetWindow(x, x, ys, ye);
  // draw pixel by 565 mode
  SendColor565(color, ye - ys);
}
 48c:	5a 98       	cbi	0x0b, 2	; 11
 48e:	29 9a       	sbi	0x05, 1	; 5
 490:	8e bd       	out	0x2e, r24	; 46
 492:	0d b4       	in	r0, 0x2d	; 45
 494:	07 fe       	sbrs	r0, 7
 496:	fd cf       	rjmp	.-6      	; 0x492 <Data8BitsSend+0x6>
 498:	5a 9a       	sbi	0x0b, 2	; 11
 49a:	8e b5       	in	r24, 0x2e	; 46
 49c:	08 95       	ret

0000049e <Data16BitsSend>:
 49e:	5a 98       	cbi	0x0b, 2	; 11
 4a0:	29 9a       	sbi	0x05, 1	; 5
 4a2:	9e bd       	out	0x2e, r25	; 46
 4a4:	0d b4       	in	r0, 0x2d	; 45
 4a6:	07 fe       	sbrs	r0, 7
 4a8:	fd cf       	rjmp	.-6      	; 0x4a4 <Data16BitsSend+0x6>
 4aa:	8e bd       	out	0x2e, r24	; 46
 4ac:	0d b4       	in	r0, 0x2d	; 45
 4ae:	07 fe       	sbrs	r0, 7
 4b0:	fd cf       	rjmp	.-6      	; 0x4ac <Data16BitsSend+0xe>
 4b2:	5a 9a       	sbi	0x0b, 2	; 11
 4b4:	8e b5       	in	r24, 0x2e	; 46
 4b6:	08 95       	ret

000004b8 <SendColor565>:
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	cf 93       	push	r28
 4be:	df 93       	push	r29
 4c0:	8c 01       	movw	r16, r24
 4c2:	eb 01       	movw	r28, r22
 4c4:	8c e2       	ldi	r24, 0x2C	; 44
 4c6:	0e 94 3d 02 	call	0x47a	; 0x47a <CommandSend>
 4ca:	20 97       	sbiw	r28, 0x00	; 0
 4cc:	29 f0       	breq	.+10     	; 0x4d8 <SendColor565+0x20>
 4ce:	c8 01       	movw	r24, r16
 4d0:	0e 94 4f 02 	call	0x49e	; 0x49e <Data16BitsSend>
 4d4:	21 97       	sbiw	r28, 0x01	; 1
 4d6:	d9 f7       	brne	.-10     	; 0x4ce <SendColor565+0x16>
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	08 95       	ret

000004e2 <SetWindow>:
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	68 17       	cp	r22, r24
 4ec:	50 f1       	brcs	.+84     	; 0x542 <SetWindow+0x60>
 4ee:	62 3a       	cpi	r22, 0xA2	; 162
 4f0:	50 f5       	brcc	.+84     	; 0x546 <SetWindow+0x64>
 4f2:	24 17       	cp	r18, r20
 4f4:	50 f1       	brcs	.+84     	; 0x54a <SetWindow+0x68>
 4f6:	24 38       	cpi	r18, 0x84	; 132
 4f8:	50 f5       	brcc	.+84     	; 0x54e <SetWindow+0x6c>
 4fa:	12 2f       	mov	r17, r18
 4fc:	04 2f       	mov	r16, r20
 4fe:	c6 2f       	mov	r28, r22
 500:	d8 2f       	mov	r29, r24
 502:	8a e2       	ldi	r24, 0x2A	; 42
 504:	0e 94 3d 02 	call	0x47a	; 0x47a <CommandSend>
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 50e:	8d 2f       	mov	r24, r29
 510:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 51a:	8c 2f       	mov	r24, r28
 51c:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 520:	8b e2       	ldi	r24, 0x2B	; 43
 522:	0e 94 3d 02 	call	0x47a	; 0x47a <CommandSend>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 52c:	80 2f       	mov	r24, r16
 52e:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 538:	81 2f       	mov	r24, r17
 53a:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	07 c0       	rjmp	.+14     	; 0x550 <SetWindow+0x6e>
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	05 c0       	rjmp	.+10     	; 0x550 <SetWindow+0x6e>
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	03 c0       	rjmp	.+6      	; 0x550 <SetWindow+0x6e>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	01 c0       	rjmp	.+2      	; 0x550 <SetWindow+0x6e>
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	1f 91       	pop	r17
 556:	0f 91       	pop	r16
 558:	08 95       	ret

0000055a <SetPosition>:
 55a:	8d 39       	cpi	r24, 0x9D	; 157
 55c:	90 f0       	brcs	.+36     	; 0x582 <SetPosition+0x28>
 55e:	6d 37       	cpi	r22, 0x7D	; 125
 560:	e0 f4       	brcc	.+56     	; 0x59a <SetPosition+0x40>
 562:	6c 37       	cpi	r22, 0x7C	; 124
 564:	70 f4       	brcc	.+28     	; 0x582 <SetPosition+0x28>
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	68 5f       	subi	r22, 0xF8	; 248
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <cacheMemIndexRow+0x1>
 570:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <cacheMemIndexRow>
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 57a:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	08 95       	ret
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <cacheMemIndexRow+0x1>
 588:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <cacheMemIndexRow>
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 592:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	08 95       	ret
 59a:	80 e0       	ldi	r24, 0x00	; 0
 59c:	08 95       	ret

0000059e <DrawPixel>:
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	ea 01       	movw	r28, r20
 5a4:	26 2f       	mov	r18, r22
 5a6:	46 2f       	mov	r20, r22
 5a8:	68 2f       	mov	r22, r24
 5aa:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SetWindow>
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	ce 01       	movw	r24, r28
 5b4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SendColor565>
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <DrawChar>:
 5be:	4f 92       	push	r4
 5c0:	5f 92       	push	r5
 5c2:	7f 92       	push	r7
 5c4:	8f 92       	push	r8
 5c6:	9f 92       	push	r9
 5c8:	af 92       	push	r10
 5ca:	bf 92       	push	r11
 5cc:	cf 92       	push	r12
 5ce:	df 92       	push	r13
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
 5da:	2b 01       	movw	r4, r22
 5dc:	41 11       	cpse	r20, r1
 5de:	34 c0       	rjmp	.+104    	; 0x648 <DrawChar+0x8a>
 5e0:	68 94       	set
 5e2:	99 24       	eor	r9, r9
 5e4:	92 f8       	bld	r9, 2
 5e6:	c8 2f       	mov	r28, r24
 5e8:	d0 e0       	ldi	r29, 0x00	; 0
 5ea:	ce 01       	movw	r24, r28
 5ec:	80 97       	sbiw	r24, 0x20	; 32
 5ee:	ec 01       	movw	r28, r24
 5f0:	cc 0f       	add	r28, r28
 5f2:	dd 1f       	adc	r29, r29
 5f4:	cc 0f       	add	r28, r28
 5f6:	dd 1f       	adc	r29, r29
 5f8:	c8 0f       	add	r28, r24
 5fa:	d9 1f       	adc	r29, r25
 5fc:	0f 2e       	mov	r0, r31
 5fe:	f6 e2       	ldi	r31, 0x26	; 38
 600:	cf 2e       	mov	r12, r31
 602:	f1 e0       	ldi	r31, 0x01	; 1
 604:	df 2e       	mov	r13, r31
 606:	f0 2d       	mov	r31, r0
 608:	0f 2e       	mov	r0, r31
 60a:	f4 e2       	ldi	r31, 0x24	; 36
 60c:	ef 2e       	mov	r14, r31
 60e:	f1 e0       	ldi	r31, 0x01	; 1
 610:	ff 2e       	mov	r15, r31
 612:	f0 2d       	mov	r31, r0
 614:	fe 01       	movw	r30, r28
 616:	e9 0d       	add	r30, r9
 618:	f1 1d       	adc	r31, r1
 61a:	e8 59       	subi	r30, 0x98	; 152
 61c:	ff 4f       	sbci	r31, 0xFF	; 255
 61e:	b4 90       	lpm	r11, Z
 620:	17 e0       	ldi	r17, 0x07	; 7
 622:	bb 20       	and	r11, r11
 624:	4c f4       	brge	.+18     	; 0x638 <DrawChar+0x7a>
 626:	f6 01       	movw	r30, r12
 628:	60 81       	ld	r22, Z
 62a:	61 0f       	add	r22, r17
 62c:	f7 01       	movw	r30, r14
 62e:	80 81       	ld	r24, Z
 630:	a2 01       	movw	r20, r4
 632:	89 0d       	add	r24, r9
 634:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 638:	bb 0c       	add	r11, r11
 63a:	11 50       	subi	r17, 0x01	; 1
 63c:	90 f7       	brcc	.-28     	; 0x622 <DrawChar+0x64>
 63e:	9a 94       	dec	r9
 640:	ff ef       	ldi	r31, 0xFF	; 255
 642:	9f 12       	cpse	r9, r31
 644:	e7 cf       	rjmp	.-50     	; 0x614 <DrawChar+0x56>
 646:	9c c0       	rjmp	.+312    	; 0x780 <DrawChar+0x1c2>
 648:	41 30       	cpi	r20, 0x01	; 1
 64a:	09 f0       	breq	.+2      	; 0x64e <DrawChar+0x90>
 64c:	40 c0       	rjmp	.+128    	; 0x6ce <DrawChar+0x110>
 64e:	68 94       	set
 650:	99 24       	eor	r9, r9
 652:	92 f8       	bld	r9, 2
 654:	e8 2e       	mov	r14, r24
 656:	f1 2c       	mov	r15, r1
 658:	c7 01       	movw	r24, r14
 65a:	80 97       	sbiw	r24, 0x20	; 32
 65c:	7c 01       	movw	r14, r24
 65e:	ee 0c       	add	r14, r14
 660:	ff 1c       	adc	r15, r15
 662:	ee 0c       	add	r14, r14
 664:	ff 1c       	adc	r15, r15
 666:	e8 0e       	add	r14, r24
 668:	f9 1e       	adc	r15, r25
 66a:	0f 2e       	mov	r0, r31
 66c:	f6 e2       	ldi	r31, 0x26	; 38
 66e:	af 2e       	mov	r10, r31
 670:	f1 e0       	ldi	r31, 0x01	; 1
 672:	bf 2e       	mov	r11, r31
 674:	f0 2d       	mov	r31, r0
 676:	0f 2e       	mov	r0, r31
 678:	f4 e2       	ldi	r31, 0x24	; 36
 67a:	cf 2e       	mov	r12, r31
 67c:	f1 e0       	ldi	r31, 0x01	; 1
 67e:	df 2e       	mov	r13, r31
 680:	f0 2d       	mov	r31, r0
 682:	f7 01       	movw	r30, r14
 684:	e9 0d       	add	r30, r9
 686:	f1 1d       	adc	r31, r1
 688:	e8 59       	subi	r30, 0x98	; 152
 68a:	ff 4f       	sbci	r31, 0xFF	; 255
 68c:	84 90       	lpm	r8, Z
 68e:	c7 e0       	ldi	r28, 0x07	; 7
 690:	88 20       	and	r8, r8
 692:	ac f4       	brge	.+42     	; 0x6be <DrawChar+0x100>
 694:	f5 01       	movw	r30, r10
 696:	60 81       	ld	r22, Z
 698:	dc 2f       	mov	r29, r28
 69a:	dd 0f       	add	r29, r29
 69c:	6d 0f       	add	r22, r29
 69e:	f6 01       	movw	r30, r12
 6a0:	80 81       	ld	r24, Z
 6a2:	a2 01       	movw	r20, r4
 6a4:	89 0d       	add	r24, r9
 6a6:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 6aa:	f5 01       	movw	r30, r10
 6ac:	60 81       	ld	r22, Z
 6ae:	6f 5f       	subi	r22, 0xFF	; 255
 6b0:	6d 0f       	add	r22, r29
 6b2:	f6 01       	movw	r30, r12
 6b4:	80 81       	ld	r24, Z
 6b6:	a2 01       	movw	r20, r4
 6b8:	89 0d       	add	r24, r9
 6ba:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 6be:	88 0c       	add	r8, r8
 6c0:	c1 50       	subi	r28, 0x01	; 1
 6c2:	30 f7       	brcc	.-52     	; 0x690 <DrawChar+0xd2>
 6c4:	9a 94       	dec	r9
 6c6:	ff ef       	ldi	r31, 0xFF	; 255
 6c8:	9f 12       	cpse	r9, r31
 6ca:	db cf       	rjmp	.-74     	; 0x682 <DrawChar+0xc4>
 6cc:	59 c0       	rjmp	.+178    	; 0x780 <DrawChar+0x1c2>
 6ce:	4a 30       	cpi	r20, 0x0A	; 10
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <DrawChar+0x116>
 6d2:	56 c0       	rjmp	.+172    	; 0x780 <DrawChar+0x1c2>
 6d4:	68 94       	set
 6d6:	ee 24       	eor	r14, r14
 6d8:	e2 f8       	bld	r14, 2
 6da:	c8 2e       	mov	r12, r24
 6dc:	d1 2c       	mov	r13, r1
 6de:	c6 01       	movw	r24, r12
 6e0:	80 97       	sbiw	r24, 0x20	; 32
 6e2:	6c 01       	movw	r12, r24
 6e4:	cc 0c       	add	r12, r12
 6e6:	dd 1c       	adc	r13, r13
 6e8:	cc 0c       	add	r12, r12
 6ea:	dd 1c       	adc	r13, r13
 6ec:	c8 0e       	add	r12, r24
 6ee:	d9 1e       	adc	r13, r25
 6f0:	0f 2e       	mov	r0, r31
 6f2:	f6 e2       	ldi	r31, 0x26	; 38
 6f4:	8f 2e       	mov	r8, r31
 6f6:	f1 e0       	ldi	r31, 0x01	; 1
 6f8:	9f 2e       	mov	r9, r31
 6fa:	f0 2d       	mov	r31, r0
 6fc:	0f 2e       	mov	r0, r31
 6fe:	f4 e2       	ldi	r31, 0x24	; 36
 700:	af 2e       	mov	r10, r31
 702:	f1 e0       	ldi	r31, 0x01	; 1
 704:	bf 2e       	mov	r11, r31
 706:	f0 2d       	mov	r31, r0
 708:	f6 01       	movw	r30, r12
 70a:	ee 0d       	add	r30, r14
 70c:	f1 1d       	adc	r31, r1
 70e:	e8 59       	subi	r30, 0x98	; 152
 710:	ff 4f       	sbci	r31, 0xFF	; 255
 712:	c4 91       	lpm	r28, Z
 714:	7e 2c       	mov	r7, r14
 716:	77 0c       	add	r7, r7
 718:	d7 e0       	ldi	r29, 0x07	; 7
 71a:	cc 23       	and	r28, r28
 71c:	54 f5       	brge	.+84     	; 0x772 <DrawChar+0x1b4>
 71e:	f4 01       	movw	r30, r8
 720:	60 81       	ld	r22, Z
 722:	fd 2e       	mov	r15, r29
 724:	ff 0c       	add	r15, r15
 726:	6f 0d       	add	r22, r15
 728:	f5 01       	movw	r30, r10
 72a:	80 81       	ld	r24, Z
 72c:	a2 01       	movw	r20, r4
 72e:	87 0d       	add	r24, r7
 730:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 734:	f4 01       	movw	r30, r8
 736:	60 81       	ld	r22, Z
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	6f 0d       	add	r22, r15
 73c:	f5 01       	movw	r30, r10
 73e:	80 81       	ld	r24, Z
 740:	a2 01       	movw	r20, r4
 742:	87 0d       	add	r24, r7
 744:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 748:	f4 01       	movw	r30, r8
 74a:	60 81       	ld	r22, Z
 74c:	6f 0d       	add	r22, r15
 74e:	f5 01       	movw	r30, r10
 750:	80 81       	ld	r24, Z
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	a2 01       	movw	r20, r4
 756:	87 0d       	add	r24, r7
 758:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 75c:	f4 01       	movw	r30, r8
 75e:	60 81       	ld	r22, Z
 760:	6f 5f       	subi	r22, 0xFF	; 255
 762:	6f 0d       	add	r22, r15
 764:	f5 01       	movw	r30, r10
 766:	80 81       	ld	r24, Z
 768:	8f 5f       	subi	r24, 0xFF	; 255
 76a:	a2 01       	movw	r20, r4
 76c:	87 0d       	add	r24, r7
 76e:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 772:	cc 0f       	add	r28, r28
 774:	d1 50       	subi	r29, 0x01	; 1
 776:	88 f6       	brcc	.-94     	; 0x71a <DrawChar+0x15c>
 778:	ea 94       	dec	r14
 77a:	ff ef       	ldi	r31, 0xFF	; 255
 77c:	ef 12       	cpse	r14, r31
 77e:	c4 cf       	rjmp	.-120    	; 0x708 <DrawChar+0x14a>
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	df 91       	pop	r29
 784:	cf 91       	pop	r28
 786:	1f 91       	pop	r17
 788:	ff 90       	pop	r15
 78a:	ef 90       	pop	r14
 78c:	df 90       	pop	r13
 78e:	cf 90       	pop	r12
 790:	bf 90       	pop	r11
 792:	af 90       	pop	r10
 794:	9f 90       	pop	r9
 796:	8f 90       	pop	r8
 798:	7f 90       	pop	r7
 79a:	5f 90       	pop	r5
 79c:	4f 90       	pop	r4
 79e:	08 95       	ret

000007a0 <DrawString>:
 7a0:	9f 92       	push	r9
 7a2:	af 92       	push	r10
 7a4:	bf 92       	push	r11
 7a6:	cf 92       	push	r12
 7a8:	df 92       	push	r13
 7aa:	ef 92       	push	r14
 7ac:	ff 92       	push	r15
 7ae:	0f 93       	push	r16
 7b0:	1f 93       	push	r17
 7b2:	cf 93       	push	r28
 7b4:	df 93       	push	r29
 7b6:	ec 01       	movw	r28, r24
 7b8:	88 81       	ld	r24, Y
 7ba:	88 23       	and	r24, r24
 7bc:	21 f1       	breq	.+72     	; 0x806 <DrawString+0x66>
 7be:	a4 2e       	mov	r10, r20
 7c0:	8b 01       	movw	r16, r22
 7c2:	94 2e       	mov	r9, r20
 7c4:	96 94       	lsr	r9
 7c6:	b1 2c       	mov	r11, r1
 7c8:	0f 2e       	mov	r0, r31
 7ca:	f6 e2       	ldi	r31, 0x26	; 38
 7cc:	cf 2e       	mov	r12, r31
 7ce:	f1 e0       	ldi	r31, 0x01	; 1
 7d0:	df 2e       	mov	r13, r31
 7d2:	f0 2d       	mov	r31, r0
 7d4:	0f 2e       	mov	r0, r31
 7d6:	f4 e2       	ldi	r31, 0x24	; 36
 7d8:	ef 2e       	mov	r14, r31
 7da:	f1 e0       	ldi	r31, 0x01	; 1
 7dc:	ff 2e       	mov	r15, r31
 7de:	f0 2d       	mov	r31, r0
 7e0:	b3 94       	inc	r11
 7e2:	4a 2d       	mov	r20, r10
 7e4:	b8 01       	movw	r22, r16
 7e6:	0e 94 df 02 	call	0x5be	; 0x5be <DrawChar>
 7ea:	f7 01       	movw	r30, r14
 7ec:	80 81       	ld	r24, Z
 7ee:	8a 5f       	subi	r24, 0xFA	; 250
 7f0:	f6 01       	movw	r30, r12
 7f2:	60 81       	ld	r22, Z
 7f4:	89 0d       	add	r24, r9
 7f6:	0e 94 ad 02 	call	0x55a	; 0x55a <SetPosition>
 7fa:	fe 01       	movw	r30, r28
 7fc:	eb 0d       	add	r30, r11
 7fe:	f1 1d       	adc	r31, r1
 800:	80 81       	ld	r24, Z
 802:	81 11       	cpse	r24, r1
 804:	ed cf       	rjmp	.-38     	; 0x7e0 <DrawString+0x40>
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
 80e:	ff 90       	pop	r15
 810:	ef 90       	pop	r14
 812:	df 90       	pop	r13
 814:	cf 90       	pop	r12
 816:	bf 90       	pop	r11
 818:	af 90       	pop	r10
 81a:	9f 90       	pop	r9
 81c:	08 95       	ret

0000081e <DrawLine>:
 81e:	6f 92       	push	r6
 820:	7f 92       	push	r7
 822:	8f 92       	push	r8
 824:	9f 92       	push	r9
 826:	af 92       	push	r10
 828:	bf 92       	push	r11
 82a:	cf 92       	push	r12
 82c:	df 92       	push	r13
 82e:	ef 92       	push	r14
 830:	ff 92       	push	r15
 832:	0f 93       	push	r16
 834:	1f 93       	push	r17
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	d8 2f       	mov	r29, r24
 83c:	a6 2e       	mov	r10, r22
 83e:	c4 2f       	mov	r28, r20
 840:	62 2e       	mov	r6, r18
 842:	48 01       	movw	r8, r16
 844:	e6 2e       	mov	r14, r22
 846:	f1 2c       	mov	r15, r1
 848:	e8 1a       	sub	r14, r24
 84a:	f1 08       	sbc	r15, r1
 84c:	c2 2e       	mov	r12, r18
 84e:	d1 2c       	mov	r13, r1
 850:	c4 1a       	sub	r12, r20
 852:	d1 08       	sbc	r13, r1
 854:	ff 20       	and	r15, r15
 856:	34 f4       	brge	.+12     	; 0x864 <DrawLine+0x46>
 858:	f1 94       	neg	r15
 85a:	e1 94       	neg	r14
 85c:	f1 08       	sbc	r15, r1
 85e:	77 24       	eor	r7, r7
 860:	7a 94       	dec	r7
 862:	02 c0       	rjmp	.+4      	; 0x868 <DrawLine+0x4a>
 864:	77 24       	eor	r7, r7
 866:	73 94       	inc	r7
 868:	dd 20       	and	r13, r13
 86a:	34 f4       	brge	.+12     	; 0x878 <DrawLine+0x5a>
 86c:	d1 94       	neg	r13
 86e:	c1 94       	neg	r12
 870:	d1 08       	sbc	r13, r1
 872:	bb 24       	eor	r11, r11
 874:	ba 94       	dec	r11
 876:	02 c0       	rjmp	.+4      	; 0x87c <DrawLine+0x5e>
 878:	bb 24       	eor	r11, r11
 87a:	b3 94       	inc	r11
 87c:	ce 14       	cp	r12, r14
 87e:	df 04       	cpc	r13, r15
 880:	f4 f4       	brge	.+60     	; 0x8be <DrawLine+0xa0>
 882:	cc 0c       	add	r12, r12
 884:	dd 1c       	adc	r13, r13
 886:	86 01       	movw	r16, r12
 888:	0e 19       	sub	r16, r14
 88a:	1f 09       	sbc	r17, r15
 88c:	a4 01       	movw	r20, r8
 88e:	6c 2f       	mov	r22, r28
 890:	8d 2f       	mov	r24, r29
 892:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 896:	ad 16       	cp	r10, r29
 898:	81 f1       	breq	.+96     	; 0x8fa <DrawLine+0xdc>
 89a:	ee 0c       	add	r14, r14
 89c:	ff 1c       	adc	r15, r15
 89e:	d7 0d       	add	r29, r7
 8a0:	11 23       	and	r17, r17
 8a2:	1c f0       	brlt	.+6      	; 0x8aa <DrawLine+0x8c>
 8a4:	cb 0d       	add	r28, r11
 8a6:	0e 19       	sub	r16, r14
 8a8:	1f 09       	sbc	r17, r15
 8aa:	0c 0d       	add	r16, r12
 8ac:	1d 1d       	adc	r17, r13
 8ae:	a4 01       	movw	r20, r8
 8b0:	6c 2f       	mov	r22, r28
 8b2:	8d 2f       	mov	r24, r29
 8b4:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 8b8:	da 11       	cpse	r29, r10
 8ba:	f1 cf       	rjmp	.-30     	; 0x89e <DrawLine+0x80>
 8bc:	1e c0       	rjmp	.+60     	; 0x8fa <DrawLine+0xdc>
 8be:	ee 0c       	add	r14, r14
 8c0:	ff 1c       	adc	r15, r15
 8c2:	86 01       	movw	r16, r12
 8c4:	0e 19       	sub	r16, r14
 8c6:	1f 09       	sbc	r17, r15
 8c8:	a4 01       	movw	r20, r8
 8ca:	6c 2f       	mov	r22, r28
 8cc:	8d 2f       	mov	r24, r29
 8ce:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 8d2:	6c 16       	cp	r6, r28
 8d4:	91 f0       	breq	.+36     	; 0x8fa <DrawLine+0xdc>
 8d6:	cc 0c       	add	r12, r12
 8d8:	dd 1c       	adc	r13, r13
 8da:	cb 0d       	add	r28, r11
 8dc:	10 16       	cp	r1, r16
 8de:	11 06       	cpc	r1, r17
 8e0:	1c f0       	brlt	.+6      	; 0x8e8 <DrawLine+0xca>
 8e2:	d7 0d       	add	r29, r7
 8e4:	0c 0d       	add	r16, r12
 8e6:	1d 1d       	adc	r17, r13
 8e8:	0e 19       	sub	r16, r14
 8ea:	1f 09       	sbc	r17, r15
 8ec:	a4 01       	movw	r20, r8
 8ee:	6c 2f       	mov	r22, r28
 8f0:	8d 2f       	mov	r24, r29
 8f2:	0e 94 cf 02 	call	0x59e	; 0x59e <DrawPixel>
 8f6:	c6 11       	cpse	r28, r6
 8f8:	f0 cf       	rjmp	.-32     	; 0x8da <DrawLine+0xbc>
 8fa:	81 e0       	ldi	r24, 0x01	; 1
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	1f 91       	pop	r17
 902:	0f 91       	pop	r16
 904:	ff 90       	pop	r15
 906:	ef 90       	pop	r14
 908:	df 90       	pop	r13
 90a:	cf 90       	pop	r12
 90c:	bf 90       	pop	r11
 90e:	af 90       	pop	r10
 910:	9f 90       	pop	r9
 912:	8f 90       	pop	r8
 914:	7f 90       	pop	r7
 916:	6f 90       	pop	r6
 918:	08 95       	ret

0000091a <ClearScreen>:
 *
 * @param uint16_t color
 * @return void
 */
void ClearScreen(uint16_t color)
{
 91a:	cf 93       	push	r28
 91c:	df 93       	push	r29
 91e:	ec 01       	movw	r28, r24
  // set whole window
  SetWindow(0, SIZE_X, 0, SIZE_Y);
 920:	23 e8       	ldi	r18, 0x83	; 131
 922:	40 e0       	ldi	r20, 0x00	; 0
 924:	61 ea       	ldi	r22, 0xA1	; 161
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SetWindow>
  // draw individual pixels 
  // CACHE_SIZE_MEM = SIZE_X * SIZE_Y
  SendColor565(color, CACHE_SIZE_MEM);
 92c:	68 e8       	ldi	r22, 0x88	; 136
 92e:	73 e5       	ldi	r23, 0x53	; 83
 930:	ce 01       	movw	r24, r28
 932:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SendColor565>
}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <UpdateScreen>:

void UpdateScreen(void)
{
  // display on
  CommandSend(DISPON);
 93c:	89 e2       	ldi	r24, 0x29	; 41
 93e:	0e 94 3d 02 	call	0x47a	; 0x47a <CommandSend>
 942:	08 95       	ret

00000944 <DelayMs>:
 * @return void
 */
void DelayMs(uint8_t time)
{
  // loop through real time
  while (time--) {
 944:	88 23       	and	r24, r24
 946:	41 f0       	breq	.+16     	; 0x958 <DelayMs+0x14>
 948:	ef e9       	ldi	r30, 0x9F	; 159
 94a:	ff e0       	ldi	r31, 0x0F	; 15
 94c:	31 97       	sbiw	r30, 0x01	; 1
 94e:	f1 f7       	brne	.-4      	; 0x94c <DelayMs+0x8>
 950:	00 c0       	rjmp	.+0      	; 0x952 <DelayMs+0xe>
 952:	00 00       	nop
 954:	81 50       	subi	r24, 0x01	; 1
 956:	c1 f7       	brne	.-16     	; 0x948 <DelayMs+0x4>
 958:	08 95       	ret

0000095a <St7735Commands>:
 *
 * @param const uint8_t *
 * @return void
 */
void St7735Commands(const uint8_t *commands)
{
 95a:	cf 92       	push	r12
 95c:	df 92       	push	r13
 95e:	ef 92       	push	r14
 960:	ff 92       	push	r15
 962:	0f 93       	push	r16
 964:	1f 93       	push	r17
 966:	cf 93       	push	r28
 968:	df 93       	push	r29
  uint8_t milliseconds;
  uint8_t numOfCommands;
  uint8_t numOfArguments;

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
 96a:	7c 01       	movw	r14, r24
 96c:	2f ef       	ldi	r18, 0xFF	; 255
 96e:	e2 1a       	sub	r14, r18
 970:	f2 0a       	sbc	r15, r18
 972:	fc 01       	movw	r30, r24
 974:	d4 90       	lpm	r13, Z
  
  // loop through whole command list
  while (numOfCommands--) {
 976:	2d c0       	rjmp	.+90     	; 0x9d2 <St7735Commands+0x78>
    // send command
    CommandSend(pgm_read_byte(commands++));
 978:	f7 01       	movw	r30, r14
 97a:	84 91       	lpm	r24, Z
 97c:	0e 94 3d 02 	call	0x47a	; 0x47a <CommandSend>
    // read number of arguments
    numOfArguments = pgm_read_byte(commands++);
 980:	f7 01       	movw	r30, r14
 982:	31 96       	adiw	r30, 0x01	; 1
 984:	e4 91       	lpm	r30, Z
 986:	f2 e0       	ldi	r31, 0x02	; 2
 988:	ef 0e       	add	r14, r31
 98a:	f1 1c       	adc	r15, r1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
 98c:	2e 2f       	mov	r18, r30
 98e:	20 78       	andi	r18, 0x80	; 128
 990:	c2 2e       	mov	r12, r18
    // remove delay flag
    numOfArguments &= ~DELAY;
 992:	ef 77       	andi	r30, 0x7F	; 127
    // loop through number of arguments
    while (numOfArguments--) {
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	8e 0f       	add	r24, r30
 998:	ee 23       	and	r30, r30
 99a:	89 f0       	breq	.+34     	; 0x9be <St7735Commands+0x64>
 99c:	3e 2d       	mov	r19, r14
 99e:	2f 2d       	mov	r18, r15
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	01 96       	adiw	r24, 0x01	; 1
 9a4:	e8 0e       	add	r14, r24
 9a6:	f9 1e       	adc	r15, r25
 9a8:	87 01       	movw	r16, r14
 9aa:	c3 2f       	mov	r28, r19
 9ac:	d2 2f       	mov	r29, r18
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
 9ae:	fe 01       	movw	r30, r28
 9b0:	84 91       	lpm	r24, Z
 9b2:	0e 94 46 02 	call	0x48c	; 0x48c <Data8BitsSend>
 9b6:	21 96       	adiw	r28, 0x01	; 1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
    // remove delay flag
    numOfArguments &= ~DELAY;
    // loop through number of arguments
    while (numOfArguments--) {
 9b8:	c0 17       	cp	r28, r16
 9ba:	d1 07       	cpc	r29, r17
 9bc:	c1 f7       	brne	.-16     	; 0x9ae <St7735Commands+0x54>
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
 9be:	cc 20       	and	r12, r12
 9c0:	39 f0       	breq	.+14     	; 0x9d0 <St7735Commands+0x76>
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
 9c2:	e7 01       	movw	r28, r14
 9c4:	21 96       	adiw	r28, 0x01	; 1
 9c6:	f7 01       	movw	r30, r14
 9c8:	84 91       	lpm	r24, Z
      // delay
      DelayMs(milliseconds);
 9ca:	0e 94 a2 04 	call	0x944	; 0x944 <DelayMs>
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
 9ce:	7e 01       	movw	r14, r28
 9d0:	da 94       	dec	r13

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
  
  // loop through whole command list
  while (numOfCommands--) {
 9d2:	d1 10       	cpse	r13, r1
 9d4:	d1 cf       	rjmp	.-94     	; 0x978 <St7735Commands+0x1e>
      milliseconds = pgm_read_byte(commands++);
      // delay
      DelayMs(milliseconds);
    }
  }
}
 9d6:	df 91       	pop	r29
 9d8:	cf 91       	pop	r28
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	ff 90       	pop	r15
 9e0:	ef 90       	pop	r14
 9e2:	df 90       	pop	r13
 9e4:	cf 90       	pop	r12
 9e6:	08 95       	ret

000009e8 <St7735Init>:


void St7735Init(void)
{
  // hardware reset
  HardwareReset();
 9e8:	0e 94 1a 02 	call	0x434	; 0x434 <HardwareReset>
  // init spi
  SpiInit();
 9ec:	0e 94 2b 02 	call	0x456	; 0x456 <SpiInit>
  // load list of commands
  St7735Commands(INIT_ST7735B);
 9f0:	88 e4       	ldi	r24, 0x48	; 72
 9f2:	92 e0       	ldi	r25, 0x02	; 2
 9f4:	0e 94 ad 04 	call	0x95a	; 0x95a <St7735Commands>
 9f8:	08 95       	ret

000009fa <USART_Init>:
		push(&TX_buffer, *string);
		string++;
	}
	UCSR0B |= (1<<UDRIE0); // UDR Empty Interrupt Enable
	_delay_ms(10);
}
 9fa:	cf 93       	push	r28
 9fc:	df 93       	push	r29
 9fe:	00 d0       	rcall	.+0      	; 0xa00 <USART_Init+0x6>
 a00:	00 d0       	rcall	.+0      	; 0xa02 <USART_Init+0x8>
 a02:	1f 92       	push	r1
 a04:	cd b7       	in	r28, 0x3d	; 61
 a06:	de b7       	in	r29, 0x3e	; 62
 a08:	49 83       	std	Y+1, r20	; 0x01
 a0a:	5a 83       	std	Y+2, r21	; 0x02
 a0c:	29 81       	ldd	r18, Y+1	; 0x01
 a0e:	3a 81       	ldd	r19, Y+2	; 0x02
 a10:	40 e0       	ldi	r20, 0x00	; 0
 a12:	50 e0       	ldi	r21, 0x00	; 0
 a14:	60 e4       	ldi	r22, 0x40	; 64
 a16:	72 e4       	ldi	r23, 0x42	; 66
 a18:	8f e0       	ldi	r24, 0x0F	; 15
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <__udivmodsi4>
 a20:	21 50       	subi	r18, 0x01	; 1
 a22:	31 09       	sbc	r19, r1
 a24:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 a28:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 a2c:	88 e9       	ldi	r24, 0x98	; 152
 a2e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a32:	86 e0       	ldi	r24, 0x06	; 6
 a34:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 a38:	0f 90       	pop	r0
 a3a:	0f 90       	pop	r0
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	0f 90       	pop	r0
 a42:	df 91       	pop	r29
 a44:	cf 91       	pop	r28
 a46:	08 95       	ret

00000a48 <buff_init>:
 a48:	cf 93       	push	r28
 a4a:	df 93       	push	r29
 a4c:	ec 01       	movw	r28, r24
 a4e:	79 83       	std	Y+1, r23	; 0x01
 a50:	68 83       	st	Y, r22
 a52:	1b 82       	std	Y+3, r1	; 0x03
 a54:	1a 82       	std	Y+2, r1	; 0x02
 a56:	1d 82       	std	Y+5, r1	; 0x05
 a58:	1c 82       	std	Y+4, r1	; 0x04
 a5a:	cb 01       	movw	r24, r22
 a5c:	88 0f       	add	r24, r24
 a5e:	99 1f       	adc	r25, r25
 a60:	0e 94 9c 05 	call	0xb38	; 0xb38 <malloc>
 a64:	9f 83       	std	Y+7, r25	; 0x07
 a66:	8e 83       	std	Y+6, r24	; 0x06
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	08 95       	ret

00000a6e <push>:
 a6e:	fc 01       	movw	r30, r24
 a70:	a6 81       	ldd	r26, Z+6	; 0x06
 a72:	b7 81       	ldd	r27, Z+7	; 0x07
 a74:	82 81       	ldd	r24, Z+2	; 0x02
 a76:	93 81       	ldd	r25, Z+3	; 0x03
 a78:	a8 0f       	add	r26, r24
 a7a:	b9 1f       	adc	r27, r25
 a7c:	6c 93       	st	X, r22
 a7e:	82 81       	ldd	r24, Z+2	; 0x02
 a80:	93 81       	ldd	r25, Z+3	; 0x03
 a82:	01 96       	adiw	r24, 0x01	; 1
 a84:	93 83       	std	Z+3, r25	; 0x03
 a86:	82 83       	std	Z+2, r24	; 0x02
 a88:	20 81       	ld	r18, Z
 a8a:	31 81       	ldd	r19, Z+1	; 0x01
 a8c:	82 17       	cp	r24, r18
 a8e:	93 07       	cpc	r25, r19
 a90:	14 f0       	brlt	.+4      	; 0xa96 <push+0x28>
 a92:	13 82       	std	Z+3, r1	; 0x03
 a94:	12 82       	std	Z+2, r1	; 0x02
 a96:	84 81       	ldd	r24, Z+4	; 0x04
 a98:	95 81       	ldd	r25, Z+5	; 0x05
 a9a:	42 81       	ldd	r20, Z+2	; 0x02
 a9c:	53 81       	ldd	r21, Z+3	; 0x03
 a9e:	84 17       	cp	r24, r20
 aa0:	95 07       	cpc	r25, r21
 aa2:	49 f4       	brne	.+18     	; 0xab6 <push+0x48>
 aa4:	01 96       	adiw	r24, 0x01	; 1
 aa6:	82 17       	cp	r24, r18
 aa8:	93 07       	cpc	r25, r19
 aaa:	1c f4       	brge	.+6      	; 0xab2 <push+0x44>
 aac:	95 83       	std	Z+5, r25	; 0x05
 aae:	84 83       	std	Z+4, r24	; 0x04
 ab0:	08 95       	ret
 ab2:	15 82       	std	Z+5, r1	; 0x05
 ab4:	14 82       	std	Z+4, r1	; 0x04
 ab6:	08 95       	ret

00000ab8 <pop>:
		if (buffer->read_count >= buffer->size) buffer->read_count = 0;
	}
}

char pop(buffer_t *buffer)
{
 ab8:	fc 01       	movw	r30, r24
	if (buffer->read_count == buffer->write_count) return 0;
 aba:	84 81       	ldd	r24, Z+4	; 0x04
 abc:	95 81       	ldd	r25, Z+5	; 0x05
 abe:	22 81       	ldd	r18, Z+2	; 0x02
 ac0:	33 81       	ldd	r19, Z+3	; 0x03
 ac2:	82 17       	cp	r24, r18
 ac4:	93 07       	cpc	r25, r19
 ac6:	a1 f0       	breq	.+40     	; 0xaf0 <pop+0x38>

	char element;
	element = buffer->element[buffer->read_count];
 ac8:	a6 81       	ldd	r26, Z+6	; 0x06
 aca:	b7 81       	ldd	r27, Z+7	; 0x07
 acc:	a8 0f       	add	r26, r24
 ace:	b9 1f       	adc	r27, r25
 ad0:	8c 91       	ld	r24, X
	buffer->element[buffer->read_count] = '\0';
 ad2:	1c 92       	st	X, r1
	buffer->read_count++;
 ad4:	24 81       	ldd	r18, Z+4	; 0x04
 ad6:	35 81       	ldd	r19, Z+5	; 0x05
 ad8:	2f 5f       	subi	r18, 0xFF	; 255
 ada:	3f 4f       	sbci	r19, 0xFF	; 255
 adc:	35 83       	std	Z+5, r19	; 0x05
 ade:	24 83       	std	Z+4, r18	; 0x04
	if (buffer->read_count >= buffer->size) buffer->read_count = 0;
 ae0:	40 81       	ld	r20, Z
 ae2:	51 81       	ldd	r21, Z+1	; 0x01
 ae4:	24 17       	cp	r18, r20
 ae6:	35 07       	cpc	r19, r21
 ae8:	24 f0       	brlt	.+8      	; 0xaf2 <pop+0x3a>
 aea:	15 82       	std	Z+5, r1	; 0x05
 aec:	14 82       	std	Z+4, r1	; 0x04
 aee:	08 95       	ret
	}
}

char pop(buffer_t *buffer)
{
	if (buffer->read_count == buffer->write_count) return 0;
 af0:	80 e0       	ldi	r24, 0x00	; 0
	element = buffer->element[buffer->read_count];
	buffer->element[buffer->read_count] = '\0';
	buffer->read_count++;
	if (buffer->read_count >= buffer->size) buffer->read_count = 0;
	return element;
}
 af2:	08 95       	ret

00000af4 <__udivmodsi4>:
 af4:	a1 e2       	ldi	r26, 0x21	; 33
 af6:	1a 2e       	mov	r1, r26
 af8:	aa 1b       	sub	r26, r26
 afa:	bb 1b       	sub	r27, r27
 afc:	fd 01       	movw	r30, r26
 afe:	0d c0       	rjmp	.+26     	; 0xb1a <__udivmodsi4_ep>

00000b00 <__udivmodsi4_loop>:
 b00:	aa 1f       	adc	r26, r26
 b02:	bb 1f       	adc	r27, r27
 b04:	ee 1f       	adc	r30, r30
 b06:	ff 1f       	adc	r31, r31
 b08:	a2 17       	cp	r26, r18
 b0a:	b3 07       	cpc	r27, r19
 b0c:	e4 07       	cpc	r30, r20
 b0e:	f5 07       	cpc	r31, r21
 b10:	20 f0       	brcs	.+8      	; 0xb1a <__udivmodsi4_ep>
 b12:	a2 1b       	sub	r26, r18
 b14:	b3 0b       	sbc	r27, r19
 b16:	e4 0b       	sbc	r30, r20
 b18:	f5 0b       	sbc	r31, r21

00000b1a <__udivmodsi4_ep>:
 b1a:	66 1f       	adc	r22, r22
 b1c:	77 1f       	adc	r23, r23
 b1e:	88 1f       	adc	r24, r24
 b20:	99 1f       	adc	r25, r25
 b22:	1a 94       	dec	r1
 b24:	69 f7       	brne	.-38     	; 0xb00 <__udivmodsi4_loop>
 b26:	60 95       	com	r22
 b28:	70 95       	com	r23
 b2a:	80 95       	com	r24
 b2c:	90 95       	com	r25
 b2e:	9b 01       	movw	r18, r22
 b30:	ac 01       	movw	r20, r24
 b32:	bd 01       	movw	r22, r26
 b34:	cf 01       	movw	r24, r30
 b36:	08 95       	ret

00000b38 <malloc>:
 b38:	0f 93       	push	r16
 b3a:	1f 93       	push	r17
 b3c:	cf 93       	push	r28
 b3e:	df 93       	push	r29
 b40:	82 30       	cpi	r24, 0x02	; 2
 b42:	91 05       	cpc	r25, r1
 b44:	10 f4       	brcc	.+4      	; 0xb4a <malloc+0x12>
 b46:	82 e0       	ldi	r24, 0x02	; 2
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <__flp>
 b4e:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <__flp+0x1>
 b52:	20 e0       	ldi	r18, 0x00	; 0
 b54:	30 e0       	ldi	r19, 0x00	; 0
 b56:	a0 e0       	ldi	r26, 0x00	; 0
 b58:	b0 e0       	ldi	r27, 0x00	; 0
 b5a:	30 97       	sbiw	r30, 0x00	; 0
 b5c:	19 f1       	breq	.+70     	; 0xba4 <malloc+0x6c>
 b5e:	40 81       	ld	r20, Z
 b60:	51 81       	ldd	r21, Z+1	; 0x01
 b62:	02 81       	ldd	r16, Z+2	; 0x02
 b64:	13 81       	ldd	r17, Z+3	; 0x03
 b66:	48 17       	cp	r20, r24
 b68:	59 07       	cpc	r21, r25
 b6a:	c8 f0       	brcs	.+50     	; 0xb9e <malloc+0x66>
 b6c:	84 17       	cp	r24, r20
 b6e:	95 07       	cpc	r25, r21
 b70:	69 f4       	brne	.+26     	; 0xb8c <malloc+0x54>
 b72:	10 97       	sbiw	r26, 0x00	; 0
 b74:	31 f0       	breq	.+12     	; 0xb82 <malloc+0x4a>
 b76:	12 96       	adiw	r26, 0x02	; 2
 b78:	0c 93       	st	X, r16
 b7a:	12 97       	sbiw	r26, 0x02	; 2
 b7c:	13 96       	adiw	r26, 0x03	; 3
 b7e:	1c 93       	st	X, r17
 b80:	27 c0       	rjmp	.+78     	; 0xbd0 <malloc+0x98>
 b82:	00 93 3c 01 	sts	0x013C, r16	; 0x80013c <__flp>
 b86:	10 93 3d 01 	sts	0x013D, r17	; 0x80013d <__flp+0x1>
 b8a:	22 c0       	rjmp	.+68     	; 0xbd0 <malloc+0x98>
 b8c:	21 15       	cp	r18, r1
 b8e:	31 05       	cpc	r19, r1
 b90:	19 f0       	breq	.+6      	; 0xb98 <malloc+0x60>
 b92:	42 17       	cp	r20, r18
 b94:	53 07       	cpc	r21, r19
 b96:	18 f4       	brcc	.+6      	; 0xb9e <malloc+0x66>
 b98:	9a 01       	movw	r18, r20
 b9a:	bd 01       	movw	r22, r26
 b9c:	ef 01       	movw	r28, r30
 b9e:	df 01       	movw	r26, r30
 ba0:	f8 01       	movw	r30, r16
 ba2:	db cf       	rjmp	.-74     	; 0xb5a <malloc+0x22>
 ba4:	21 15       	cp	r18, r1
 ba6:	31 05       	cpc	r19, r1
 ba8:	f9 f0       	breq	.+62     	; 0xbe8 <malloc+0xb0>
 baa:	28 1b       	sub	r18, r24
 bac:	39 0b       	sbc	r19, r25
 bae:	24 30       	cpi	r18, 0x04	; 4
 bb0:	31 05       	cpc	r19, r1
 bb2:	80 f4       	brcc	.+32     	; 0xbd4 <malloc+0x9c>
 bb4:	8a 81       	ldd	r24, Y+2	; 0x02
 bb6:	9b 81       	ldd	r25, Y+3	; 0x03
 bb8:	61 15       	cp	r22, r1
 bba:	71 05       	cpc	r23, r1
 bbc:	21 f0       	breq	.+8      	; 0xbc6 <malloc+0x8e>
 bbe:	fb 01       	movw	r30, r22
 bc0:	93 83       	std	Z+3, r25	; 0x03
 bc2:	82 83       	std	Z+2, r24	; 0x02
 bc4:	04 c0       	rjmp	.+8      	; 0xbce <malloc+0x96>
 bc6:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__flp+0x1>
 bca:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__flp>
 bce:	fe 01       	movw	r30, r28
 bd0:	32 96       	adiw	r30, 0x02	; 2
 bd2:	44 c0       	rjmp	.+136    	; 0xc5c <malloc+0x124>
 bd4:	fe 01       	movw	r30, r28
 bd6:	e2 0f       	add	r30, r18
 bd8:	f3 1f       	adc	r31, r19
 bda:	81 93       	st	Z+, r24
 bdc:	91 93       	st	Z+, r25
 bde:	22 50       	subi	r18, 0x02	; 2
 be0:	31 09       	sbc	r19, r1
 be2:	39 83       	std	Y+1, r19	; 0x01
 be4:	28 83       	st	Y, r18
 be6:	3a c0       	rjmp	.+116    	; 0xc5c <malloc+0x124>
 be8:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__brkval>
 bec:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__brkval+0x1>
 bf0:	23 2b       	or	r18, r19
 bf2:	41 f4       	brne	.+16     	; 0xc04 <malloc+0xcc>
 bf4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 bf8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 bfc:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <__brkval+0x1>
 c00:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <__brkval>
 c04:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 c08:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 c0c:	21 15       	cp	r18, r1
 c0e:	31 05       	cpc	r19, r1
 c10:	41 f4       	brne	.+16     	; 0xc22 <malloc+0xea>
 c12:	2d b7       	in	r18, 0x3d	; 61
 c14:	3e b7       	in	r19, 0x3e	; 62
 c16:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c1a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c1e:	24 1b       	sub	r18, r20
 c20:	35 0b       	sbc	r19, r21
 c22:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <__brkval>
 c26:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <__brkval+0x1>
 c2a:	e2 17       	cp	r30, r18
 c2c:	f3 07       	cpc	r31, r19
 c2e:	a0 f4       	brcc	.+40     	; 0xc58 <malloc+0x120>
 c30:	2e 1b       	sub	r18, r30
 c32:	3f 0b       	sbc	r19, r31
 c34:	28 17       	cp	r18, r24
 c36:	39 07       	cpc	r19, r25
 c38:	78 f0       	brcs	.+30     	; 0xc58 <malloc+0x120>
 c3a:	ac 01       	movw	r20, r24
 c3c:	4e 5f       	subi	r20, 0xFE	; 254
 c3e:	5f 4f       	sbci	r21, 0xFF	; 255
 c40:	24 17       	cp	r18, r20
 c42:	35 07       	cpc	r19, r21
 c44:	48 f0       	brcs	.+18     	; 0xc58 <malloc+0x120>
 c46:	4e 0f       	add	r20, r30
 c48:	5f 1f       	adc	r21, r31
 c4a:	50 93 3b 01 	sts	0x013B, r21	; 0x80013b <__brkval+0x1>
 c4e:	40 93 3a 01 	sts	0x013A, r20	; 0x80013a <__brkval>
 c52:	81 93       	st	Z+, r24
 c54:	91 93       	st	Z+, r25
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <malloc+0x124>
 c58:	e0 e0       	ldi	r30, 0x00	; 0
 c5a:	f0 e0       	ldi	r31, 0x00	; 0
 c5c:	cf 01       	movw	r24, r30
 c5e:	df 91       	pop	r29
 c60:	cf 91       	pop	r28
 c62:	1f 91       	pop	r17
 c64:	0f 91       	pop	r16
 c66:	08 95       	ret

00000c68 <free>:
 c68:	cf 93       	push	r28
 c6a:	df 93       	push	r29
 c6c:	00 97       	sbiw	r24, 0x00	; 0
 c6e:	09 f4       	brne	.+2      	; 0xc72 <free+0xa>
 c70:	81 c0       	rjmp	.+258    	; 0xd74 <free+0x10c>
 c72:	fc 01       	movw	r30, r24
 c74:	32 97       	sbiw	r30, 0x02	; 2
 c76:	13 82       	std	Z+3, r1	; 0x03
 c78:	12 82       	std	Z+2, r1	; 0x02
 c7a:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <__flp>
 c7e:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <__flp+0x1>
 c82:	10 97       	sbiw	r26, 0x00	; 0
 c84:	81 f4       	brne	.+32     	; 0xca6 <free+0x3e>
 c86:	20 81       	ld	r18, Z
 c88:	31 81       	ldd	r19, Z+1	; 0x01
 c8a:	82 0f       	add	r24, r18
 c8c:	93 1f       	adc	r25, r19
 c8e:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__brkval>
 c92:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__brkval+0x1>
 c96:	28 17       	cp	r18, r24
 c98:	39 07       	cpc	r19, r25
 c9a:	51 f5       	brne	.+84     	; 0xcf0 <free+0x88>
 c9c:	f0 93 3b 01 	sts	0x013B, r31	; 0x80013b <__brkval+0x1>
 ca0:	e0 93 3a 01 	sts	0x013A, r30	; 0x80013a <__brkval>
 ca4:	67 c0       	rjmp	.+206    	; 0xd74 <free+0x10c>
 ca6:	ed 01       	movw	r28, r26
 ca8:	20 e0       	ldi	r18, 0x00	; 0
 caa:	30 e0       	ldi	r19, 0x00	; 0
 cac:	ce 17       	cp	r28, r30
 cae:	df 07       	cpc	r29, r31
 cb0:	40 f4       	brcc	.+16     	; 0xcc2 <free+0x5a>
 cb2:	4a 81       	ldd	r20, Y+2	; 0x02
 cb4:	5b 81       	ldd	r21, Y+3	; 0x03
 cb6:	9e 01       	movw	r18, r28
 cb8:	41 15       	cp	r20, r1
 cba:	51 05       	cpc	r21, r1
 cbc:	f1 f0       	breq	.+60     	; 0xcfa <free+0x92>
 cbe:	ea 01       	movw	r28, r20
 cc0:	f5 cf       	rjmp	.-22     	; 0xcac <free+0x44>
 cc2:	d3 83       	std	Z+3, r29	; 0x03
 cc4:	c2 83       	std	Z+2, r28	; 0x02
 cc6:	40 81       	ld	r20, Z
 cc8:	51 81       	ldd	r21, Z+1	; 0x01
 cca:	84 0f       	add	r24, r20
 ccc:	95 1f       	adc	r25, r21
 cce:	c8 17       	cp	r28, r24
 cd0:	d9 07       	cpc	r29, r25
 cd2:	59 f4       	brne	.+22     	; 0xcea <free+0x82>
 cd4:	88 81       	ld	r24, Y
 cd6:	99 81       	ldd	r25, Y+1	; 0x01
 cd8:	84 0f       	add	r24, r20
 cda:	95 1f       	adc	r25, r21
 cdc:	02 96       	adiw	r24, 0x02	; 2
 cde:	91 83       	std	Z+1, r25	; 0x01
 ce0:	80 83       	st	Z, r24
 ce2:	8a 81       	ldd	r24, Y+2	; 0x02
 ce4:	9b 81       	ldd	r25, Y+3	; 0x03
 ce6:	93 83       	std	Z+3, r25	; 0x03
 ce8:	82 83       	std	Z+2, r24	; 0x02
 cea:	21 15       	cp	r18, r1
 cec:	31 05       	cpc	r19, r1
 cee:	29 f4       	brne	.+10     	; 0xcfa <free+0x92>
 cf0:	f0 93 3d 01 	sts	0x013D, r31	; 0x80013d <__flp+0x1>
 cf4:	e0 93 3c 01 	sts	0x013C, r30	; 0x80013c <__flp>
 cf8:	3d c0       	rjmp	.+122    	; 0xd74 <free+0x10c>
 cfa:	e9 01       	movw	r28, r18
 cfc:	fb 83       	std	Y+3, r31	; 0x03
 cfe:	ea 83       	std	Y+2, r30	; 0x02
 d00:	49 91       	ld	r20, Y+
 d02:	59 91       	ld	r21, Y+
 d04:	c4 0f       	add	r28, r20
 d06:	d5 1f       	adc	r29, r21
 d08:	ec 17       	cp	r30, r28
 d0a:	fd 07       	cpc	r31, r29
 d0c:	61 f4       	brne	.+24     	; 0xd26 <free+0xbe>
 d0e:	80 81       	ld	r24, Z
 d10:	91 81       	ldd	r25, Z+1	; 0x01
 d12:	84 0f       	add	r24, r20
 d14:	95 1f       	adc	r25, r21
 d16:	02 96       	adiw	r24, 0x02	; 2
 d18:	e9 01       	movw	r28, r18
 d1a:	99 83       	std	Y+1, r25	; 0x01
 d1c:	88 83       	st	Y, r24
 d1e:	82 81       	ldd	r24, Z+2	; 0x02
 d20:	93 81       	ldd	r25, Z+3	; 0x03
 d22:	9b 83       	std	Y+3, r25	; 0x03
 d24:	8a 83       	std	Y+2, r24	; 0x02
 d26:	e0 e0       	ldi	r30, 0x00	; 0
 d28:	f0 e0       	ldi	r31, 0x00	; 0
 d2a:	12 96       	adiw	r26, 0x02	; 2
 d2c:	8d 91       	ld	r24, X+
 d2e:	9c 91       	ld	r25, X
 d30:	13 97       	sbiw	r26, 0x03	; 3
 d32:	00 97       	sbiw	r24, 0x00	; 0
 d34:	19 f0       	breq	.+6      	; 0xd3c <free+0xd4>
 d36:	fd 01       	movw	r30, r26
 d38:	dc 01       	movw	r26, r24
 d3a:	f7 cf       	rjmp	.-18     	; 0xd2a <free+0xc2>
 d3c:	8d 91       	ld	r24, X+
 d3e:	9c 91       	ld	r25, X
 d40:	11 97       	sbiw	r26, 0x01	; 1
 d42:	9d 01       	movw	r18, r26
 d44:	2e 5f       	subi	r18, 0xFE	; 254
 d46:	3f 4f       	sbci	r19, 0xFF	; 255
 d48:	82 0f       	add	r24, r18
 d4a:	93 1f       	adc	r25, r19
 d4c:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <__brkval>
 d50:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <__brkval+0x1>
 d54:	28 17       	cp	r18, r24
 d56:	39 07       	cpc	r19, r25
 d58:	69 f4       	brne	.+26     	; 0xd74 <free+0x10c>
 d5a:	30 97       	sbiw	r30, 0x00	; 0
 d5c:	29 f4       	brne	.+10     	; 0xd68 <free+0x100>
 d5e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <__flp+0x1>
 d62:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__flp>
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <free+0x104>
 d68:	13 82       	std	Z+3, r1	; 0x03
 d6a:	12 82       	std	Z+2, r1	; 0x02
 d6c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <__brkval+0x1>
 d70:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <__brkval>
 d74:	df 91       	pop	r29
 d76:	cf 91       	pop	r28
 d78:	08 95       	ret

00000d7a <_exit>:
 d7a:	f8 94       	cli

00000d7c <__stop_program>:
 d7c:	ff cf       	rjmp	.-2      	; 0xd7c <__stop_program>
