
Proyecto_unido.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000fce  00001062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000056  00800104  00800104  00001066  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab9  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be1  00000000  00000000  00002d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d08  00000000  00000000  0000390e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  00004618  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000720  00000000  00000000  00004ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016c5  00000000  00000000  000051e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000068a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__ctors_end>
   4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  10:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_4>
  14:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_5>
  18:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  1c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  20:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  24:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  28:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  38:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  3c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  44:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  4c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  50:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  58:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  5c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  60:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  64:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>

00000068 <CHARACTERS>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <INIT_ST7735B>:
 248:	0b 01 80 c8 11 80 c8 3a 81 05 0a b1 83 00 06 03     .......:........
 258:	0a 20 80 0a 36 01 a0 b6 02 15 02 b4 01 00 e0 10     . ..6...........
 268:	09 16 09 20 21 1b 13 19 17 15 1e 2b 04 05 02 0e     ... !......+....
 278:	e1 90 0b 14 08 1e 22 1d 18 1e 1b 1a 24 2b 06 06     ......".....$+..
 288:	02 0f 0a 13 80 0a                                   ......

0000028e <__ctors_end>:
 28e:	11 24       	eor	r1, r1
 290:	1f be       	out	0x3f, r1	; 63
 292:	cf ef       	ldi	r28, 0xFF	; 255
 294:	d8 e0       	ldi	r29, 0x08	; 8
 296:	de bf       	out	0x3e, r29	; 62
 298:	cd bf       	out	0x3d, r28	; 61

0000029a <__do_copy_data>:
 29a:	11 e0       	ldi	r17, 0x01	; 1
 29c:	a0 e0       	ldi	r26, 0x00	; 0
 29e:	b1 e0       	ldi	r27, 0x01	; 1
 2a0:	ee ec       	ldi	r30, 0xCE	; 206
 2a2:	ff e0       	ldi	r31, 0x0F	; 15
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x10>
 2a6:	05 90       	lpm	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	a4 30       	cpi	r26, 0x04	; 4
 2ac:	b1 07       	cpc	r27, r17
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0xc>

000002b0 <__do_clear_bss>:
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	a4 e0       	ldi	r26, 0x04	; 4
 2b4:	b1 e0       	ldi	r27, 0x01	; 1
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <.do_clear_bss_start>

000002b8 <.do_clear_bss_loop>:
 2b8:	1d 92       	st	X+, r1

000002ba <.do_clear_bss_start>:
 2ba:	aa 35       	cpi	r26, 0x5A	; 90
 2bc:	b2 07       	cpc	r27, r18
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <.do_clear_bss_loop>
 2c0:	0e 94 0b 02 	call	0x416	; 0x416 <main>
 2c4:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_exit>

000002c8 <__bad_interrupt>:
 2c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002cc <first_grid>:
char old_string3a[10];
char old_string3b[10];
char old_string4[10];

//recibe numero y lo pone en el cuadrante 1
void first_grid(uint32_t number){
 2cc:	4f 92       	push	r4
 2ce:	5f 92       	push	r5
 2d0:	6f 92       	push	r6
 2d2:	7f 92       	push	r7
 2d4:	af 92       	push	r10
 2d6:	bf 92       	push	r11
 2d8:	cf 92       	push	r12
 2da:	df 92       	push	r13
 2dc:	ef 92       	push	r14
 2de:	ff 92       	push	r15
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	2b 01       	movw	r4, r22
 2ea:	3c 01       	movw	r6, r24
	static int flag;
	int i;

	if (flag==1){
 2ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 2f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	09 f0       	breq	.+2      	; 0x2fa <first_grid+0x2e>
 2f8:	4c c0       	rjmp	.+152    	; 0x392 <first_grid+0xc6>
	SetPosition(5, 5);
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	0e 94 05 03 	call	0x60a	; 0x60a <SetPosition>
	DrawString(old_string1, 0xffff, X2);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	6f ef       	ldi	r22, 0xFF	; 255
 306:	7f ef       	ldi	r23, 0xFF	; 255
 308:	84 e1       	ldi	r24, 0x14	; 20
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 28 04 	call	0x850	; 0x850 <DrawString>
 310:	40 c0       	rjmp	.+128    	; 0x392 <first_grid+0xc6>
	}
	for(i=0; i<20; i++){
		int aux = number % 10;
 312:	c3 01       	movw	r24, r6
 314:	b2 01       	movw	r22, r4
 316:	2a e0       	ldi	r18, 0x0A	; 10
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodsi4>
 322:	6b 01       	movw	r12, r22
 324:	7c 01       	movw	r14, r24
		sprintf(old_string1[i], "%d", aux);
 326:	89 91       	ld	r24, Y+
 328:	df 92       	push	r13
 32a:	cf 92       	push	r12
 32c:	1f 93       	push	r17
 32e:	0f 93       	push	r16
 330:	1f 92       	push	r1
 332:	8f 93       	push	r24
 334:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <sprintf>
		number -= aux;
 338:	0d 2c       	mov	r0, r13
 33a:	00 0c       	add	r0, r0
 33c:	ee 08       	sbc	r14, r14
 33e:	ff 08       	sbc	r15, r15
 340:	c3 01       	movw	r24, r6
 342:	b2 01       	movw	r22, r4
 344:	6c 19       	sub	r22, r12
 346:	7d 09       	sbc	r23, r13
 348:	8e 09       	sbc	r24, r14
 34a:	9f 09       	sbc	r25, r15
		number /= 10;
 34c:	2a e0       	ldi	r18, 0x0A	; 10
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__udivmodsi4>
 358:	29 01       	movw	r4, r18
 35a:	3a 01       	movw	r6, r20

	if (flag==1){
	SetPosition(5, 5);
	DrawString(old_string1, 0xffff, X2);
	}
	for(i=0; i<20; i++){
 35c:	0f 90       	pop	r0
 35e:	0f 90       	pop	r0
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	0f 90       	pop	r0
 366:	0f 90       	pop	r0
 368:	ca 15       	cp	r28, r10
 36a:	db 05       	cpc	r29, r11
 36c:	91 f6       	brne	.-92     	; 0x312 <first_grid+0x46>
		int aux = number % 10;
		sprintf(old_string1[i], "%d", aux);
		number -= aux;
		number /= 10;
	}
	SetPosition(5, 5);
 36e:	65 e0       	ldi	r22, 0x05	; 5
 370:	85 e0       	ldi	r24, 0x05	; 5
 372:	0e 94 05 03 	call	0x60a	; 0x60a <SetPosition>
	DrawString(old_string1 , 0x0000, X2);
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	70 e0       	ldi	r23, 0x00	; 0
 37c:	84 e1       	ldi	r24, 0x14	; 20
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 28 04 	call	0x850	; 0x850 <DrawString>
	flag = 1;
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 38c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
}
 390:	0b c0       	rjmp	.+22     	; 0x3a8 <first_grid+0xdc>
 392:	c4 e1       	ldi	r28, 0x14	; 20
 394:	d1 e0       	ldi	r29, 0x01	; 1
 396:	0f 2e       	mov	r0, r31
 398:	f8 e2       	ldi	r31, 0x28	; 40
 39a:	af 2e       	mov	r10, r31
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	bf 2e       	mov	r11, r31
 3a0:	f0 2d       	mov	r31, r0
	SetPosition(5, 5);
	DrawString(old_string1, 0xffff, X2);
	}
	for(i=0; i<20; i++){
		int aux = number % 10;
		sprintf(old_string1[i], "%d", aux);
 3a2:	00 e0       	ldi	r16, 0x00	; 0
 3a4:	11 e0       	ldi	r17, 0x01	; 1
 3a6:	b5 cf       	rjmp	.-150    	; 0x312 <first_grid+0x46>
	}
	SetPosition(5, 5);
	DrawString(old_string1 , 0x0000, X2);
	flag = 1;
	
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	df 90       	pop	r13
 3b6:	cf 90       	pop	r12
 3b8:	bf 90       	pop	r11
 3ba:	af 90       	pop	r10
 3bc:	7f 90       	pop	r7
 3be:	6f 90       	pop	r6
 3c0:	5f 90       	pop	r5
 3c2:	4f 90       	pop	r4
 3c4:	08 95       	ret

000003c6 <Keyboard_init>:


void Keyboard_init(void)
{
	//OUTPUTS
	DDRC |= (1 << DDC0) | (1 << DDC1);
 3c6:	87 b1       	in	r24, 0x07	; 7
 3c8:	83 60       	ori	r24, 0x03	; 3
 3ca:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << DDD2) | (1 << DDD3);
 3cc:	8a b1       	in	r24, 0x0a	; 10
 3ce:	8c 60       	ori	r24, 0x0C	; 12
 3d0:	8a b9       	out	0x0a, r24	; 10
	
	//INPUTS
	DDRC &= ~((1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5));
 3d2:	87 b1       	in	r24, 0x07	; 7
 3d4:	83 7c       	andi	r24, 0xC3	; 195
 3d6:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~((1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7));
 3d8:	8a b1       	in	r24, 0x0a	; 10
 3da:	8f 70       	andi	r24, 0x0F	; 15
 3dc:	8a b9       	out	0x0a, r24	; 10
	
	//PULL-UP 
	PORTC |= (1 << PORTC2) | (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5);
 3de:	88 b1       	in	r24, 0x08	; 8
 3e0:	8c 63       	ori	r24, 0x3C	; 60
 3e2:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);
 3e4:	8b b1       	in	r24, 0x0b	; 11
 3e6:	80 6f       	ori	r24, 0xF0	; 240
 3e8:	8b b9       	out	0x0b, r24	; 11
	
	//OUTPUTS HIGH (neutro)
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
 3ea:	88 b1       	in	r24, 0x08	; 8
 3ec:	83 60       	ori	r24, 0x03	; 3
 3ee:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PORTD2) | (1 << PORTC3);
 3f0:	8b b1       	in	r24, 0x0b	; 11
 3f2:	8c 60       	ori	r24, 0x0C	; 12
 3f4:	8b b9       	out	0x0b, r24	; 11
	
	PCMSK1 |= 0x3C; //PC2,3,4,5
 3f6:	ec e6       	ldi	r30, 0x6C	; 108
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	8c 63       	ori	r24, 0x3C	; 60
 3fe:	80 83       	st	Z, r24
	PCMSK2 |= 0xF0; //PD4,5,6,7
 400:	ed e6       	ldi	r30, 0x6D	; 109
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	80 6f       	ori	r24, 0xF0	; 240
 408:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1) | (1<<PCIE2);   //interrupts de cambio habilitados	
 40a:	e8 e6       	ldi	r30, 0x68	; 104
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	86 60       	ori	r24, 0x06	; 6
 412:	80 83       	st	Z, r24
 414:	08 95       	ret

00000416 <main>:
static char operador = '+';
int punto = 0;

void main(void)
{
	St7735Init();
 416:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <St7735Init>
	Keyboard_init();
 41a:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Keyboard_init>
	
	UpdateScreen();
 41e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <UpdateScreen>
	ClearScreen(0xffff);
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	9f ef       	ldi	r25, 0xFF	; 255
 426:	0e 94 67 04 	call	0x8ce	; 0x8ce <ClearScreen>
	
	first_grid(11);
 42a:	8b e0       	ldi	r24, 0x0B	; 11
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 66 01 	call	0x2cc	; 0x2cc <first_grid>
	sei();
 432:	78 94       	sei
 434:	ff cf       	rjmp	.-2      	; 0x434 <main+0x1e>

00000436 <__vector_5>:
}


//agregar bool ocupado para no accionar multiples veces interrupcion!
ISR(PCINT2_vect) //seccion2 D
{
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	2f 93       	push	r18
 442:	3f 93       	push	r19
 444:	4f 93       	push	r20
 446:	5f 93       	push	r21
 448:	6f 93       	push	r22
 44a:	7f 93       	push	r23
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
 450:	af 93       	push	r26
 452:	bf 93       	push	r27
 454:	ef 93       	push	r30
 456:	ff 93       	push	r31
	//Debouncer in
	if      (!(PIND & (1<<PIND4))) { presionado = linea + 0;}
 458:	4c 9b       	sbis	0x09, 4	; 9
 45a:	04 c0       	rjmp	.+8      	; 0x464 <__vector_5+0x2e>
	else if (!(PIND & (1<<PIND5))) { presionado = linea + 1;}
 45c:	4d 9b       	sbis	0x09, 5	; 9
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__vector_5+0x2e>
	else if (!(PIND & (1<<PIND6))) { presionado = linea + 2;}
 460:	4e 99       	sbic	0x09, 6	; 9
	else if (!(PIND & (1<<PIND7))) { presionado = linea + 3;}
 462:	89 b1       	in	r24, 0x09	; 9
	//teclado();
	//debouncer out
	first_grid(2222);
 464:	8e ea       	ldi	r24, 0xAE	; 174
 466:	98 e0       	ldi	r25, 0x08	; 8
 468:	0e 94 66 01 	call	0x2cc	; 0x2cc <first_grid>
}
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_4>:

ISR(PCINT1_vect) //seccion1 C
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
	//debouncer in
	if      (!(PINC & (1<<PINC2))) { presionado = linea + 4;}
 4b0:	32 9b       	sbis	0x06, 2	; 6
 4b2:	04 c0       	rjmp	.+8      	; 0x4bc <__vector_4+0x2e>
	else if (!(PINC & (1<<PINC3))) { presionado = linea + 5;}
 4b4:	33 9b       	sbis	0x06, 3	; 6
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__vector_4+0x2e>
	else if (!(PINC & (1<<PINC4))) { presionado = linea + 6;}
 4b8:	34 99       	sbic	0x06, 4	; 6
	else if (!(PINC & (1<<PINC5))) { presionado = linea + 7;}
 4ba:	86 b1       	in	r24, 0x06	; 6
	//teclado();
	//debouncer out
	first_grid(1111);
 4bc:	87 e5       	ldi	r24, 0x57	; 87
 4be:	94 e0       	ldi	r25, 0x04	; 4
 4c0:	0e 94 66 01 	call	0x2cc	; 0x2cc <first_grid>
}
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	bf 91       	pop	r27
 4ca:	af 91       	pop	r26
 4cc:	9f 91       	pop	r25
 4ce:	8f 91       	pop	r24
 4d0:	7f 91       	pop	r23
 4d2:	6f 91       	pop	r22
 4d4:	5f 91       	pop	r21
 4d6:	4f 91       	pop	r20
 4d8:	3f 91       	pop	r19
 4da:	2f 91       	pop	r18
 4dc:	0f 90       	pop	r0
 4de:	0f be       	out	0x3f, r0	; 63
 4e0:	0f 90       	pop	r0
 4e2:	1f 90       	pop	r1
 4e4:	18 95       	reti

000004e6 <HardwareReset>:
*/

void HardwareReset(void)
{
	// Actiavte pull-up register logical high on pin RST
	PORTB |= BIT0;
 4e6:	28 9a       	sbi	0x05, 0	; 5
	// DDR as output
	DDRB  |= BIT0;
 4e8:	20 9a       	sbi	0x04, 0	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ea:	8f e4       	ldi	r24, 0x4F	; 79
 4ec:	93 ec       	ldi	r25, 0xC3	; 195
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <HardwareReset+0x8>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <HardwareReset+0xe>
 4f4:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset Low
	PORTB &= ~BIT0;
 4f6:	28 98       	cbi	0x05, 0	; 5
 4f8:	8f e4       	ldi	r24, 0x4F	; 79
 4fa:	93 ec       	ldi	r25, 0xC3	; 195
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <HardwareReset+0x16>
 500:	00 c0       	rjmp	.+0      	; 0x502 <HardwareReset+0x1c>
 502:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset High
	PORTB |= BIT0;
 504:	28 9a       	sbi	0x05, 0	; 5
 506:	08 95       	ret

00000508 <SpiInit>:

void SpiInit(void)
{

	// Output: SCK, MOSI, CS_LD, DC_LD
	DDRB  |= BIT5 | BIT3 | BIT2 | BIT1;
 508:	84 b1       	in	r24, 0x04	; 4
 50a:	8e 62       	ori	r24, 0x2E	; 46
 50c:	84 b9       	out	0x04, r24	; 4
	DDRB  &= ~BIT4;
 50e:	24 98       	cbi	0x04, 4	; 4
	PORTB |= BIT2 | BIT4;
 510:	85 b1       	in	r24, 0x05	; 5
 512:	84 61       	ori	r24, 0x14	; 20
 514:	85 b9       	out	0x05, r24	; 5
	SPCR  |= BIT6 | BIT4;// | BIT0 | BIT1;
 516:	8c b5       	in	r24, 0x2c	; 44
 518:	80 65       	ori	r24, 0x50	; 80
 51a:	8c bd       	out	0x2c, r24	; 44
	// SPI2X - Prescaler fclk/2 = 8MHz
	SPSR |= (1 << SPI2X);
 51c:	8d b5       	in	r24, 0x2d	; 45
 51e:	81 60       	ori	r24, 0x01	; 1
 520:	8d bd       	out	0x2d, r24	; 45
 522:	08 95       	ret

00000524 <CommandSend>:
}

uint8_t CommandSend(uint8_t data)
{
	// chip enable - active low
	PORTB &= ~BIT2;
 524:	2a 98       	cbi	0x05, 2	; 5
	// command (active low)
	PORTB &= ~BIT1;
 526:	29 98       	cbi	0x05, 1	; 5
	// transmitting data
	SPDR = data;
 528:	8e bd       	out	0x2e, r24	; 46
	// wait till data transmit
	while (!(SPSR & (1 << SPIF)));
 52a:	0d b4       	in	r0, 0x2d	; 45
 52c:	07 fe       	sbrs	r0, 7
 52e:	fd cf       	rjmp	.-6      	; 0x52a <CommandSend+0x6>
	// chip disable - idle high
	PORTB |= BIT2;
 530:	2a 9a       	sbi	0x05, 2	; 5
	// return received data
	return SPDR;
 532:	8e b5       	in	r24, 0x2e	; 46
}
 534:	08 95       	ret

00000536 <Data8BitsSend>:
  }
  // set window
  SetWindow(x, x, ys, ye);
  // draw pixel by 565 mode
  SendColor565(color, ye - ys);
}
 536:	2a 98       	cbi	0x05, 2	; 5
 538:	29 9a       	sbi	0x05, 1	; 5
 53a:	8e bd       	out	0x2e, r24	; 46
 53c:	0d b4       	in	r0, 0x2d	; 45
 53e:	07 fe       	sbrs	r0, 7
 540:	fd cf       	rjmp	.-6      	; 0x53c <Data8BitsSend+0x6>
 542:	2a 9a       	sbi	0x05, 2	; 5
 544:	8e b5       	in	r24, 0x2e	; 46
 546:	08 95       	ret

00000548 <Data16BitsSend>:
 548:	2a 98       	cbi	0x05, 2	; 5
 54a:	29 9a       	sbi	0x05, 1	; 5
 54c:	9e bd       	out	0x2e, r25	; 46
 54e:	0d b4       	in	r0, 0x2d	; 45
 550:	07 fe       	sbrs	r0, 7
 552:	fd cf       	rjmp	.-6      	; 0x54e <Data16BitsSend+0x6>
 554:	8e bd       	out	0x2e, r24	; 46
 556:	0d b4       	in	r0, 0x2d	; 45
 558:	07 fe       	sbrs	r0, 7
 55a:	fd cf       	rjmp	.-6      	; 0x556 <Data16BitsSend+0xe>
 55c:	2a 9a       	sbi	0x05, 2	; 5
 55e:	8e b5       	in	r24, 0x2e	; 46
 560:	08 95       	ret

00000562 <SendColor565>:
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	8c 01       	movw	r16, r24
 56c:	eb 01       	movw	r28, r22
 56e:	8c e2       	ldi	r24, 0x2C	; 44
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 92 02 	call	0x524	; 0x524 <CommandSend>
 576:	20 97       	sbiw	r28, 0x00	; 0
 578:	29 f0       	breq	.+10     	; 0x584 <SendColor565+0x22>
 57a:	c8 01       	movw	r24, r16
 57c:	0e 94 a4 02 	call	0x548	; 0x548 <Data16BitsSend>
 580:	21 97       	sbiw	r28, 0x01	; 1
 582:	d9 f7       	brne	.-10     	; 0x57a <SendColor565+0x18>
 584:	df 91       	pop	r29
 586:	cf 91       	pop	r28
 588:	1f 91       	pop	r17
 58a:	0f 91       	pop	r16
 58c:	08 95       	ret

0000058e <SetWindow>:
 58e:	0f 93       	push	r16
 590:	1f 93       	push	r17
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	68 17       	cp	r22, r24
 598:	60 f1       	brcs	.+88     	; 0x5f2 <SetWindow+0x64>
 59a:	62 3a       	cpi	r22, 0xA2	; 162
 59c:	60 f5       	brcc	.+88     	; 0x5f6 <SetWindow+0x68>
 59e:	24 17       	cp	r18, r20
 5a0:	60 f1       	brcs	.+88     	; 0x5fa <SetWindow+0x6c>
 5a2:	24 38       	cpi	r18, 0x84	; 132
 5a4:	60 f5       	brcc	.+88     	; 0x5fe <SetWindow+0x70>
 5a6:	12 2f       	mov	r17, r18
 5a8:	04 2f       	mov	r16, r20
 5aa:	c6 2f       	mov	r28, r22
 5ac:	d8 2f       	mov	r29, r24
 5ae:	8a e2       	ldi	r24, 0x2A	; 42
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	0e 94 92 02 	call	0x524	; 0x524 <CommandSend>
 5b6:	80 e0       	ldi	r24, 0x00	; 0
 5b8:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5bc:	8d 2f       	mov	r24, r29
 5be:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5c8:	8c 2f       	mov	r24, r28
 5ca:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5ce:	8b e2       	ldi	r24, 0x2B	; 43
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 92 02 	call	0x524	; 0x524 <CommandSend>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5dc:	80 2f       	mov	r24, r16
 5de:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5e8:	81 2f       	mov	r24, r17
 5ea:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <SetWindow+0x72>
 5f2:	80 e0       	ldi	r24, 0x00	; 0
 5f4:	05 c0       	rjmp	.+10     	; 0x600 <SetWindow+0x72>
 5f6:	80 e0       	ldi	r24, 0x00	; 0
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <SetWindow+0x72>
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <SetWindow+0x72>
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	08 95       	ret

0000060a <SetPosition>:
 60a:	8d 39       	cpi	r24, 0x9D	; 157
 60c:	90 f0       	brcs	.+36     	; 0x632 <SetPosition+0x28>
 60e:	6d 37       	cpi	r22, 0x7D	; 125
 610:	e0 f4       	brcc	.+56     	; 0x64a <SetPosition+0x40>
 612:	6c 37       	cpi	r22, 0x7C	; 124
 614:	70 f4       	brcc	.+28     	; 0x632 <SetPosition+0x28>
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	68 5f       	subi	r22, 0xF8	; 248
 61a:	7f 4f       	sbci	r23, 0xFF	; 255
 61c:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <cacheMemIndexRow+0x1>
 620:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <cacheMemIndexRow>
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <cacheMemIndexCol+0x1>
 62a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <cacheMemIndexCol>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	08 95       	ret
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	70 93 09 01 	sts	0x0109, r23	; 0x800109 <cacheMemIndexRow+0x1>
 638:	60 93 08 01 	sts	0x0108, r22	; 0x800108 <cacheMemIndexRow>
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <cacheMemIndexCol+0x1>
 642:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <cacheMemIndexCol>
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	08 95       	ret
 64a:	80 e0       	ldi	r24, 0x00	; 0
 64c:	08 95       	ret

0000064e <DrawPixel>:
 64e:	cf 93       	push	r28
 650:	df 93       	push	r29
 652:	ea 01       	movw	r28, r20
 654:	26 2f       	mov	r18, r22
 656:	46 2f       	mov	r20, r22
 658:	68 2f       	mov	r22, r24
 65a:	0e 94 c7 02 	call	0x58e	; 0x58e <SetWindow>
 65e:	61 e0       	ldi	r22, 0x01	; 1
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	ce 01       	movw	r24, r28
 664:	0e 94 b1 02 	call	0x562	; 0x562 <SendColor565>
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	08 95       	ret

0000066e <DrawChar>:
 66e:	4f 92       	push	r4
 670:	5f 92       	push	r5
 672:	7f 92       	push	r7
 674:	8f 92       	push	r8
 676:	9f 92       	push	r9
 678:	af 92       	push	r10
 67a:	bf 92       	push	r11
 67c:	cf 92       	push	r12
 67e:	df 92       	push	r13
 680:	ef 92       	push	r14
 682:	ff 92       	push	r15
 684:	1f 93       	push	r17
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	2b 01       	movw	r4, r22
 68c:	41 11       	cpse	r20, r1
 68e:	34 c0       	rjmp	.+104    	; 0x6f8 <DrawChar+0x8a>
 690:	68 94       	set
 692:	99 24       	eor	r9, r9
 694:	92 f8       	bld	r9, 2
 696:	c8 2f       	mov	r28, r24
 698:	d0 e0       	ldi	r29, 0x00	; 0
 69a:	ce 01       	movw	r24, r28
 69c:	80 97       	sbiw	r24, 0x20	; 32
 69e:	ec 01       	movw	r28, r24
 6a0:	cc 0f       	add	r28, r28
 6a2:	dd 1f       	adc	r29, r29
 6a4:	cc 0f       	add	r28, r28
 6a6:	dd 1f       	adc	r29, r29
 6a8:	c8 0f       	add	r28, r24
 6aa:	d9 1f       	adc	r29, r25
 6ac:	0f 2e       	mov	r0, r31
 6ae:	f8 e0       	ldi	r31, 0x08	; 8
 6b0:	cf 2e       	mov	r12, r31
 6b2:	f1 e0       	ldi	r31, 0x01	; 1
 6b4:	df 2e       	mov	r13, r31
 6b6:	f0 2d       	mov	r31, r0
 6b8:	0f 2e       	mov	r0, r31
 6ba:	f6 e0       	ldi	r31, 0x06	; 6
 6bc:	ef 2e       	mov	r14, r31
 6be:	f1 e0       	ldi	r31, 0x01	; 1
 6c0:	ff 2e       	mov	r15, r31
 6c2:	f0 2d       	mov	r31, r0
 6c4:	fe 01       	movw	r30, r28
 6c6:	e9 0d       	add	r30, r9
 6c8:	f1 1d       	adc	r31, r1
 6ca:	e8 59       	subi	r30, 0x98	; 152
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
 6ce:	b4 90       	lpm	r11, Z
 6d0:	17 e0       	ldi	r17, 0x07	; 7
 6d2:	bb 20       	and	r11, r11
 6d4:	4c f4       	brge	.+18     	; 0x6e8 <DrawChar+0x7a>
 6d6:	f6 01       	movw	r30, r12
 6d8:	60 81       	ld	r22, Z
 6da:	61 0f       	add	r22, r17
 6dc:	f7 01       	movw	r30, r14
 6de:	80 81       	ld	r24, Z
 6e0:	a2 01       	movw	r20, r4
 6e2:	89 0d       	add	r24, r9
 6e4:	0e 94 27 03 	call	0x64e	; 0x64e <DrawPixel>
 6e8:	bb 0c       	add	r11, r11
 6ea:	11 50       	subi	r17, 0x01	; 1
 6ec:	90 f7       	brcc	.-28     	; 0x6d2 <DrawChar+0x64>
 6ee:	9a 94       	dec	r9
 6f0:	ff ef       	ldi	r31, 0xFF	; 255
 6f2:	9f 12       	cpse	r9, r31
 6f4:	e7 cf       	rjmp	.-50     	; 0x6c4 <DrawChar+0x56>
 6f6:	9c c0       	rjmp	.+312    	; 0x830 <DrawChar+0x1c2>
 6f8:	41 30       	cpi	r20, 0x01	; 1
 6fa:	09 f0       	breq	.+2      	; 0x6fe <DrawChar+0x90>
 6fc:	40 c0       	rjmp	.+128    	; 0x77e <DrawChar+0x110>
 6fe:	68 94       	set
 700:	99 24       	eor	r9, r9
 702:	92 f8       	bld	r9, 2
 704:	e8 2e       	mov	r14, r24
 706:	f1 2c       	mov	r15, r1
 708:	c7 01       	movw	r24, r14
 70a:	80 97       	sbiw	r24, 0x20	; 32
 70c:	7c 01       	movw	r14, r24
 70e:	ee 0c       	add	r14, r14
 710:	ff 1c       	adc	r15, r15
 712:	ee 0c       	add	r14, r14
 714:	ff 1c       	adc	r15, r15
 716:	e8 0e       	add	r14, r24
 718:	f9 1e       	adc	r15, r25
 71a:	0f 2e       	mov	r0, r31
 71c:	f8 e0       	ldi	r31, 0x08	; 8
 71e:	af 2e       	mov	r10, r31
 720:	f1 e0       	ldi	r31, 0x01	; 1
 722:	bf 2e       	mov	r11, r31
 724:	f0 2d       	mov	r31, r0
 726:	0f 2e       	mov	r0, r31
 728:	f6 e0       	ldi	r31, 0x06	; 6
 72a:	cf 2e       	mov	r12, r31
 72c:	f1 e0       	ldi	r31, 0x01	; 1
 72e:	df 2e       	mov	r13, r31
 730:	f0 2d       	mov	r31, r0
 732:	f7 01       	movw	r30, r14
 734:	e9 0d       	add	r30, r9
 736:	f1 1d       	adc	r31, r1
 738:	e8 59       	subi	r30, 0x98	; 152
 73a:	ff 4f       	sbci	r31, 0xFF	; 255
 73c:	84 90       	lpm	r8, Z
 73e:	c7 e0       	ldi	r28, 0x07	; 7
 740:	88 20       	and	r8, r8
 742:	ac f4       	brge	.+42     	; 0x76e <DrawChar+0x100>
 744:	f5 01       	movw	r30, r10
 746:	60 81       	ld	r22, Z
 748:	dc 2f       	mov	r29, r28
 74a:	dd 0f       	add	r29, r29
 74c:	6d 0f       	add	r22, r29
 74e:	f6 01       	movw	r30, r12
 750:	80 81       	ld	r24, Z
 752:	a2 01       	movw	r20, r4
 754:	89 0d       	add	r24, r9
 756:	0e 94 27 03 	call	0x64e	; 0x64e <DrawPixel>
 75a:	f5 01       	movw	r30, r10
 75c:	60 81       	ld	r22, Z
 75e:	6f 5f       	subi	r22, 0xFF	; 255
 760:	6d 0f       	add	r22, r29
 762:	f6 01       	movw	r30, r12
 764:	80 81       	ld	r24, Z
 766:	a2 01       	movw	r20, r4
 768:	89 0d       	add	r24, r9
 76a:	0e 94 27 03 	call	0x64e	; 0x64e <DrawPixel>
 76e:	88 0c       	add	r8, r8
 770:	c1 50       	subi	r28, 0x01	; 1
 772:	30 f7       	brcc	.-52     	; 0x740 <DrawChar+0xd2>
 774:	9a 94       	dec	r9
 776:	ff ef       	ldi	r31, 0xFF	; 255
 778:	9f 12       	cpse	r9, r31
 77a:	db cf       	rjmp	.-74     	; 0x732 <DrawChar+0xc4>
 77c:	59 c0       	rjmp	.+178    	; 0x830 <DrawChar+0x1c2>
 77e:	4a 30       	cpi	r20, 0x0A	; 10
 780:	09 f0       	breq	.+2      	; 0x784 <DrawChar+0x116>
 782:	56 c0       	rjmp	.+172    	; 0x830 <DrawChar+0x1c2>
 784:	68 94       	set
 786:	ee 24       	eor	r14, r14
 788:	e2 f8       	bld	r14, 2
 78a:	c8 2e       	mov	r12, r24
 78c:	d1 2c       	mov	r13, r1
 78e:	c6 01       	movw	r24, r12
 790:	80 97       	sbiw	r24, 0x20	; 32
 792:	6c 01       	movw	r12, r24
 794:	cc 0c       	add	r12, r12
 796:	dd 1c       	adc	r13, r13
 798:	cc 0c       	add	r12, r12
 79a:	dd 1c       	adc	r13, r13
 79c:	c8 0e       	add	r12, r24
 79e:	d9 1e       	adc	r13, r25
 7a0:	0f 2e       	mov	r0, r31
 7a2:	f8 e0       	ldi	r31, 0x08	; 8
 7a4:	8f 2e       	mov	r8, r31
 7a6:	f1 e0       	ldi	r31, 0x01	; 1
 7a8:	9f 2e       	mov	r9, r31
 7aa:	f0 2d       	mov	r31, r0
 7ac:	0f 2e       	mov	r0, r31
 7ae:	f6 e0       	ldi	r31, 0x06	; 6
 7b0:	af 2e       	mov	r10, r31
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	bf 2e       	mov	r11, r31
 7b6:	f0 2d       	mov	r31, r0
 7b8:	f6 01       	movw	r30, r12
 7ba:	ee 0d       	add	r30, r14
 7bc:	f1 1d       	adc	r31, r1
 7be:	e8 59       	subi	r30, 0x98	; 152
 7c0:	ff 4f       	sbci	r31, 0xFF	; 255
 7c2:	c4 91       	lpm	r28, Z
 7c4:	7e 2c       	mov	r7, r14
 7c6:	77 0c       	add	r7, r7
 7c8:	d7 e0       	ldi	r29, 0x07	; 7
 7ca:	cc 23       	and	r28, r28
 7cc:	54 f5       	brge	.+84     	; 0x822 <DrawChar+0x1b4>
 7ce:	f4 01       	movw	r30, r8
 7d0:	60 81       	ld	r22, Z
 7d2:	fd 2e       	mov	r15, r29
 7d4:	ff 0c       	add	r15, r15
 7d6:	6f 0d       	add	r22, r15
 7d8:	f5 01       	movw	r30, r10
 7da:	80 81       	ld	r24, Z
 7dc:	a2 01       	movw	r20, r4
 7de:	87 0d       	add	r24, r7
 7e0:	0e 94 27 03 	call	0x64e	; 0x64e <DrawPixel>
 7e4:	f4 01       	movw	r30, r8
 7e6:	60 81       	ld	r22, Z
 7e8:	6f 5f       	subi	r22, 0xFF	; 255
 7ea:	6f 0d       	add	r22, r15
 7ec:	f5 01       	movw	r30, r10
 7ee:	80 81       	ld	r24, Z
 7f0:	a2 01       	movw	r20, r4
 7f2:	87 0d       	add	r24, r7
 7f4:	0e 94 27 03 	call	0x64e	; 0x64e <DrawPixel>
 7f8:	f4 01       	movw	r30, r8
 7fa:	60 81       	ld	r22, Z
 7fc:	6f 0d       	add	r22, r15
 7fe:	f5 01       	movw	r30, r10
 800:	80 81       	ld	r24, Z
 802:	8f 5f       	subi	r24, 0xFF	; 255
 804:	a2 01       	movw	r20, r4
 806:	87 0d       	add	r24, r7
 808:	0e 94 27 03 	call	0x64e	; 0x64e <DrawPixel>
 80c:	f4 01       	movw	r30, r8
 80e:	60 81       	ld	r22, Z
 810:	6f 5f       	subi	r22, 0xFF	; 255
 812:	6f 0d       	add	r22, r15
 814:	f5 01       	movw	r30, r10
 816:	80 81       	ld	r24, Z
 818:	8f 5f       	subi	r24, 0xFF	; 255
 81a:	a2 01       	movw	r20, r4
 81c:	87 0d       	add	r24, r7
 81e:	0e 94 27 03 	call	0x64e	; 0x64e <DrawPixel>
 822:	cc 0f       	add	r28, r28
 824:	d1 50       	subi	r29, 0x01	; 1
 826:	88 f6       	brcc	.-94     	; 0x7ca <DrawChar+0x15c>
 828:	ea 94       	dec	r14
 82a:	ff ef       	ldi	r31, 0xFF	; 255
 82c:	ef 12       	cpse	r14, r31
 82e:	c4 cf       	rjmp	.-120    	; 0x7b8 <DrawChar+0x14a>
 830:	80 e0       	ldi	r24, 0x00	; 0
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	1f 91       	pop	r17
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	df 90       	pop	r13
 83e:	cf 90       	pop	r12
 840:	bf 90       	pop	r11
 842:	af 90       	pop	r10
 844:	9f 90       	pop	r9
 846:	8f 90       	pop	r8
 848:	7f 90       	pop	r7
 84a:	5f 90       	pop	r5
 84c:	4f 90       	pop	r4
 84e:	08 95       	ret

00000850 <DrawString>:
 850:	9f 92       	push	r9
 852:	af 92       	push	r10
 854:	bf 92       	push	r11
 856:	cf 92       	push	r12
 858:	df 92       	push	r13
 85a:	ef 92       	push	r14
 85c:	ff 92       	push	r15
 85e:	0f 93       	push	r16
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	ec 01       	movw	r28, r24
 868:	88 81       	ld	r24, Y
 86a:	88 23       	and	r24, r24
 86c:	21 f1       	breq	.+72     	; 0x8b6 <DrawString+0x66>
 86e:	a4 2e       	mov	r10, r20
 870:	8b 01       	movw	r16, r22
 872:	94 2e       	mov	r9, r20
 874:	96 94       	lsr	r9
 876:	b1 2c       	mov	r11, r1
 878:	0f 2e       	mov	r0, r31
 87a:	f8 e0       	ldi	r31, 0x08	; 8
 87c:	cf 2e       	mov	r12, r31
 87e:	f1 e0       	ldi	r31, 0x01	; 1
 880:	df 2e       	mov	r13, r31
 882:	f0 2d       	mov	r31, r0
 884:	0f 2e       	mov	r0, r31
 886:	f6 e0       	ldi	r31, 0x06	; 6
 888:	ef 2e       	mov	r14, r31
 88a:	f1 e0       	ldi	r31, 0x01	; 1
 88c:	ff 2e       	mov	r15, r31
 88e:	f0 2d       	mov	r31, r0
 890:	b3 94       	inc	r11
 892:	4a 2d       	mov	r20, r10
 894:	b8 01       	movw	r22, r16
 896:	0e 94 37 03 	call	0x66e	; 0x66e <DrawChar>
 89a:	f7 01       	movw	r30, r14
 89c:	80 81       	ld	r24, Z
 89e:	8a 5f       	subi	r24, 0xFA	; 250
 8a0:	f6 01       	movw	r30, r12
 8a2:	60 81       	ld	r22, Z
 8a4:	89 0d       	add	r24, r9
 8a6:	0e 94 05 03 	call	0x60a	; 0x60a <SetPosition>
 8aa:	fe 01       	movw	r30, r28
 8ac:	eb 0d       	add	r30, r11
 8ae:	f1 1d       	adc	r31, r1
 8b0:	80 81       	ld	r24, Z
 8b2:	81 11       	cpse	r24, r1
 8b4:	ed cf       	rjmp	.-38     	; 0x890 <DrawString+0x40>
 8b6:	df 91       	pop	r29
 8b8:	cf 91       	pop	r28
 8ba:	1f 91       	pop	r17
 8bc:	0f 91       	pop	r16
 8be:	ff 90       	pop	r15
 8c0:	ef 90       	pop	r14
 8c2:	df 90       	pop	r13
 8c4:	cf 90       	pop	r12
 8c6:	bf 90       	pop	r11
 8c8:	af 90       	pop	r10
 8ca:	9f 90       	pop	r9
 8cc:	08 95       	ret

000008ce <ClearScreen>:

void ClearScreen(uint16_t color)
{
 8ce:	cf 93       	push	r28
 8d0:	df 93       	push	r29
 8d2:	ec 01       	movw	r28, r24
  // set whole window
  SetWindow(0, SIZE_X, 0, SIZE_Y);
 8d4:	23 e8       	ldi	r18, 0x83	; 131
 8d6:	40 e0       	ldi	r20, 0x00	; 0
 8d8:	61 ea       	ldi	r22, 0xA1	; 161
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	0e 94 c7 02 	call	0x58e	; 0x58e <SetWindow>
  // draw individual pixels 
  // CACHE_SIZE_MEM = SIZE_X * SIZE_Y
  SendColor565(color, CACHE_SIZE_MEM);
 8e0:	68 e8       	ldi	r22, 0x88	; 136
 8e2:	73 e5       	ldi	r23, 0x53	; 83
 8e4:	ce 01       	movw	r24, r28
 8e6:	0e 94 b1 02 	call	0x562	; 0x562 <SendColor565>
}
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <UpdateScreen>:

void UpdateScreen(void)
{
  // display on
  CommandSend(DISPON);
 8f0:	89 e2       	ldi	r24, 0x29	; 41
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 92 02 	call	0x524	; 0x524 <CommandSend>
 8f8:	08 95       	ret

000008fa <DelayMs>:
}

void DelayMs(uint8_t time)
{
  // loop through real time
  while (time--) {
 8fa:	88 23       	and	r24, r24
 8fc:	41 f0       	breq	.+16     	; 0x90e <__stack+0xf>
 8fe:	ef e9       	ldi	r30, 0x9F	; 159
 900:	ff e0       	ldi	r31, 0x0F	; 15
 902:	31 97       	sbiw	r30, 0x01	; 1
 904:	f1 f7       	brne	.-4      	; 0x902 <__stack+0x3>
 906:	00 c0       	rjmp	.+0      	; 0x908 <__stack+0x9>
 908:	00 00       	nop
 90a:	81 50       	subi	r24, 0x01	; 1
 90c:	c1 f7       	brne	.-16     	; 0x8fe <DelayMs+0x4>
 90e:	08 95       	ret

00000910 <St7735Commands>:
 *
 * @param const uint8_t *
 * @return void
 */
void St7735Commands(const uint8_t *commands)
{
 910:	cf 92       	push	r12
 912:	df 92       	push	r13
 914:	ef 92       	push	r14
 916:	ff 92       	push	r15
 918:	0f 93       	push	r16
 91a:	1f 93       	push	r17
 91c:	cf 93       	push	r28
 91e:	df 93       	push	r29
  uint8_t milliseconds;
  uint8_t numOfCommands;
  uint8_t numOfArguments;

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
 920:	7c 01       	movw	r14, r24
 922:	2f ef       	ldi	r18, 0xFF	; 255
 924:	e2 1a       	sub	r14, r18
 926:	f2 0a       	sbc	r15, r18
 928:	fc 01       	movw	r30, r24
 92a:	d4 90       	lpm	r13, Z
  
  // loop through whole command list
  while (numOfCommands--) {
 92c:	2e c0       	rjmp	.+92     	; 0x98a <St7735Commands+0x7a>
    // send command
    CommandSend(pgm_read_byte(commands++));
 92e:	f7 01       	movw	r30, r14
 930:	84 91       	lpm	r24, Z
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	0e 94 92 02 	call	0x524	; 0x524 <CommandSend>
    // read number of arguments
    numOfArguments = pgm_read_byte(commands++);
 938:	f7 01       	movw	r30, r14
 93a:	31 96       	adiw	r30, 0x01	; 1
 93c:	e4 91       	lpm	r30, Z
 93e:	f2 e0       	ldi	r31, 0x02	; 2
 940:	ef 0e       	add	r14, r31
 942:	f1 1c       	adc	r15, r1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
 944:	2e 2f       	mov	r18, r30
 946:	20 78       	andi	r18, 0x80	; 128
 948:	c2 2e       	mov	r12, r18
    // remove delay flag
    numOfArguments &= ~DELAY;
 94a:	ef 77       	andi	r30, 0x7F	; 127
    // loop through number of arguments
    while (numOfArguments--) {
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	8e 0f       	add	r24, r30
 950:	ee 23       	and	r30, r30
 952:	89 f0       	breq	.+34     	; 0x976 <St7735Commands+0x66>
 954:	3e 2d       	mov	r19, r14
 956:	2f 2d       	mov	r18, r15
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	01 96       	adiw	r24, 0x01	; 1
 95c:	e8 0e       	add	r14, r24
 95e:	f9 1e       	adc	r15, r25
 960:	87 01       	movw	r16, r14
 962:	c3 2f       	mov	r28, r19
 964:	d2 2f       	mov	r29, r18
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
 966:	fe 01       	movw	r30, r28
 968:	84 91       	lpm	r24, Z
 96a:	0e 94 9b 02 	call	0x536	; 0x536 <Data8BitsSend>
 96e:	21 96       	adiw	r28, 0x01	; 1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
    // remove delay flag
    numOfArguments &= ~DELAY;
    // loop through number of arguments
    while (numOfArguments--) {
 970:	c0 17       	cp	r28, r16
 972:	d1 07       	cpc	r29, r17
 974:	c1 f7       	brne	.-16     	; 0x966 <St7735Commands+0x56>
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
 976:	cc 20       	and	r12, r12
 978:	39 f0       	breq	.+14     	; 0x988 <St7735Commands+0x78>
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
 97a:	e7 01       	movw	r28, r14
 97c:	21 96       	adiw	r28, 0x01	; 1
 97e:	f7 01       	movw	r30, r14
 980:	84 91       	lpm	r24, Z
      // delay
      DelayMs(milliseconds);
 982:	0e 94 7d 04 	call	0x8fa	; 0x8fa <DelayMs>
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
 986:	7e 01       	movw	r14, r28
 988:	da 94       	dec	r13

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
  
  // loop through whole command list
  while (numOfCommands--) {
 98a:	d1 10       	cpse	r13, r1
 98c:	d0 cf       	rjmp	.-96     	; 0x92e <St7735Commands+0x1e>
      milliseconds = pgm_read_byte(commands++);
      // delay
      DelayMs(milliseconds);
    }
  }
}
 98e:	df 91       	pop	r29
 990:	cf 91       	pop	r28
 992:	1f 91       	pop	r17
 994:	0f 91       	pop	r16
 996:	ff 90       	pop	r15
 998:	ef 90       	pop	r14
 99a:	df 90       	pop	r13
 99c:	cf 90       	pop	r12
 99e:	08 95       	ret

000009a0 <St7735Init>:


void St7735Init(void)
{
  // hardware reset
  HardwareReset();
 9a0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <HardwareReset>
  // init spi
  SpiInit();
 9a4:	0e 94 84 02 	call	0x508	; 0x508 <SpiInit>
  // load list of commands
  St7735Commands(INIT_ST7735B);
 9a8:	88 e4       	ldi	r24, 0x48	; 72
 9aa:	92 e0       	ldi	r25, 0x02	; 2
 9ac:	0e 94 88 04 	call	0x910	; 0x910 <St7735Commands>
 9b0:	08 95       	ret

000009b2 <__udivmodsi4>:
 9b2:	a1 e2       	ldi	r26, 0x21	; 33
 9b4:	1a 2e       	mov	r1, r26
 9b6:	aa 1b       	sub	r26, r26
 9b8:	bb 1b       	sub	r27, r27
 9ba:	fd 01       	movw	r30, r26
 9bc:	0d c0       	rjmp	.+26     	; 0x9d8 <__udivmodsi4_ep>

000009be <__udivmodsi4_loop>:
 9be:	aa 1f       	adc	r26, r26
 9c0:	bb 1f       	adc	r27, r27
 9c2:	ee 1f       	adc	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	a2 17       	cp	r26, r18
 9c8:	b3 07       	cpc	r27, r19
 9ca:	e4 07       	cpc	r30, r20
 9cc:	f5 07       	cpc	r31, r21
 9ce:	20 f0       	brcs	.+8      	; 0x9d8 <__udivmodsi4_ep>
 9d0:	a2 1b       	sub	r26, r18
 9d2:	b3 0b       	sbc	r27, r19
 9d4:	e4 0b       	sbc	r30, r20
 9d6:	f5 0b       	sbc	r31, r21

000009d8 <__udivmodsi4_ep>:
 9d8:	66 1f       	adc	r22, r22
 9da:	77 1f       	adc	r23, r23
 9dc:	88 1f       	adc	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	1a 94       	dec	r1
 9e2:	69 f7       	brne	.-38     	; 0x9be <__udivmodsi4_loop>
 9e4:	60 95       	com	r22
 9e6:	70 95       	com	r23
 9e8:	80 95       	com	r24
 9ea:	90 95       	com	r25
 9ec:	9b 01       	movw	r18, r22
 9ee:	ac 01       	movw	r20, r24
 9f0:	bd 01       	movw	r22, r26
 9f2:	cf 01       	movw	r24, r30
 9f4:	08 95       	ret

000009f6 <sprintf>:
 9f6:	ae e0       	ldi	r26, 0x0E	; 14
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	e1 e0       	ldi	r30, 0x01	; 1
 9fc:	f5 e0       	ldi	r31, 0x05	; 5
 9fe:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__prologue_saves__+0x1c>
 a02:	0d 89       	ldd	r16, Y+21	; 0x15
 a04:	1e 89       	ldd	r17, Y+22	; 0x16
 a06:	86 e0       	ldi	r24, 0x06	; 6
 a08:	8c 83       	std	Y+4, r24	; 0x04
 a0a:	1a 83       	std	Y+2, r17	; 0x02
 a0c:	09 83       	std	Y+1, r16	; 0x01
 a0e:	8f ef       	ldi	r24, 0xFF	; 255
 a10:	9f e7       	ldi	r25, 0x7F	; 127
 a12:	9e 83       	std	Y+6, r25	; 0x06
 a14:	8d 83       	std	Y+5, r24	; 0x05
 a16:	ae 01       	movw	r20, r28
 a18:	47 5e       	subi	r20, 0xE7	; 231
 a1a:	5f 4f       	sbci	r21, 0xFF	; 255
 a1c:	6f 89       	ldd	r22, Y+23	; 0x17
 a1e:	78 8d       	ldd	r23, Y+24	; 0x18
 a20:	ce 01       	movw	r24, r28
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	0e 94 1d 05 	call	0xa3a	; 0xa3a <vfprintf>
 a28:	ef 81       	ldd	r30, Y+7	; 0x07
 a2a:	f8 85       	ldd	r31, Y+8	; 0x08
 a2c:	e0 0f       	add	r30, r16
 a2e:	f1 1f       	adc	r31, r17
 a30:	10 82       	st	Z, r1
 a32:	2e 96       	adiw	r28, 0x0e	; 14
 a34:	e4 e0       	ldi	r30, 0x04	; 4
 a36:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__epilogue_restores__+0x1c>

00000a3a <vfprintf>:
 a3a:	ab e0       	ldi	r26, 0x0B	; 11
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	e3 e2       	ldi	r30, 0x23	; 35
 a40:	f5 e0       	ldi	r31, 0x05	; 5
 a42:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__prologue_saves__>
 a46:	6c 01       	movw	r12, r24
 a48:	7b 01       	movw	r14, r22
 a4a:	8a 01       	movw	r16, r20
 a4c:	fc 01       	movw	r30, r24
 a4e:	17 82       	std	Z+7, r1	; 0x07
 a50:	16 82       	std	Z+6, r1	; 0x06
 a52:	83 81       	ldd	r24, Z+3	; 0x03
 a54:	81 ff       	sbrs	r24, 1
 a56:	cc c1       	rjmp	.+920    	; 0xdf0 <vfprintf+0x3b6>
 a58:	ce 01       	movw	r24, r28
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	3c 01       	movw	r6, r24
 a5e:	f6 01       	movw	r30, r12
 a60:	93 81       	ldd	r25, Z+3	; 0x03
 a62:	f7 01       	movw	r30, r14
 a64:	93 fd       	sbrc	r25, 3
 a66:	85 91       	lpm	r24, Z+
 a68:	93 ff       	sbrs	r25, 3
 a6a:	81 91       	ld	r24, Z+
 a6c:	7f 01       	movw	r14, r30
 a6e:	88 23       	and	r24, r24
 a70:	09 f4       	brne	.+2      	; 0xa74 <vfprintf+0x3a>
 a72:	ba c1       	rjmp	.+884    	; 0xde8 <vfprintf+0x3ae>
 a74:	85 32       	cpi	r24, 0x25	; 37
 a76:	39 f4       	brne	.+14     	; 0xa86 <vfprintf+0x4c>
 a78:	93 fd       	sbrc	r25, 3
 a7a:	85 91       	lpm	r24, Z+
 a7c:	93 ff       	sbrs	r25, 3
 a7e:	81 91       	ld	r24, Z+
 a80:	7f 01       	movw	r14, r30
 a82:	85 32       	cpi	r24, 0x25	; 37
 a84:	29 f4       	brne	.+10     	; 0xa90 <vfprintf+0x56>
 a86:	b6 01       	movw	r22, r12
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 a8e:	e7 cf       	rjmp	.-50     	; 0xa5e <vfprintf+0x24>
 a90:	91 2c       	mov	r9, r1
 a92:	21 2c       	mov	r2, r1
 a94:	31 2c       	mov	r3, r1
 a96:	ff e1       	ldi	r31, 0x1F	; 31
 a98:	f3 15       	cp	r31, r3
 a9a:	d8 f0       	brcs	.+54     	; 0xad2 <vfprintf+0x98>
 a9c:	8b 32       	cpi	r24, 0x2B	; 43
 a9e:	79 f0       	breq	.+30     	; 0xabe <vfprintf+0x84>
 aa0:	38 f4       	brcc	.+14     	; 0xab0 <vfprintf+0x76>
 aa2:	80 32       	cpi	r24, 0x20	; 32
 aa4:	79 f0       	breq	.+30     	; 0xac4 <vfprintf+0x8a>
 aa6:	83 32       	cpi	r24, 0x23	; 35
 aa8:	a1 f4       	brne	.+40     	; 0xad2 <vfprintf+0x98>
 aaa:	23 2d       	mov	r18, r3
 aac:	20 61       	ori	r18, 0x10	; 16
 aae:	1d c0       	rjmp	.+58     	; 0xaea <vfprintf+0xb0>
 ab0:	8d 32       	cpi	r24, 0x2D	; 45
 ab2:	61 f0       	breq	.+24     	; 0xacc <vfprintf+0x92>
 ab4:	80 33       	cpi	r24, 0x30	; 48
 ab6:	69 f4       	brne	.+26     	; 0xad2 <vfprintf+0x98>
 ab8:	23 2d       	mov	r18, r3
 aba:	21 60       	ori	r18, 0x01	; 1
 abc:	16 c0       	rjmp	.+44     	; 0xaea <vfprintf+0xb0>
 abe:	83 2d       	mov	r24, r3
 ac0:	82 60       	ori	r24, 0x02	; 2
 ac2:	38 2e       	mov	r3, r24
 ac4:	e3 2d       	mov	r30, r3
 ac6:	e4 60       	ori	r30, 0x04	; 4
 ac8:	3e 2e       	mov	r3, r30
 aca:	2a c0       	rjmp	.+84     	; 0xb20 <vfprintf+0xe6>
 acc:	f3 2d       	mov	r31, r3
 ace:	f8 60       	ori	r31, 0x08	; 8
 ad0:	1d c0       	rjmp	.+58     	; 0xb0c <vfprintf+0xd2>
 ad2:	37 fc       	sbrc	r3, 7
 ad4:	2d c0       	rjmp	.+90     	; 0xb30 <vfprintf+0xf6>
 ad6:	20 ed       	ldi	r18, 0xD0	; 208
 ad8:	28 0f       	add	r18, r24
 ada:	2a 30       	cpi	r18, 0x0A	; 10
 adc:	40 f0       	brcs	.+16     	; 0xaee <vfprintf+0xb4>
 ade:	8e 32       	cpi	r24, 0x2E	; 46
 ae0:	b9 f4       	brne	.+46     	; 0xb10 <vfprintf+0xd6>
 ae2:	36 fc       	sbrc	r3, 6
 ae4:	81 c1       	rjmp	.+770    	; 0xde8 <vfprintf+0x3ae>
 ae6:	23 2d       	mov	r18, r3
 ae8:	20 64       	ori	r18, 0x40	; 64
 aea:	32 2e       	mov	r3, r18
 aec:	19 c0       	rjmp	.+50     	; 0xb20 <vfprintf+0xe6>
 aee:	36 fe       	sbrs	r3, 6
 af0:	06 c0       	rjmp	.+12     	; 0xafe <vfprintf+0xc4>
 af2:	8a e0       	ldi	r24, 0x0A	; 10
 af4:	98 9e       	mul	r9, r24
 af6:	20 0d       	add	r18, r0
 af8:	11 24       	eor	r1, r1
 afa:	92 2e       	mov	r9, r18
 afc:	11 c0       	rjmp	.+34     	; 0xb20 <vfprintf+0xe6>
 afe:	ea e0       	ldi	r30, 0x0A	; 10
 b00:	2e 9e       	mul	r2, r30
 b02:	20 0d       	add	r18, r0
 b04:	11 24       	eor	r1, r1
 b06:	22 2e       	mov	r2, r18
 b08:	f3 2d       	mov	r31, r3
 b0a:	f0 62       	ori	r31, 0x20	; 32
 b0c:	3f 2e       	mov	r3, r31
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <vfprintf+0xe6>
 b10:	8c 36       	cpi	r24, 0x6C	; 108
 b12:	21 f4       	brne	.+8      	; 0xb1c <vfprintf+0xe2>
 b14:	83 2d       	mov	r24, r3
 b16:	80 68       	ori	r24, 0x80	; 128
 b18:	38 2e       	mov	r3, r24
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0xe6>
 b1c:	88 36       	cpi	r24, 0x68	; 104
 b1e:	41 f4       	brne	.+16     	; 0xb30 <vfprintf+0xf6>
 b20:	f7 01       	movw	r30, r14
 b22:	93 fd       	sbrc	r25, 3
 b24:	85 91       	lpm	r24, Z+
 b26:	93 ff       	sbrs	r25, 3
 b28:	81 91       	ld	r24, Z+
 b2a:	7f 01       	movw	r14, r30
 b2c:	81 11       	cpse	r24, r1
 b2e:	b3 cf       	rjmp	.-154    	; 0xa96 <vfprintf+0x5c>
 b30:	98 2f       	mov	r25, r24
 b32:	9f 7d       	andi	r25, 0xDF	; 223
 b34:	95 54       	subi	r25, 0x45	; 69
 b36:	93 30       	cpi	r25, 0x03	; 3
 b38:	28 f4       	brcc	.+10     	; 0xb44 <vfprintf+0x10a>
 b3a:	0c 5f       	subi	r16, 0xFC	; 252
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	9f e3       	ldi	r25, 0x3F	; 63
 b40:	99 83       	std	Y+1, r25	; 0x01
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x124>
 b44:	83 36       	cpi	r24, 0x63	; 99
 b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0x11a>
 b48:	83 37       	cpi	r24, 0x73	; 115
 b4a:	71 f0       	breq	.+28     	; 0xb68 <vfprintf+0x12e>
 b4c:	83 35       	cpi	r24, 0x53	; 83
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0x118>
 b50:	59 c0       	rjmp	.+178    	; 0xc04 <vfprintf+0x1ca>
 b52:	21 c0       	rjmp	.+66     	; 0xb96 <vfprintf+0x15c>
 b54:	f8 01       	movw	r30, r16
 b56:	80 81       	ld	r24, Z
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	88 24       	eor	r8, r8
 b60:	83 94       	inc	r8
 b62:	91 2c       	mov	r9, r1
 b64:	53 01       	movw	r10, r6
 b66:	13 c0       	rjmp	.+38     	; 0xb8e <vfprintf+0x154>
 b68:	28 01       	movw	r4, r16
 b6a:	f2 e0       	ldi	r31, 0x02	; 2
 b6c:	4f 0e       	add	r4, r31
 b6e:	51 1c       	adc	r5, r1
 b70:	f8 01       	movw	r30, r16
 b72:	a0 80       	ld	r10, Z
 b74:	b1 80       	ldd	r11, Z+1	; 0x01
 b76:	36 fe       	sbrs	r3, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x146>
 b7a:	69 2d       	mov	r22, r9
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x14a>
 b80:	6f ef       	ldi	r22, 0xFF	; 255
 b82:	7f ef       	ldi	r23, 0xFF	; 255
 b84:	c5 01       	movw	r24, r10
 b86:	0e 94 09 07 	call	0xe12	; 0xe12 <strnlen>
 b8a:	4c 01       	movw	r8, r24
 b8c:	82 01       	movw	r16, r4
 b8e:	f3 2d       	mov	r31, r3
 b90:	ff 77       	andi	r31, 0x7F	; 127
 b92:	3f 2e       	mov	r3, r31
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <vfprintf+0x188>
 b96:	28 01       	movw	r4, r16
 b98:	22 e0       	ldi	r18, 0x02	; 2
 b9a:	42 0e       	add	r4, r18
 b9c:	51 1c       	adc	r5, r1
 b9e:	f8 01       	movw	r30, r16
 ba0:	a0 80       	ld	r10, Z
 ba2:	b1 80       	ldd	r11, Z+1	; 0x01
 ba4:	36 fe       	sbrs	r3, 6
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <vfprintf+0x174>
 ba8:	69 2d       	mov	r22, r9
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0x178>
 bae:	6f ef       	ldi	r22, 0xFF	; 255
 bb0:	7f ef       	ldi	r23, 0xFF	; 255
 bb2:	c5 01       	movw	r24, r10
 bb4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <strnlen_P>
 bb8:	4c 01       	movw	r8, r24
 bba:	f3 2d       	mov	r31, r3
 bbc:	f0 68       	ori	r31, 0x80	; 128
 bbe:	3f 2e       	mov	r3, r31
 bc0:	82 01       	movw	r16, r4
 bc2:	33 fc       	sbrc	r3, 3
 bc4:	1b c0       	rjmp	.+54     	; 0xbfc <vfprintf+0x1c2>
 bc6:	82 2d       	mov	r24, r2
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	88 16       	cp	r8, r24
 bcc:	99 06       	cpc	r9, r25
 bce:	b0 f4       	brcc	.+44     	; 0xbfc <vfprintf+0x1c2>
 bd0:	b6 01       	movw	r22, r12
 bd2:	80 e2       	ldi	r24, 0x20	; 32
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bda:	2a 94       	dec	r2
 bdc:	f4 cf       	rjmp	.-24     	; 0xbc6 <vfprintf+0x18c>
 bde:	f5 01       	movw	r30, r10
 be0:	37 fc       	sbrc	r3, 7
 be2:	85 91       	lpm	r24, Z+
 be4:	37 fe       	sbrs	r3, 7
 be6:	81 91       	ld	r24, Z+
 be8:	5f 01       	movw	r10, r30
 bea:	b6 01       	movw	r22, r12
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bf2:	21 10       	cpse	r2, r1
 bf4:	2a 94       	dec	r2
 bf6:	21 e0       	ldi	r18, 0x01	; 1
 bf8:	82 1a       	sub	r8, r18
 bfa:	91 08       	sbc	r9, r1
 bfc:	81 14       	cp	r8, r1
 bfe:	91 04       	cpc	r9, r1
 c00:	71 f7       	brne	.-36     	; 0xbde <vfprintf+0x1a4>
 c02:	e8 c0       	rjmp	.+464    	; 0xdd4 <vfprintf+0x39a>
 c04:	84 36       	cpi	r24, 0x64	; 100
 c06:	11 f0       	breq	.+4      	; 0xc0c <vfprintf+0x1d2>
 c08:	89 36       	cpi	r24, 0x69	; 105
 c0a:	41 f5       	brne	.+80     	; 0xc5c <vfprintf+0x222>
 c0c:	f8 01       	movw	r30, r16
 c0e:	37 fe       	sbrs	r3, 7
 c10:	07 c0       	rjmp	.+14     	; 0xc20 <vfprintf+0x1e6>
 c12:	60 81       	ld	r22, Z
 c14:	71 81       	ldd	r23, Z+1	; 0x01
 c16:	82 81       	ldd	r24, Z+2	; 0x02
 c18:	93 81       	ldd	r25, Z+3	; 0x03
 c1a:	0c 5f       	subi	r16, 0xFC	; 252
 c1c:	1f 4f       	sbci	r17, 0xFF	; 255
 c1e:	08 c0       	rjmp	.+16     	; 0xc30 <vfprintf+0x1f6>
 c20:	60 81       	ld	r22, Z
 c22:	71 81       	ldd	r23, Z+1	; 0x01
 c24:	07 2e       	mov	r0, r23
 c26:	00 0c       	add	r0, r0
 c28:	88 0b       	sbc	r24, r24
 c2a:	99 0b       	sbc	r25, r25
 c2c:	0e 5f       	subi	r16, 0xFE	; 254
 c2e:	1f 4f       	sbci	r17, 0xFF	; 255
 c30:	f3 2d       	mov	r31, r3
 c32:	ff 76       	andi	r31, 0x6F	; 111
 c34:	3f 2e       	mov	r3, r31
 c36:	97 ff       	sbrs	r25, 7
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <vfprintf+0x212>
 c3a:	90 95       	com	r25
 c3c:	80 95       	com	r24
 c3e:	70 95       	com	r23
 c40:	61 95       	neg	r22
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	f0 68       	ori	r31, 0x80	; 128
 c4a:	3f 2e       	mov	r3, r31
 c4c:	2a e0       	ldi	r18, 0x0A	; 10
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	a3 01       	movw	r20, r6
 c52:	0e 94 50 07 	call	0xea0	; 0xea0 <__ultoa_invert>
 c56:	88 2e       	mov	r8, r24
 c58:	86 18       	sub	r8, r6
 c5a:	45 c0       	rjmp	.+138    	; 0xce6 <vfprintf+0x2ac>
 c5c:	85 37       	cpi	r24, 0x75	; 117
 c5e:	31 f4       	brne	.+12     	; 0xc6c <vfprintf+0x232>
 c60:	23 2d       	mov	r18, r3
 c62:	2f 7e       	andi	r18, 0xEF	; 239
 c64:	b2 2e       	mov	r11, r18
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	25 c0       	rjmp	.+74     	; 0xcb6 <vfprintf+0x27c>
 c6c:	93 2d       	mov	r25, r3
 c6e:	99 7f       	andi	r25, 0xF9	; 249
 c70:	b9 2e       	mov	r11, r25
 c72:	8f 36       	cpi	r24, 0x6F	; 111
 c74:	c1 f0       	breq	.+48     	; 0xca6 <vfprintf+0x26c>
 c76:	18 f4       	brcc	.+6      	; 0xc7e <vfprintf+0x244>
 c78:	88 35       	cpi	r24, 0x58	; 88
 c7a:	79 f0       	breq	.+30     	; 0xc9a <vfprintf+0x260>
 c7c:	b5 c0       	rjmp	.+362    	; 0xde8 <vfprintf+0x3ae>
 c7e:	80 37       	cpi	r24, 0x70	; 112
 c80:	19 f0       	breq	.+6      	; 0xc88 <vfprintf+0x24e>
 c82:	88 37       	cpi	r24, 0x78	; 120
 c84:	21 f0       	breq	.+8      	; 0xc8e <vfprintf+0x254>
 c86:	b0 c0       	rjmp	.+352    	; 0xde8 <vfprintf+0x3ae>
 c88:	e9 2f       	mov	r30, r25
 c8a:	e0 61       	ori	r30, 0x10	; 16
 c8c:	be 2e       	mov	r11, r30
 c8e:	b4 fe       	sbrs	r11, 4
 c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x272>
 c92:	fb 2d       	mov	r31, r11
 c94:	f4 60       	ori	r31, 0x04	; 4
 c96:	bf 2e       	mov	r11, r31
 c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x272>
 c9a:	34 fe       	sbrs	r3, 4
 c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <vfprintf+0x278>
 c9e:	29 2f       	mov	r18, r25
 ca0:	26 60       	ori	r18, 0x06	; 6
 ca2:	b2 2e       	mov	r11, r18
 ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x278>
 ca6:	28 e0       	ldi	r18, 0x08	; 8
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	05 c0       	rjmp	.+10     	; 0xcb6 <vfprintf+0x27c>
 cac:	20 e1       	ldi	r18, 0x10	; 16
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x27c>
 cb2:	20 e1       	ldi	r18, 0x10	; 16
 cb4:	32 e0       	ldi	r19, 0x02	; 2
 cb6:	f8 01       	movw	r30, r16
 cb8:	b7 fe       	sbrs	r11, 7
 cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x290>
 cbc:	60 81       	ld	r22, Z
 cbe:	71 81       	ldd	r23, Z+1	; 0x01
 cc0:	82 81       	ldd	r24, Z+2	; 0x02
 cc2:	93 81       	ldd	r25, Z+3	; 0x03
 cc4:	0c 5f       	subi	r16, 0xFC	; 252
 cc6:	1f 4f       	sbci	r17, 0xFF	; 255
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x29c>
 cca:	60 81       	ld	r22, Z
 ccc:	71 81       	ldd	r23, Z+1	; 0x01
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 5f       	subi	r16, 0xFE	; 254
 cd4:	1f 4f       	sbci	r17, 0xFF	; 255
 cd6:	a3 01       	movw	r20, r6
 cd8:	0e 94 50 07 	call	0xea0	; 0xea0 <__ultoa_invert>
 cdc:	88 2e       	mov	r8, r24
 cde:	86 18       	sub	r8, r6
 ce0:	fb 2d       	mov	r31, r11
 ce2:	ff 77       	andi	r31, 0x7F	; 127
 ce4:	3f 2e       	mov	r3, r31
 ce6:	36 fe       	sbrs	r3, 6
 ce8:	0d c0       	rjmp	.+26     	; 0xd04 <vfprintf+0x2ca>
 cea:	23 2d       	mov	r18, r3
 cec:	2e 7f       	andi	r18, 0xFE	; 254
 cee:	a2 2e       	mov	r10, r18
 cf0:	89 14       	cp	r8, r9
 cf2:	58 f4       	brcc	.+22     	; 0xd0a <vfprintf+0x2d0>
 cf4:	34 fe       	sbrs	r3, 4
 cf6:	0b c0       	rjmp	.+22     	; 0xd0e <vfprintf+0x2d4>
 cf8:	32 fc       	sbrc	r3, 2
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <vfprintf+0x2d4>
 cfc:	83 2d       	mov	r24, r3
 cfe:	8e 7e       	andi	r24, 0xEE	; 238
 d00:	a8 2e       	mov	r10, r24
 d02:	05 c0       	rjmp	.+10     	; 0xd0e <vfprintf+0x2d4>
 d04:	b8 2c       	mov	r11, r8
 d06:	a3 2c       	mov	r10, r3
 d08:	03 c0       	rjmp	.+6      	; 0xd10 <vfprintf+0x2d6>
 d0a:	b8 2c       	mov	r11, r8
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <vfprintf+0x2d6>
 d0e:	b9 2c       	mov	r11, r9
 d10:	a4 fe       	sbrs	r10, 4
 d12:	0f c0       	rjmp	.+30     	; 0xd32 <vfprintf+0x2f8>
 d14:	fe 01       	movw	r30, r28
 d16:	e8 0d       	add	r30, r8
 d18:	f1 1d       	adc	r31, r1
 d1a:	80 81       	ld	r24, Z
 d1c:	80 33       	cpi	r24, 0x30	; 48
 d1e:	21 f4       	brne	.+8      	; 0xd28 <vfprintf+0x2ee>
 d20:	9a 2d       	mov	r25, r10
 d22:	99 7e       	andi	r25, 0xE9	; 233
 d24:	a9 2e       	mov	r10, r25
 d26:	09 c0       	rjmp	.+18     	; 0xd3a <vfprintf+0x300>
 d28:	a2 fe       	sbrs	r10, 2
 d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0x2fe>
 d2c:	b3 94       	inc	r11
 d2e:	b3 94       	inc	r11
 d30:	04 c0       	rjmp	.+8      	; 0xd3a <vfprintf+0x300>
 d32:	8a 2d       	mov	r24, r10
 d34:	86 78       	andi	r24, 0x86	; 134
 d36:	09 f0       	breq	.+2      	; 0xd3a <vfprintf+0x300>
 d38:	b3 94       	inc	r11
 d3a:	a3 fc       	sbrc	r10, 3
 d3c:	11 c0       	rjmp	.+34     	; 0xd60 <vfprintf+0x326>
 d3e:	a0 fe       	sbrs	r10, 0
 d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0x314>
 d42:	b2 14       	cp	r11, r2
 d44:	88 f4       	brcc	.+34     	; 0xd68 <vfprintf+0x32e>
 d46:	28 0c       	add	r2, r8
 d48:	92 2c       	mov	r9, r2
 d4a:	9b 18       	sub	r9, r11
 d4c:	0e c0       	rjmp	.+28     	; 0xd6a <vfprintf+0x330>
 d4e:	b2 14       	cp	r11, r2
 d50:	60 f4       	brcc	.+24     	; 0xd6a <vfprintf+0x330>
 d52:	b6 01       	movw	r22, r12
 d54:	80 e2       	ldi	r24, 0x20	; 32
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d5c:	b3 94       	inc	r11
 d5e:	f7 cf       	rjmp	.-18     	; 0xd4e <vfprintf+0x314>
 d60:	b2 14       	cp	r11, r2
 d62:	18 f4       	brcc	.+6      	; 0xd6a <vfprintf+0x330>
 d64:	2b 18       	sub	r2, r11
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x332>
 d68:	98 2c       	mov	r9, r8
 d6a:	21 2c       	mov	r2, r1
 d6c:	a4 fe       	sbrs	r10, 4
 d6e:	10 c0       	rjmp	.+32     	; 0xd90 <vfprintf+0x356>
 d70:	b6 01       	movw	r22, r12
 d72:	80 e3       	ldi	r24, 0x30	; 48
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d7a:	a2 fe       	sbrs	r10, 2
 d7c:	17 c0       	rjmp	.+46     	; 0xdac <vfprintf+0x372>
 d7e:	a1 fc       	sbrc	r10, 1
 d80:	03 c0       	rjmp	.+6      	; 0xd88 <vfprintf+0x34e>
 d82:	88 e7       	ldi	r24, 0x78	; 120
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x352>
 d88:	88 e5       	ldi	r24, 0x58	; 88
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	b6 01       	movw	r22, r12
 d8e:	0c c0       	rjmp	.+24     	; 0xda8 <vfprintf+0x36e>
 d90:	8a 2d       	mov	r24, r10
 d92:	86 78       	andi	r24, 0x86	; 134
 d94:	59 f0       	breq	.+22     	; 0xdac <vfprintf+0x372>
 d96:	a1 fe       	sbrs	r10, 1
 d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x364>
 d9a:	8b e2       	ldi	r24, 0x2B	; 43
 d9c:	01 c0       	rjmp	.+2      	; 0xda0 <vfprintf+0x366>
 d9e:	80 e2       	ldi	r24, 0x20	; 32
 da0:	a7 fc       	sbrc	r10, 7
 da2:	8d e2       	ldi	r24, 0x2D	; 45
 da4:	b6 01       	movw	r22, r12
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dac:	89 14       	cp	r8, r9
 dae:	38 f4       	brcc	.+14     	; 0xdbe <vfprintf+0x384>
 db0:	b6 01       	movw	r22, r12
 db2:	80 e3       	ldi	r24, 0x30	; 48
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dba:	9a 94       	dec	r9
 dbc:	f7 cf       	rjmp	.-18     	; 0xdac <vfprintf+0x372>
 dbe:	8a 94       	dec	r8
 dc0:	f3 01       	movw	r30, r6
 dc2:	e8 0d       	add	r30, r8
 dc4:	f1 1d       	adc	r31, r1
 dc6:	80 81       	ld	r24, Z
 dc8:	b6 01       	movw	r22, r12
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dd0:	81 10       	cpse	r8, r1
 dd2:	f5 cf       	rjmp	.-22     	; 0xdbe <vfprintf+0x384>
 dd4:	22 20       	and	r2, r2
 dd6:	09 f4       	brne	.+2      	; 0xdda <vfprintf+0x3a0>
 dd8:	42 ce       	rjmp	.-892    	; 0xa5e <vfprintf+0x24>
 dda:	b6 01       	movw	r22, r12
 ddc:	80 e2       	ldi	r24, 0x20	; 32
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 de4:	2a 94       	dec	r2
 de6:	f6 cf       	rjmp	.-20     	; 0xdd4 <vfprintf+0x39a>
 de8:	f6 01       	movw	r30, r12
 dea:	86 81       	ldd	r24, Z+6	; 0x06
 dec:	97 81       	ldd	r25, Z+7	; 0x07
 dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x3ba>
 df0:	8f ef       	ldi	r24, 0xFF	; 255
 df2:	9f ef       	ldi	r25, 0xFF	; 255
 df4:	2b 96       	adiw	r28, 0x0b	; 11
 df6:	e2 e1       	ldi	r30, 0x12	; 18
 df8:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__epilogue_restores__>

00000dfc <strnlen_P>:
 dfc:	fc 01       	movw	r30, r24
 dfe:	05 90       	lpm	r0, Z+
 e00:	61 50       	subi	r22, 0x01	; 1
 e02:	70 40       	sbci	r23, 0x00	; 0
 e04:	01 10       	cpse	r0, r1
 e06:	d8 f7       	brcc	.-10     	; 0xdfe <strnlen_P+0x2>
 e08:	80 95       	com	r24
 e0a:	90 95       	com	r25
 e0c:	8e 0f       	add	r24, r30
 e0e:	9f 1f       	adc	r25, r31
 e10:	08 95       	ret

00000e12 <strnlen>:
 e12:	fc 01       	movw	r30, r24
 e14:	61 50       	subi	r22, 0x01	; 1
 e16:	70 40       	sbci	r23, 0x00	; 0
 e18:	01 90       	ld	r0, Z+
 e1a:	01 10       	cpse	r0, r1
 e1c:	d8 f7       	brcc	.-10     	; 0xe14 <strnlen+0x2>
 e1e:	80 95       	com	r24
 e20:	90 95       	com	r25
 e22:	8e 0f       	add	r24, r30
 e24:	9f 1f       	adc	r25, r31
 e26:	08 95       	ret

00000e28 <fputc>:
 e28:	0f 93       	push	r16
 e2a:	1f 93       	push	r17
 e2c:	cf 93       	push	r28
 e2e:	df 93       	push	r29
 e30:	fb 01       	movw	r30, r22
 e32:	23 81       	ldd	r18, Z+3	; 0x03
 e34:	21 fd       	sbrc	r18, 1
 e36:	03 c0       	rjmp	.+6      	; 0xe3e <fputc+0x16>
 e38:	8f ef       	ldi	r24, 0xFF	; 255
 e3a:	9f ef       	ldi	r25, 0xFF	; 255
 e3c:	2c c0       	rjmp	.+88     	; 0xe96 <fputc+0x6e>
 e3e:	22 ff       	sbrs	r18, 2
 e40:	16 c0       	rjmp	.+44     	; 0xe6e <fputc+0x46>
 e42:	46 81       	ldd	r20, Z+6	; 0x06
 e44:	57 81       	ldd	r21, Z+7	; 0x07
 e46:	24 81       	ldd	r18, Z+4	; 0x04
 e48:	35 81       	ldd	r19, Z+5	; 0x05
 e4a:	42 17       	cp	r20, r18
 e4c:	53 07       	cpc	r21, r19
 e4e:	44 f4       	brge	.+16     	; 0xe60 <fputc+0x38>
 e50:	a0 81       	ld	r26, Z
 e52:	b1 81       	ldd	r27, Z+1	; 0x01
 e54:	9d 01       	movw	r18, r26
 e56:	2f 5f       	subi	r18, 0xFF	; 255
 e58:	3f 4f       	sbci	r19, 0xFF	; 255
 e5a:	31 83       	std	Z+1, r19	; 0x01
 e5c:	20 83       	st	Z, r18
 e5e:	8c 93       	st	X, r24
 e60:	26 81       	ldd	r18, Z+6	; 0x06
 e62:	37 81       	ldd	r19, Z+7	; 0x07
 e64:	2f 5f       	subi	r18, 0xFF	; 255
 e66:	3f 4f       	sbci	r19, 0xFF	; 255
 e68:	37 83       	std	Z+7, r19	; 0x07
 e6a:	26 83       	std	Z+6, r18	; 0x06
 e6c:	14 c0       	rjmp	.+40     	; 0xe96 <fputc+0x6e>
 e6e:	8b 01       	movw	r16, r22
 e70:	ec 01       	movw	r28, r24
 e72:	fb 01       	movw	r30, r22
 e74:	00 84       	ldd	r0, Z+8	; 0x08
 e76:	f1 85       	ldd	r31, Z+9	; 0x09
 e78:	e0 2d       	mov	r30, r0
 e7a:	09 95       	icall
 e7c:	89 2b       	or	r24, r25
 e7e:	e1 f6       	brne	.-72     	; 0xe38 <fputc+0x10>
 e80:	d8 01       	movw	r26, r16
 e82:	16 96       	adiw	r26, 0x06	; 6
 e84:	8d 91       	ld	r24, X+
 e86:	9c 91       	ld	r25, X
 e88:	17 97       	sbiw	r26, 0x07	; 7
 e8a:	01 96       	adiw	r24, 0x01	; 1
 e8c:	17 96       	adiw	r26, 0x07	; 7
 e8e:	9c 93       	st	X, r25
 e90:	8e 93       	st	-X, r24
 e92:	16 97       	sbiw	r26, 0x06	; 6
 e94:	ce 01       	movw	r24, r28
 e96:	df 91       	pop	r29
 e98:	cf 91       	pop	r28
 e9a:	1f 91       	pop	r17
 e9c:	0f 91       	pop	r16
 e9e:	08 95       	ret

00000ea0 <__ultoa_invert>:
 ea0:	fa 01       	movw	r30, r20
 ea2:	aa 27       	eor	r26, r26
 ea4:	28 30       	cpi	r18, 0x08	; 8
 ea6:	51 f1       	breq	.+84     	; 0xefc <__ultoa_invert+0x5c>
 ea8:	20 31       	cpi	r18, 0x10	; 16
 eaa:	81 f1       	breq	.+96     	; 0xf0c <__ultoa_invert+0x6c>
 eac:	e8 94       	clt
 eae:	6f 93       	push	r22
 eb0:	6e 7f       	andi	r22, 0xFE	; 254
 eb2:	6e 5f       	subi	r22, 0xFE	; 254
 eb4:	7f 4f       	sbci	r23, 0xFF	; 255
 eb6:	8f 4f       	sbci	r24, 0xFF	; 255
 eb8:	9f 4f       	sbci	r25, 0xFF	; 255
 eba:	af 4f       	sbci	r26, 0xFF	; 255
 ebc:	b1 e0       	ldi	r27, 0x01	; 1
 ebe:	3e d0       	rcall	.+124    	; 0xf3c <__ultoa_invert+0x9c>
 ec0:	b4 e0       	ldi	r27, 0x04	; 4
 ec2:	3c d0       	rcall	.+120    	; 0xf3c <__ultoa_invert+0x9c>
 ec4:	67 0f       	add	r22, r23
 ec6:	78 1f       	adc	r23, r24
 ec8:	89 1f       	adc	r24, r25
 eca:	9a 1f       	adc	r25, r26
 ecc:	a1 1d       	adc	r26, r1
 ece:	68 0f       	add	r22, r24
 ed0:	79 1f       	adc	r23, r25
 ed2:	8a 1f       	adc	r24, r26
 ed4:	91 1d       	adc	r25, r1
 ed6:	a1 1d       	adc	r26, r1
 ed8:	6a 0f       	add	r22, r26
 eda:	71 1d       	adc	r23, r1
 edc:	81 1d       	adc	r24, r1
 ede:	91 1d       	adc	r25, r1
 ee0:	a1 1d       	adc	r26, r1
 ee2:	20 d0       	rcall	.+64     	; 0xf24 <__ultoa_invert+0x84>
 ee4:	09 f4       	brne	.+2      	; 0xee8 <__ultoa_invert+0x48>
 ee6:	68 94       	set
 ee8:	3f 91       	pop	r19
 eea:	2a e0       	ldi	r18, 0x0A	; 10
 eec:	26 9f       	mul	r18, r22
 eee:	11 24       	eor	r1, r1
 ef0:	30 19       	sub	r19, r0
 ef2:	30 5d       	subi	r19, 0xD0	; 208
 ef4:	31 93       	st	Z+, r19
 ef6:	de f6       	brtc	.-74     	; 0xeae <__ultoa_invert+0xe>
 ef8:	cf 01       	movw	r24, r30
 efa:	08 95       	ret
 efc:	46 2f       	mov	r20, r22
 efe:	47 70       	andi	r20, 0x07	; 7
 f00:	40 5d       	subi	r20, 0xD0	; 208
 f02:	41 93       	st	Z+, r20
 f04:	b3 e0       	ldi	r27, 0x03	; 3
 f06:	0f d0       	rcall	.+30     	; 0xf26 <__ultoa_invert+0x86>
 f08:	c9 f7       	brne	.-14     	; 0xefc <__ultoa_invert+0x5c>
 f0a:	f6 cf       	rjmp	.-20     	; 0xef8 <__ultoa_invert+0x58>
 f0c:	46 2f       	mov	r20, r22
 f0e:	4f 70       	andi	r20, 0x0F	; 15
 f10:	40 5d       	subi	r20, 0xD0	; 208
 f12:	4a 33       	cpi	r20, 0x3A	; 58
 f14:	18 f0       	brcs	.+6      	; 0xf1c <__ultoa_invert+0x7c>
 f16:	49 5d       	subi	r20, 0xD9	; 217
 f18:	31 fd       	sbrc	r19, 1
 f1a:	40 52       	subi	r20, 0x20	; 32
 f1c:	41 93       	st	Z+, r20
 f1e:	02 d0       	rcall	.+4      	; 0xf24 <__ultoa_invert+0x84>
 f20:	a9 f7       	brne	.-22     	; 0xf0c <__ultoa_invert+0x6c>
 f22:	ea cf       	rjmp	.-44     	; 0xef8 <__ultoa_invert+0x58>
 f24:	b4 e0       	ldi	r27, 0x04	; 4
 f26:	a6 95       	lsr	r26
 f28:	97 95       	ror	r25
 f2a:	87 95       	ror	r24
 f2c:	77 95       	ror	r23
 f2e:	67 95       	ror	r22
 f30:	ba 95       	dec	r27
 f32:	c9 f7       	brne	.-14     	; 0xf26 <__ultoa_invert+0x86>
 f34:	00 97       	sbiw	r24, 0x00	; 0
 f36:	61 05       	cpc	r22, r1
 f38:	71 05       	cpc	r23, r1
 f3a:	08 95       	ret
 f3c:	9b 01       	movw	r18, r22
 f3e:	ac 01       	movw	r20, r24
 f40:	0a 2e       	mov	r0, r26
 f42:	06 94       	lsr	r0
 f44:	57 95       	ror	r21
 f46:	47 95       	ror	r20
 f48:	37 95       	ror	r19
 f4a:	27 95       	ror	r18
 f4c:	ba 95       	dec	r27
 f4e:	c9 f7       	brne	.-14     	; 0xf42 <__ultoa_invert+0xa2>
 f50:	62 0f       	add	r22, r18
 f52:	73 1f       	adc	r23, r19
 f54:	84 1f       	adc	r24, r20
 f56:	95 1f       	adc	r25, r21
 f58:	a0 1d       	adc	r26, r0
 f5a:	08 95       	ret

00000f5c <__prologue_saves__>:
 f5c:	2f 92       	push	r2
 f5e:	3f 92       	push	r3
 f60:	4f 92       	push	r4
 f62:	5f 92       	push	r5
 f64:	6f 92       	push	r6
 f66:	7f 92       	push	r7
 f68:	8f 92       	push	r8
 f6a:	9f 92       	push	r9
 f6c:	af 92       	push	r10
 f6e:	bf 92       	push	r11
 f70:	cf 92       	push	r12
 f72:	df 92       	push	r13
 f74:	ef 92       	push	r14
 f76:	ff 92       	push	r15
 f78:	0f 93       	push	r16
 f7a:	1f 93       	push	r17
 f7c:	cf 93       	push	r28
 f7e:	df 93       	push	r29
 f80:	cd b7       	in	r28, 0x3d	; 61
 f82:	de b7       	in	r29, 0x3e	; 62
 f84:	ca 1b       	sub	r28, r26
 f86:	db 0b       	sbc	r29, r27
 f88:	0f b6       	in	r0, 0x3f	; 63
 f8a:	f8 94       	cli
 f8c:	de bf       	out	0x3e, r29	; 62
 f8e:	0f be       	out	0x3f, r0	; 63
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	09 94       	ijmp

00000f94 <__epilogue_restores__>:
 f94:	2a 88       	ldd	r2, Y+18	; 0x12
 f96:	39 88       	ldd	r3, Y+17	; 0x11
 f98:	48 88       	ldd	r4, Y+16	; 0x10
 f9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 fa0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fa2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fa4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fa6:	b9 84       	ldd	r11, Y+9	; 0x09
 fa8:	c8 84       	ldd	r12, Y+8	; 0x08
 faa:	df 80       	ldd	r13, Y+7	; 0x07
 fac:	ee 80       	ldd	r14, Y+6	; 0x06
 fae:	fd 80       	ldd	r15, Y+5	; 0x05
 fb0:	0c 81       	ldd	r16, Y+4	; 0x04
 fb2:	1b 81       	ldd	r17, Y+3	; 0x03
 fb4:	aa 81       	ldd	r26, Y+2	; 0x02
 fb6:	b9 81       	ldd	r27, Y+1	; 0x01
 fb8:	ce 0f       	add	r28, r30
 fba:	d1 1d       	adc	r29, r1
 fbc:	0f b6       	in	r0, 0x3f	; 63
 fbe:	f8 94       	cli
 fc0:	de bf       	out	0x3e, r29	; 62
 fc2:	0f be       	out	0x3f, r0	; 63
 fc4:	cd bf       	out	0x3d, r28	; 61
 fc6:	ed 01       	movw	r28, r26
 fc8:	08 95       	ret

00000fca <_exit>:
 fca:	f8 94       	cli

00000fcc <__stop_program>:
 fcc:	ff cf       	rjmp	.-2      	; 0xfcc <__stop_program>
