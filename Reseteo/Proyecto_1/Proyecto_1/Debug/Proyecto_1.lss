
Proyecto_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00001176  0000120a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005a  00800142  00800142  0000124c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d2d  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce6  00000000  00000000  00003195  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f25  00000000  00000000  00003e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  00004da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  0000526c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001835  00000000  00000000  000059aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  000071df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__ctors_end>
       4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
       8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
       c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      10:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_4>
      14:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_5>
      18:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      1c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      20:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      24:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      28:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      38:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      3c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      44:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      4c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      50:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      58:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      5c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      60:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
      64:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>

00000068 <CHARACTERS>:
      68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
      c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
      d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
      e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
      f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     1f8:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
     208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <INIT_ST7735B>:
     248:	0b 01 80 c8 11 80 c8 3a 81 05 0a b1 83 00 06 03     .......:........
     258:	0a 20 80 0a 36 01 a0 b6 02 15 02 b4 01 00 e0 10     . ..6...........
     268:	09 16 09 20 21 1b 13 19 17 15 1e 2b 04 05 02 0e     ... !......+....
     278:	e1 90 0b 14 08 1e 22 1d 18 1e 1b 1a 24 2b 06 06     ......".....$+..
     288:	02 0f 0a 13 80 0a                                   ......

0000028e <__ctors_end>:
     28e:	11 24       	eor	r1, r1
     290:	1f be       	out	0x3f, r1	; 63
     292:	cf ef       	ldi	r28, 0xFF	; 255
     294:	d8 e0       	ldi	r29, 0x08	; 8
     296:	de bf       	out	0x3e, r29	; 62
     298:	cd bf       	out	0x3d, r28	; 61

0000029a <__do_copy_data>:
     29a:	11 e0       	ldi	r17, 0x01	; 1
     29c:	a0 e0       	ldi	r26, 0x00	; 0
     29e:	b1 e0       	ldi	r27, 0x01	; 1
     2a0:	e6 e7       	ldi	r30, 0x76	; 118
     2a2:	f1 e1       	ldi	r31, 0x11	; 17
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x10>
     2a6:	05 90       	lpm	r0, Z+
     2a8:	0d 92       	st	X+, r0
     2aa:	a2 34       	cpi	r26, 0x42	; 66
     2ac:	b1 07       	cpc	r27, r17
     2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0xc>

000002b0 <__do_clear_bss>:
     2b0:	21 e0       	ldi	r18, 0x01	; 1
     2b2:	a2 e4       	ldi	r26, 0x42	; 66
     2b4:	b1 e0       	ldi	r27, 0x01	; 1
     2b6:	01 c0       	rjmp	.+2      	; 0x2ba <.do_clear_bss_start>

000002b8 <.do_clear_bss_loop>:
     2b8:	1d 92       	st	X+, r1

000002ba <.do_clear_bss_start>:
     2ba:	ac 39       	cpi	r26, 0x9C	; 156
     2bc:	b2 07       	cpc	r27, r18
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <.do_clear_bss_loop>
     2c0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <main>
     2c4:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <_exit>

000002c8 <__bad_interrupt>:
     2c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002cc <first_grid>:
char old_string3a[10];
char old_string3b[10];
char old_string4[10];

//recibe numero y lo pone en el cuadrante 1
void first_grid(float number){
     2cc:	0f 93       	push	r16
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	c6 2f       	mov	r28, r22
     2d6:	d7 2f       	mov	r29, r23
     2d8:	18 2f       	mov	r17, r24
     2da:	09 2f       	mov	r16, r25
	static int flag;
	if (flag==1){
     2dc:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     2e0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	59 f4       	brne	.+22     	; 0x2fe <first_grid+0x32>
		SetPosition(25, 5);
     2e8:	65 e0       	ldi	r22, 0x05	; 5
     2ea:	89 e1       	ldi	r24, 0x19	; 25
     2ec:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SetPosition>
		DrawString(old_string1, 0xffff, X2);
     2f0:	41 e0       	ldi	r20, 0x01	; 1
     2f2:	6f ef       	ldi	r22, 0xFF	; 255
     2f4:	7f ef       	ldi	r23, 0xFF	; 255
     2f6:	86 e5       	ldi	r24, 0x56	; 86
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 8d 04 	call	0x91a	; 0x91a <DrawString>
	}
	
	sprintf(old_string1, " %f", number);
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	df 93       	push	r29
     304:	cf 93       	push	r28
     306:	81 e2       	ldi	r24, 0x21	; 33
     308:	91 e0       	ldi	r25, 0x01	; 1
     30a:	9f 93       	push	r25
     30c:	8f 93       	push	r24
     30e:	86 e5       	ldi	r24, 0x56	; 86
     310:	91 e0       	ldi	r25, 0x01	; 1
     312:	9f 93       	push	r25
     314:	8f 93       	push	r24
     316:	0e 94 cf 05 	call	0xb9e	; 0xb9e <sprintf>
	
	SetPosition(25, 5);	
     31a:	65 e0       	ldi	r22, 0x05	; 5
     31c:	89 e1       	ldi	r24, 0x19	; 25
     31e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SetPosition>
	DrawString(old_string1, 0x0000, X2);
     322:	41 e0       	ldi	r20, 0x01	; 1
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	86 e5       	ldi	r24, 0x56	; 86
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 8d 04 	call	0x91a	; 0x91a <DrawString>

	flag = 1;
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
     338:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
	
}
     33c:	8d b7       	in	r24, 0x3d	; 61
     33e:	9e b7       	in	r25, 0x3e	; 62
     340:	08 96       	adiw	r24, 0x08	; 8
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	9e bf       	out	0x3e, r25	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	8d bf       	out	0x3d, r24	; 61
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	1f 91       	pop	r17
     352:	0f 91       	pop	r16
     354:	08 95       	ret

00000356 <__vector_5>:
PC2,3,4,5 -> PCINIT10,11,12,13 -> PCI1
PD4,5,6,7 -> PCINIT20,21,22,23 -> PCI2*/

//agregar bool ocupado para no accionar multiples veces interrupcion!
ISR(PCINT2_vect) //seccion2 D
{
     356:	1f 92       	push	r1
     358:	0f 92       	push	r0
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	0f 92       	push	r0
     35e:	11 24       	eor	r1, r1
     360:	2f 93       	push	r18
     362:	3f 93       	push	r19
     364:	4f 93       	push	r20
     366:	5f 93       	push	r21
     368:	6f 93       	push	r22
     36a:	7f 93       	push	r23
     36c:	8f 93       	push	r24
     36e:	9f 93       	push	r25
     370:	af 93       	push	r26
     372:	bf 93       	push	r27
     374:	ef 93       	push	r30
     376:	ff 93       	push	r31
	//INICIO OCUPADO
	//Debounder in
	if      (!(PIND & (1<<PIND4))) { presionado = linea + 0;}
     378:	4c 99       	sbic	0x09, 4	; 9
     37a:	09 c0       	rjmp	.+18     	; 0x38e <__vector_5+0x38>
     37c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     380:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     384:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     388:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
     38c:	23 c0       	rjmp	.+70     	; 0x3d4 <__vector_5+0x7e>
	else if (!(PIND & (1<<PIND5))) { presionado = linea + 1;}
     38e:	4d 99       	sbic	0x09, 5	; 9
     390:	0a c0       	rjmp	.+20     	; 0x3a6 <__vector_5+0x50>
     392:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     396:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     3a0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
     3a4:	17 c0       	rjmp	.+46     	; 0x3d4 <__vector_5+0x7e>
	else if (!(PIND & (1<<PIND6))) { presionado = linea + 2;}
     3a6:	4e 99       	sbic	0x09, 6	; 9
     3a8:	0a c0       	rjmp	.+20     	; 0x3be <__vector_5+0x68>
     3aa:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     3ae:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     3b2:	02 96       	adiw	r24, 0x02	; 2
     3b4:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     3b8:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
     3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <__vector_5+0x7e>
	else if (!(PIND & (1<<PIND7))) { presionado = linea + 3;}
     3be:	4f 99       	sbic	0x09, 7	; 9
     3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <__vector_5+0x7e>
     3c2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     3c6:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     3ca:	03 96       	adiw	r24, 0x03	; 3
     3cc:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     3d0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
	mostrar(presionado);
     3d4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <presionado>
     3d8:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <presionado+0x1>
     3dc:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <mostrar>
	//debounceer out
}
     3e0:	ff 91       	pop	r31
     3e2:	ef 91       	pop	r30
     3e4:	bf 91       	pop	r27
     3e6:	af 91       	pop	r26
     3e8:	9f 91       	pop	r25
     3ea:	8f 91       	pop	r24
     3ec:	7f 91       	pop	r23
     3ee:	6f 91       	pop	r22
     3f0:	5f 91       	pop	r21
     3f2:	4f 91       	pop	r20
     3f4:	3f 91       	pop	r19
     3f6:	2f 91       	pop	r18
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_4>:

ISR(PCINT1_vect) //seccion1 C
{
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	2f 93       	push	r18
     40e:	3f 93       	push	r19
     410:	4f 93       	push	r20
     412:	5f 93       	push	r21
     414:	6f 93       	push	r22
     416:	7f 93       	push	r23
     418:	8f 93       	push	r24
     41a:	9f 93       	push	r25
     41c:	af 93       	push	r26
     41e:	bf 93       	push	r27
     420:	ef 93       	push	r30
     422:	ff 93       	push	r31
	//INICIO OCUPADO
	//debouncer in
	if      (!(PINC & (1<<PINC2))) { presionado = linea + 4;}
     424:	32 99       	sbic	0x06, 2	; 6
     426:	0a c0       	rjmp	.+20     	; 0x43c <__vector_4+0x3a>
     428:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     42c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     430:	04 96       	adiw	r24, 0x04	; 4
     432:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     436:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
     43a:	23 c0       	rjmp	.+70     	; 0x482 <__vector_4+0x80>
	else if (!(PINC & (1<<PINC3))) { presionado = linea + 5;}
     43c:	33 99       	sbic	0x06, 3	; 6
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__vector_4+0x52>
     440:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     444:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     448:	05 96       	adiw	r24, 0x05	; 5
     44a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     44e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
     452:	17 c0       	rjmp	.+46     	; 0x482 <__vector_4+0x80>
	else if (!(PINC & (1<<PINC4))) { presionado = linea + 6;}
     454:	34 99       	sbic	0x06, 4	; 6
     456:	0a c0       	rjmp	.+20     	; 0x46c <__vector_4+0x6a>
     458:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     45c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     460:	06 96       	adiw	r24, 0x06	; 6
     462:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     466:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
     46a:	0b c0       	rjmp	.+22     	; 0x482 <__vector_4+0x80>
	else if (!(PINC & (1<<PINC5))) { presionado = linea + 7;}
     46c:	35 99       	sbic	0x06, 5	; 6
     46e:	09 c0       	rjmp	.+18     	; 0x482 <__vector_4+0x80>
     470:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <linea>
     474:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <linea+0x1>
     478:	07 96       	adiw	r24, 0x07	; 7
     47a:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <presionado+0x1>
     47e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <presionado>
	mostrar(presionado);
     482:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <presionado>
     486:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <presionado+0x1>
     48a:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <mostrar>
	//debouncer out
}
     48e:	ff 91       	pop	r31
     490:	ef 91       	pop	r30
     492:	bf 91       	pop	r27
     494:	af 91       	pop	r26
     496:	9f 91       	pop	r25
     498:	8f 91       	pop	r24
     49a:	7f 91       	pop	r23
     49c:	6f 91       	pop	r22
     49e:	5f 91       	pop	r21
     4a0:	4f 91       	pop	r20
     4a2:	3f 91       	pop	r19
     4a4:	2f 91       	pop	r18
     4a6:	0f 90       	pop	r0
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	0f 90       	pop	r0
     4ac:	1f 90       	pop	r1
     4ae:	18 95       	reti

000004b0 <main>:

int main(void)
{
	St7735Init();
     4b0:	0e 94 33 05 	call	0xa66	; 0xa66 <St7735Init>
	UpdateScreen();
     4b4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <UpdateScreen>
	tecladoInit();
     4b8:	0e 94 3c 05 	call	0xa78	; 0xa78 <tecladoInit>
	USART_Init(MYUBRR);
     4bc:	80 e1       	ldi	r24, 0x10	; 16
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 c4 05 	call	0xb88	; 0xb88 <USART_Init>
	USART_Transmit_String("HOLA");	
     4c4:	85 e2       	ldi	r24, 0x25	; 37
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 6c 05 	call	0xad8	; 0xad8 <USART_Transmit_String>
	sei();
     4cc:	78 94       	sei
	
	
	SetPosition(25, 5);
     4ce:	65 e0       	ldi	r22, 0x05	; 5
     4d0:	89 e1       	ldi	r24, 0x19	; 25
     4d2:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SetPosition>
	DrawString("Inicio programa", 0x0000, X2);
     4d6:	41 e0       	ldi	r20, 0x01	; 1
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	8a e2       	ldi	r24, 0x2A	; 42
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 8d 04 	call	0x91a	; 0x91a <DrawString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e4:	2f e7       	ldi	r18, 0x7F	; 127
     4e6:	84 e8       	ldi	r24, 0x84	; 132
     4e8:	9e e1       	ldi	r25, 0x1E	; 30
     4ea:	21 50       	subi	r18, 0x01	; 1
     4ec:	80 40       	sbci	r24, 0x00	; 0
     4ee:	90 40       	sbci	r25, 0x00	; 0
     4f0:	e1 f7       	brne	.-8      	; 0x4ea <main+0x3a>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0x44>
     4f4:	00 00       	nop
	_delay_ms(10000);
	SetPosition(25, 5);
     4f6:	65 e0       	ldi	r22, 0x05	; 5
     4f8:	89 e1       	ldi	r24, 0x19	; 25
     4fa:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SetPosition>
	DrawString("Inicio programa", 0xffff, X2);
     4fe:	41 e0       	ldi	r20, 0x01	; 1
     500:	6f ef       	ldi	r22, 0xFF	; 255
     502:	7f ef       	ldi	r23, 0xFF	; 255
     504:	8a e2       	ldi	r24, 0x2A	; 42
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 8d 04 	call	0x91a	; 0x91a <DrawString>
	
	ClearScreen(0xffff);
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	0e 94 cc 04 	call	0x998	; 0x998 <ClearScreen>
	
	first_grid(11.11);
     514:	6f e8       	ldi	r22, 0x8F	; 143
     516:	72 ec       	ldi	r23, 0xC2	; 194
     518:	81 e3       	ldi	r24, 0x31	; 49
     51a:	91 e4       	ldi	r25, 0x41	; 65
     51c:	0e 94 66 01 	call	0x2cc	; 0x2cc <first_grid>
	
	
    while (1) 
    {
		p1
		p2
     520:	68 e0       	ldi	r22, 0x08	; 8
     522:	70 e0       	ldi	r23, 0x00	; 0
		p3
     524:	40 e1       	ldi	r20, 0x10	; 16
     526:	50 e0       	ldi	r21, 0x00	; 0
		p4
     528:	28 e1       	ldi	r18, 0x18	; 24
     52a:	30 e0       	ldi	r19, 0x00	; 0
	
	
	
    while (1) 
    {
		p1
     52c:	40 98       	cbi	0x08, 0	; 8
     52e:	89 ef       	ldi	r24, 0xF9	; 249
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <main+0x82>
     536:	00 c0       	rjmp	.+0      	; 0x538 <main+0x88>
     538:	00 00       	nop
     53a:	88 b1       	in	r24, 0x08	; 8
     53c:	83 60       	ori	r24, 0x03	; 3
     53e:	88 b9       	out	0x08, r24	; 8
     540:	8b b1       	in	r24, 0x0b	; 11
     542:	8c 60       	ori	r24, 0x0C	; 12
     544:	8b b9       	out	0x0b, r24	; 11
     546:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <linea+0x1>
     54a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <linea>
		p2
     54e:	41 98       	cbi	0x08, 1	; 8
     550:	89 ef       	ldi	r24, 0xF9	; 249
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	01 97       	sbiw	r24, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <main+0xa4>
     558:	00 c0       	rjmp	.+0      	; 0x55a <main+0xaa>
     55a:	00 00       	nop
     55c:	88 b1       	in	r24, 0x08	; 8
     55e:	83 60       	ori	r24, 0x03	; 3
     560:	88 b9       	out	0x08, r24	; 8
     562:	8b b1       	in	r24, 0x0b	; 11
     564:	8c 60       	ori	r24, 0x0C	; 12
     566:	8b b9       	out	0x0b, r24	; 11
     568:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <linea+0x1>
     56c:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <linea>
		p3
     570:	5a 98       	cbi	0x0b, 2	; 11
     572:	89 ef       	ldi	r24, 0xF9	; 249
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <main+0xc6>
     57a:	00 c0       	rjmp	.+0      	; 0x57c <main+0xcc>
     57c:	00 00       	nop
     57e:	88 b1       	in	r24, 0x08	; 8
     580:	83 60       	ori	r24, 0x03	; 3
     582:	88 b9       	out	0x08, r24	; 8
     584:	8b b1       	in	r24, 0x0b	; 11
     586:	8c 60       	ori	r24, 0x0C	; 12
     588:	8b b9       	out	0x0b, r24	; 11
     58a:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <linea+0x1>
     58e:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <linea>
		p4
     592:	5b 98       	cbi	0x0b, 3	; 11
     594:	89 ef       	ldi	r24, 0xF9	; 249
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	01 97       	sbiw	r24, 0x01	; 1
     59a:	f1 f7       	brne	.-4      	; 0x598 <main+0xe8>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <main+0xee>
     59e:	00 00       	nop
     5a0:	88 b1       	in	r24, 0x08	; 8
     5a2:	83 60       	ori	r24, 0x03	; 3
     5a4:	88 b9       	out	0x08, r24	; 8
     5a6:	8b b1       	in	r24, 0x0b	; 11
     5a8:	8c 60       	ori	r24, 0x0C	; 12
     5aa:	8b b9       	out	0x0b, r24	; 11
     5ac:	30 93 47 01 	sts	0x0147, r19	; 0x800147 <linea+0x1>
     5b0:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <linea>
     5b4:	bb cf       	rjmp	.-138    	; 0x52c <main+0x7c>

000005b6 <HardwareReset>:
*/

void HardwareReset(void)
{
	// Actiavte pull-up register logical high on pin RST
	PORTB |= BIT0;
     5b6:	28 9a       	sbi	0x05, 0	; 5
	// DDR as output
	DDRB  |= BIT0;
     5b8:	20 9a       	sbi	0x04, 0	; 4
     5ba:	8f e4       	ldi	r24, 0x4F	; 79
     5bc:	93 ec       	ldi	r25, 0xC3	; 195
     5be:	01 97       	sbiw	r24, 0x01	; 1
     5c0:	f1 f7       	brne	.-4      	; 0x5be <HardwareReset+0x8>
     5c2:	00 c0       	rjmp	.+0      	; 0x5c4 <HardwareReset+0xe>
     5c4:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset Low
	PORTB &= ~BIT0;
     5c6:	28 98       	cbi	0x05, 0	; 5
     5c8:	8f e4       	ldi	r24, 0x4F	; 79
     5ca:	93 ec       	ldi	r25, 0xC3	; 195
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	f1 f7       	brne	.-4      	; 0x5cc <HardwareReset+0x16>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <HardwareReset+0x1c>
     5d2:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset High
	PORTB |= BIT0;
     5d4:	28 9a       	sbi	0x05, 0	; 5
     5d6:	08 95       	ret

000005d8 <SpiInit>:

void SpiInit(void)
{

	// Output: SCK, MOSI, CS_LD, DC_LD
	DDRB  |= BIT5 | BIT3 | BIT2 | BIT1;
     5d8:	84 b1       	in	r24, 0x04	; 4
     5da:	8e 62       	ori	r24, 0x2E	; 46
     5dc:	84 b9       	out	0x04, r24	; 4
	DDRB  &= ~BIT4;
     5de:	24 98       	cbi	0x04, 4	; 4
	PORTB |= BIT2 | BIT4;
     5e0:	85 b1       	in	r24, 0x05	; 5
     5e2:	84 61       	ori	r24, 0x14	; 20
     5e4:	85 b9       	out	0x05, r24	; 5
	SPCR  |= BIT6 | BIT4;// | BIT0 | BIT1;
     5e6:	8c b5       	in	r24, 0x2c	; 44
     5e8:	80 65       	ori	r24, 0x50	; 80
     5ea:	8c bd       	out	0x2c, r24	; 44
	// SPI2X - Prescaler fclk/2 = 8MHz
	SPSR |= (1 << SPI2X);
     5ec:	8d b5       	in	r24, 0x2d	; 45
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	8d bd       	out	0x2d, r24	; 45
     5f2:	08 95       	ret

000005f4 <CommandSend>:
}

uint8_t CommandSend(uint8_t data)
{
	// chip enable - active low
	PORTB &= ~BIT2;
     5f4:	2a 98       	cbi	0x05, 2	; 5
	// command (active low)
	PORTB &= ~BIT1;
     5f6:	29 98       	cbi	0x05, 1	; 5
	// transmitting data
	SPDR = data;
     5f8:	8e bd       	out	0x2e, r24	; 46
	// wait till data transmit
	while (!(SPSR & (1 << SPIF)));
     5fa:	0d b4       	in	r0, 0x2d	; 45
     5fc:	07 fe       	sbrs	r0, 7
     5fe:	fd cf       	rjmp	.-6      	; 0x5fa <CommandSend+0x6>
	// chip disable - idle high
	PORTB |= BIT2;
     600:	2a 9a       	sbi	0x05, 2	; 5
	// return received data
	return SPDR;
     602:	8e b5       	in	r24, 0x2e	; 46
}
     604:	08 95       	ret

00000606 <Data8BitsSend>:
  }
  // set window
  SetWindow(x, x, ys, ye);
  // draw pixel by 565 mode
  SendColor565(color, ye - ys);
}
     606:	2a 98       	cbi	0x05, 2	; 5
     608:	29 9a       	sbi	0x05, 1	; 5
     60a:	8e bd       	out	0x2e, r24	; 46
     60c:	0d b4       	in	r0, 0x2d	; 45
     60e:	07 fe       	sbrs	r0, 7
     610:	fd cf       	rjmp	.-6      	; 0x60c <Data8BitsSend+0x6>
     612:	2a 9a       	sbi	0x05, 2	; 5
     614:	8e b5       	in	r24, 0x2e	; 46
     616:	08 95       	ret

00000618 <Data16BitsSend>:
     618:	2a 98       	cbi	0x05, 2	; 5
     61a:	29 9a       	sbi	0x05, 1	; 5
     61c:	9e bd       	out	0x2e, r25	; 46
     61e:	0d b4       	in	r0, 0x2d	; 45
     620:	07 fe       	sbrs	r0, 7
     622:	fd cf       	rjmp	.-6      	; 0x61e <Data16BitsSend+0x6>
     624:	8e bd       	out	0x2e, r24	; 46
     626:	0d b4       	in	r0, 0x2d	; 45
     628:	07 fe       	sbrs	r0, 7
     62a:	fd cf       	rjmp	.-6      	; 0x626 <Data16BitsSend+0xe>
     62c:	2a 9a       	sbi	0x05, 2	; 5
     62e:	8e b5       	in	r24, 0x2e	; 46
     630:	08 95       	ret

00000632 <SendColor565>:
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	8c 01       	movw	r16, r24
     63c:	eb 01       	movw	r28, r22
     63e:	8c e2       	ldi	r24, 0x2C	; 44
     640:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <CommandSend>
     644:	20 97       	sbiw	r28, 0x00	; 0
     646:	29 f0       	breq	.+10     	; 0x652 <SendColor565+0x20>
     648:	c8 01       	movw	r24, r16
     64a:	0e 94 0c 03 	call	0x618	; 0x618 <Data16BitsSend>
     64e:	21 97       	sbiw	r28, 0x01	; 1
     650:	d9 f7       	brne	.-10     	; 0x648 <SendColor565+0x16>
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	08 95       	ret

0000065c <SetWindow>:
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	68 17       	cp	r22, r24
     666:	50 f1       	brcs	.+84     	; 0x6bc <SetWindow+0x60>
     668:	62 3a       	cpi	r22, 0xA2	; 162
     66a:	50 f5       	brcc	.+84     	; 0x6c0 <SetWindow+0x64>
     66c:	24 17       	cp	r18, r20
     66e:	50 f1       	brcs	.+84     	; 0x6c4 <SetWindow+0x68>
     670:	24 38       	cpi	r18, 0x84	; 132
     672:	50 f5       	brcc	.+84     	; 0x6c8 <SetWindow+0x6c>
     674:	12 2f       	mov	r17, r18
     676:	04 2f       	mov	r16, r20
     678:	c6 2f       	mov	r28, r22
     67a:	d8 2f       	mov	r29, r24
     67c:	8a e2       	ldi	r24, 0x2A	; 42
     67e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <CommandSend>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     688:	8d 2f       	mov	r24, r29
     68a:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     694:	8c 2f       	mov	r24, r28
     696:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     69a:	8b e2       	ldi	r24, 0x2B	; 43
     69c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <CommandSend>
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     6a6:	80 2f       	mov	r24, r16
     6a8:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     6b2:	81 2f       	mov	r24, r17
     6b4:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	07 c0       	rjmp	.+14     	; 0x6ca <SetWindow+0x6e>
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	05 c0       	rjmp	.+10     	; 0x6ca <SetWindow+0x6e>
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	03 c0       	rjmp	.+6      	; 0x6ca <SetWindow+0x6e>
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	01 c0       	rjmp	.+2      	; 0x6ca <SetWindow+0x6e>
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	08 95       	ret

000006d4 <SetPosition>:
     6d4:	8d 39       	cpi	r24, 0x9D	; 157
     6d6:	90 f0       	brcs	.+36     	; 0x6fc <SetPosition+0x28>
     6d8:	6d 37       	cpi	r22, 0x7D	; 125
     6da:	e0 f4       	brcc	.+56     	; 0x714 <SetPosition+0x40>
     6dc:	6c 37       	cpi	r22, 0x7C	; 124
     6de:	70 f4       	brcc	.+28     	; 0x6fc <SetPosition+0x28>
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	68 5f       	subi	r22, 0xF8	; 248
     6e4:	7f 4f       	sbci	r23, 0xFF	; 255
     6e6:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <cacheMemIndexRow+0x1>
     6ea:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <cacheMemIndexRow>
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cacheMemIndexCol+0x1>
     6f4:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cacheMemIndexCol>
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	08 95       	ret
     6fc:	70 e0       	ldi	r23, 0x00	; 0
     6fe:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <cacheMemIndexRow+0x1>
     702:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <cacheMemIndexRow>
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cacheMemIndexCol+0x1>
     70c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cacheMemIndexCol>
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	08 95       	ret
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	08 95       	ret

00000718 <DrawPixel>:
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	ea 01       	movw	r28, r20
     71e:	26 2f       	mov	r18, r22
     720:	46 2f       	mov	r20, r22
     722:	68 2f       	mov	r22, r24
     724:	0e 94 2e 03 	call	0x65c	; 0x65c <SetWindow>
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	ce 01       	movw	r24, r28
     72e:	0e 94 19 03 	call	0x632	; 0x632 <SendColor565>
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	08 95       	ret

00000738 <DrawChar>:
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	7f 92       	push	r7
     73e:	8f 92       	push	r8
     740:	9f 92       	push	r9
     742:	af 92       	push	r10
     744:	bf 92       	push	r11
     746:	cf 92       	push	r12
     748:	df 92       	push	r13
     74a:	ef 92       	push	r14
     74c:	ff 92       	push	r15
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	2b 01       	movw	r4, r22
     756:	41 11       	cpse	r20, r1
     758:	34 c0       	rjmp	.+104    	; 0x7c2 <DrawChar+0x8a>
     75a:	68 94       	set
     75c:	99 24       	eor	r9, r9
     75e:	92 f8       	bld	r9, 2
     760:	c8 2f       	mov	r28, r24
     762:	d0 e0       	ldi	r29, 0x00	; 0
     764:	ce 01       	movw	r24, r28
     766:	80 97       	sbiw	r24, 0x20	; 32
     768:	ec 01       	movw	r28, r24
     76a:	cc 0f       	add	r28, r28
     76c:	dd 1f       	adc	r29, r29
     76e:	cc 0f       	add	r28, r28
     770:	dd 1f       	adc	r29, r29
     772:	c8 0f       	add	r28, r24
     774:	d9 1f       	adc	r29, r25
     776:	0f 2e       	mov	r0, r31
     778:	fa e4       	ldi	r31, 0x4A	; 74
     77a:	cf 2e       	mov	r12, r31
     77c:	f1 e0       	ldi	r31, 0x01	; 1
     77e:	df 2e       	mov	r13, r31
     780:	f0 2d       	mov	r31, r0
     782:	0f 2e       	mov	r0, r31
     784:	f8 e4       	ldi	r31, 0x48	; 72
     786:	ef 2e       	mov	r14, r31
     788:	f1 e0       	ldi	r31, 0x01	; 1
     78a:	ff 2e       	mov	r15, r31
     78c:	f0 2d       	mov	r31, r0
     78e:	fe 01       	movw	r30, r28
     790:	e9 0d       	add	r30, r9
     792:	f1 1d       	adc	r31, r1
     794:	e8 59       	subi	r30, 0x98	; 152
     796:	ff 4f       	sbci	r31, 0xFF	; 255
     798:	b4 90       	lpm	r11, Z
     79a:	17 e0       	ldi	r17, 0x07	; 7
     79c:	bb 20       	and	r11, r11
     79e:	4c f4       	brge	.+18     	; 0x7b2 <DrawChar+0x7a>
     7a0:	f6 01       	movw	r30, r12
     7a2:	60 81       	ld	r22, Z
     7a4:	61 0f       	add	r22, r17
     7a6:	f7 01       	movw	r30, r14
     7a8:	80 81       	ld	r24, Z
     7aa:	a2 01       	movw	r20, r4
     7ac:	89 0d       	add	r24, r9
     7ae:	0e 94 8c 03 	call	0x718	; 0x718 <DrawPixel>
     7b2:	bb 0c       	add	r11, r11
     7b4:	11 50       	subi	r17, 0x01	; 1
     7b6:	90 f7       	brcc	.-28     	; 0x79c <DrawChar+0x64>
     7b8:	9a 94       	dec	r9
     7ba:	ff ef       	ldi	r31, 0xFF	; 255
     7bc:	9f 12       	cpse	r9, r31
     7be:	e7 cf       	rjmp	.-50     	; 0x78e <DrawChar+0x56>
     7c0:	9c c0       	rjmp	.+312    	; 0x8fa <DrawChar+0x1c2>
     7c2:	41 30       	cpi	r20, 0x01	; 1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <DrawChar+0x90>
     7c6:	40 c0       	rjmp	.+128    	; 0x848 <DrawChar+0x110>
     7c8:	68 94       	set
     7ca:	99 24       	eor	r9, r9
     7cc:	92 f8       	bld	r9, 2
     7ce:	e8 2e       	mov	r14, r24
     7d0:	f1 2c       	mov	r15, r1
     7d2:	c7 01       	movw	r24, r14
     7d4:	80 97       	sbiw	r24, 0x20	; 32
     7d6:	7c 01       	movw	r14, r24
     7d8:	ee 0c       	add	r14, r14
     7da:	ff 1c       	adc	r15, r15
     7dc:	ee 0c       	add	r14, r14
     7de:	ff 1c       	adc	r15, r15
     7e0:	e8 0e       	add	r14, r24
     7e2:	f9 1e       	adc	r15, r25
     7e4:	0f 2e       	mov	r0, r31
     7e6:	fa e4       	ldi	r31, 0x4A	; 74
     7e8:	af 2e       	mov	r10, r31
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	bf 2e       	mov	r11, r31
     7ee:	f0 2d       	mov	r31, r0
     7f0:	0f 2e       	mov	r0, r31
     7f2:	f8 e4       	ldi	r31, 0x48	; 72
     7f4:	cf 2e       	mov	r12, r31
     7f6:	f1 e0       	ldi	r31, 0x01	; 1
     7f8:	df 2e       	mov	r13, r31
     7fa:	f0 2d       	mov	r31, r0
     7fc:	f7 01       	movw	r30, r14
     7fe:	e9 0d       	add	r30, r9
     800:	f1 1d       	adc	r31, r1
     802:	e8 59       	subi	r30, 0x98	; 152
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	84 90       	lpm	r8, Z
     808:	c7 e0       	ldi	r28, 0x07	; 7
     80a:	88 20       	and	r8, r8
     80c:	ac f4       	brge	.+42     	; 0x838 <DrawChar+0x100>
     80e:	f5 01       	movw	r30, r10
     810:	60 81       	ld	r22, Z
     812:	dc 2f       	mov	r29, r28
     814:	dd 0f       	add	r29, r29
     816:	6d 0f       	add	r22, r29
     818:	f6 01       	movw	r30, r12
     81a:	80 81       	ld	r24, Z
     81c:	a2 01       	movw	r20, r4
     81e:	89 0d       	add	r24, r9
     820:	0e 94 8c 03 	call	0x718	; 0x718 <DrawPixel>
     824:	f5 01       	movw	r30, r10
     826:	60 81       	ld	r22, Z
     828:	6f 5f       	subi	r22, 0xFF	; 255
     82a:	6d 0f       	add	r22, r29
     82c:	f6 01       	movw	r30, r12
     82e:	80 81       	ld	r24, Z
     830:	a2 01       	movw	r20, r4
     832:	89 0d       	add	r24, r9
     834:	0e 94 8c 03 	call	0x718	; 0x718 <DrawPixel>
     838:	88 0c       	add	r8, r8
     83a:	c1 50       	subi	r28, 0x01	; 1
     83c:	30 f7       	brcc	.-52     	; 0x80a <DrawChar+0xd2>
     83e:	9a 94       	dec	r9
     840:	ff ef       	ldi	r31, 0xFF	; 255
     842:	9f 12       	cpse	r9, r31
     844:	db cf       	rjmp	.-74     	; 0x7fc <DrawChar+0xc4>
     846:	59 c0       	rjmp	.+178    	; 0x8fa <DrawChar+0x1c2>
     848:	4a 30       	cpi	r20, 0x0A	; 10
     84a:	09 f0       	breq	.+2      	; 0x84e <DrawChar+0x116>
     84c:	56 c0       	rjmp	.+172    	; 0x8fa <DrawChar+0x1c2>
     84e:	68 94       	set
     850:	ee 24       	eor	r14, r14
     852:	e2 f8       	bld	r14, 2
     854:	c8 2e       	mov	r12, r24
     856:	d1 2c       	mov	r13, r1
     858:	c6 01       	movw	r24, r12
     85a:	80 97       	sbiw	r24, 0x20	; 32
     85c:	6c 01       	movw	r12, r24
     85e:	cc 0c       	add	r12, r12
     860:	dd 1c       	adc	r13, r13
     862:	cc 0c       	add	r12, r12
     864:	dd 1c       	adc	r13, r13
     866:	c8 0e       	add	r12, r24
     868:	d9 1e       	adc	r13, r25
     86a:	0f 2e       	mov	r0, r31
     86c:	fa e4       	ldi	r31, 0x4A	; 74
     86e:	8f 2e       	mov	r8, r31
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	9f 2e       	mov	r9, r31
     874:	f0 2d       	mov	r31, r0
     876:	0f 2e       	mov	r0, r31
     878:	f8 e4       	ldi	r31, 0x48	; 72
     87a:	af 2e       	mov	r10, r31
     87c:	f1 e0       	ldi	r31, 0x01	; 1
     87e:	bf 2e       	mov	r11, r31
     880:	f0 2d       	mov	r31, r0
     882:	f6 01       	movw	r30, r12
     884:	ee 0d       	add	r30, r14
     886:	f1 1d       	adc	r31, r1
     888:	e8 59       	subi	r30, 0x98	; 152
     88a:	ff 4f       	sbci	r31, 0xFF	; 255
     88c:	c4 91       	lpm	r28, Z
     88e:	7e 2c       	mov	r7, r14
     890:	77 0c       	add	r7, r7
     892:	d7 e0       	ldi	r29, 0x07	; 7
     894:	cc 23       	and	r28, r28
     896:	54 f5       	brge	.+84     	; 0x8ec <DrawChar+0x1b4>
     898:	f4 01       	movw	r30, r8
     89a:	60 81       	ld	r22, Z
     89c:	fd 2e       	mov	r15, r29
     89e:	ff 0c       	add	r15, r15
     8a0:	6f 0d       	add	r22, r15
     8a2:	f5 01       	movw	r30, r10
     8a4:	80 81       	ld	r24, Z
     8a6:	a2 01       	movw	r20, r4
     8a8:	87 0d       	add	r24, r7
     8aa:	0e 94 8c 03 	call	0x718	; 0x718 <DrawPixel>
     8ae:	f4 01       	movw	r30, r8
     8b0:	60 81       	ld	r22, Z
     8b2:	6f 5f       	subi	r22, 0xFF	; 255
     8b4:	6f 0d       	add	r22, r15
     8b6:	f5 01       	movw	r30, r10
     8b8:	80 81       	ld	r24, Z
     8ba:	a2 01       	movw	r20, r4
     8bc:	87 0d       	add	r24, r7
     8be:	0e 94 8c 03 	call	0x718	; 0x718 <DrawPixel>
     8c2:	f4 01       	movw	r30, r8
     8c4:	60 81       	ld	r22, Z
     8c6:	6f 0d       	add	r22, r15
     8c8:	f5 01       	movw	r30, r10
     8ca:	80 81       	ld	r24, Z
     8cc:	8f 5f       	subi	r24, 0xFF	; 255
     8ce:	a2 01       	movw	r20, r4
     8d0:	87 0d       	add	r24, r7
     8d2:	0e 94 8c 03 	call	0x718	; 0x718 <DrawPixel>
     8d6:	f4 01       	movw	r30, r8
     8d8:	60 81       	ld	r22, Z
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	6f 0d       	add	r22, r15
     8de:	f5 01       	movw	r30, r10
     8e0:	80 81       	ld	r24, Z
     8e2:	8f 5f       	subi	r24, 0xFF	; 255
     8e4:	a2 01       	movw	r20, r4
     8e6:	87 0d       	add	r24, r7
     8e8:	0e 94 8c 03 	call	0x718	; 0x718 <DrawPixel>
     8ec:	cc 0f       	add	r28, r28
     8ee:	d1 50       	subi	r29, 0x01	; 1
     8f0:	88 f6       	brcc	.-94     	; 0x894 <DrawChar+0x15c>
     8f2:	ea 94       	dec	r14
     8f4:	ff ef       	ldi	r31, 0xFF	; 255
     8f6:	ef 12       	cpse	r14, r31
     8f8:	c4 cf       	rjmp	.-120    	; 0x882 <DrawChar+0x14a>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	df 91       	pop	r29
     8fe:	cf 91       	pop	r28
     900:	1f 91       	pop	r17
     902:	ff 90       	pop	r15
     904:	ef 90       	pop	r14
     906:	df 90       	pop	r13
     908:	cf 90       	pop	r12
     90a:	bf 90       	pop	r11
     90c:	af 90       	pop	r10
     90e:	9f 90       	pop	r9
     910:	8f 90       	pop	r8
     912:	7f 90       	pop	r7
     914:	5f 90       	pop	r5
     916:	4f 90       	pop	r4
     918:	08 95       	ret

0000091a <DrawString>:
     91a:	9f 92       	push	r9
     91c:	af 92       	push	r10
     91e:	bf 92       	push	r11
     920:	cf 92       	push	r12
     922:	df 92       	push	r13
     924:	ef 92       	push	r14
     926:	ff 92       	push	r15
     928:	0f 93       	push	r16
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	ec 01       	movw	r28, r24
     932:	88 81       	ld	r24, Y
     934:	88 23       	and	r24, r24
     936:	21 f1       	breq	.+72     	; 0x980 <DrawString+0x66>
     938:	a4 2e       	mov	r10, r20
     93a:	8b 01       	movw	r16, r22
     93c:	94 2e       	mov	r9, r20
     93e:	96 94       	lsr	r9
     940:	b1 2c       	mov	r11, r1
     942:	0f 2e       	mov	r0, r31
     944:	fa e4       	ldi	r31, 0x4A	; 74
     946:	cf 2e       	mov	r12, r31
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	df 2e       	mov	r13, r31
     94c:	f0 2d       	mov	r31, r0
     94e:	0f 2e       	mov	r0, r31
     950:	f8 e4       	ldi	r31, 0x48	; 72
     952:	ef 2e       	mov	r14, r31
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	ff 2e       	mov	r15, r31
     958:	f0 2d       	mov	r31, r0
     95a:	b3 94       	inc	r11
     95c:	4a 2d       	mov	r20, r10
     95e:	b8 01       	movw	r22, r16
     960:	0e 94 9c 03 	call	0x738	; 0x738 <DrawChar>
     964:	f7 01       	movw	r30, r14
     966:	80 81       	ld	r24, Z
     968:	8a 5f       	subi	r24, 0xFA	; 250
     96a:	f6 01       	movw	r30, r12
     96c:	60 81       	ld	r22, Z
     96e:	89 0d       	add	r24, r9
     970:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <SetPosition>
     974:	fe 01       	movw	r30, r28
     976:	eb 0d       	add	r30, r11
     978:	f1 1d       	adc	r31, r1
     97a:	80 81       	ld	r24, Z
     97c:	81 11       	cpse	r24, r1
     97e:	ed cf       	rjmp	.-38     	; 0x95a <DrawString+0x40>
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	bf 90       	pop	r11
     992:	af 90       	pop	r10
     994:	9f 90       	pop	r9
     996:	08 95       	ret

00000998 <ClearScreen>:

void ClearScreen(uint16_t color)
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	ec 01       	movw	r28, r24
  // set whole window
  SetWindow(0, SIZE_X, 0, SIZE_Y);
     99e:	23 e8       	ldi	r18, 0x83	; 131
     9a0:	40 e0       	ldi	r20, 0x00	; 0
     9a2:	61 ea       	ldi	r22, 0xA1	; 161
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	0e 94 2e 03 	call	0x65c	; 0x65c <SetWindow>
  // draw individual pixels 
  // CACHE_SIZE_MEM = SIZE_X * SIZE_Y
  SendColor565(color, CACHE_SIZE_MEM);
     9aa:	68 e8       	ldi	r22, 0x88	; 136
     9ac:	73 e5       	ldi	r23, 0x53	; 83
     9ae:	ce 01       	movw	r24, r28
     9b0:	0e 94 19 03 	call	0x632	; 0x632 <SendColor565>
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	08 95       	ret

000009ba <UpdateScreen>:

void UpdateScreen(void)
{
  // display on
  CommandSend(DISPON);
     9ba:	89 e2       	ldi	r24, 0x29	; 41
     9bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <CommandSend>
     9c0:	08 95       	ret

000009c2 <DelayMs>:
}

void DelayMs(uint8_t time)
{
  // loop through real time
  while (time--) {
     9c2:	88 23       	and	r24, r24
     9c4:	41 f0       	breq	.+16     	; 0x9d6 <DelayMs+0x14>
     9c6:	ef e9       	ldi	r30, 0x9F	; 159
     9c8:	ff e0       	ldi	r31, 0x0F	; 15
     9ca:	31 97       	sbiw	r30, 0x01	; 1
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <DelayMs+0x8>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <DelayMs+0xe>
     9d0:	00 00       	nop
     9d2:	81 50       	subi	r24, 0x01	; 1
     9d4:	c1 f7       	brne	.-16     	; 0x9c6 <DelayMs+0x4>
     9d6:	08 95       	ret

000009d8 <St7735Commands>:
 *
 * @param const uint8_t *
 * @return void
 */
void St7735Commands(const uint8_t *commands)
{
     9d8:	cf 92       	push	r12
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	cf 93       	push	r28
     9e6:	df 93       	push	r29
  uint8_t milliseconds;
  uint8_t numOfCommands;
  uint8_t numOfArguments;

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
     9e8:	7c 01       	movw	r14, r24
     9ea:	2f ef       	ldi	r18, 0xFF	; 255
     9ec:	e2 1a       	sub	r14, r18
     9ee:	f2 0a       	sbc	r15, r18
     9f0:	fc 01       	movw	r30, r24
     9f2:	d4 90       	lpm	r13, Z
  
  // loop through whole command list
  while (numOfCommands--) {
     9f4:	2d c0       	rjmp	.+90     	; 0xa50 <St7735Commands+0x78>
    // send command
    CommandSend(pgm_read_byte(commands++));
     9f6:	f7 01       	movw	r30, r14
     9f8:	84 91       	lpm	r24, Z
     9fa:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <CommandSend>
    // read number of arguments
    numOfArguments = pgm_read_byte(commands++);
     9fe:	f7 01       	movw	r30, r14
     a00:	31 96       	adiw	r30, 0x01	; 1
     a02:	e4 91       	lpm	r30, Z
     a04:	f2 e0       	ldi	r31, 0x02	; 2
     a06:	ef 0e       	add	r14, r31
     a08:	f1 1c       	adc	r15, r1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
     a0a:	2e 2f       	mov	r18, r30
     a0c:	20 78       	andi	r18, 0x80	; 128
     a0e:	c2 2e       	mov	r12, r18
    // remove delay flag
    numOfArguments &= ~DELAY;
     a10:	ef 77       	andi	r30, 0x7F	; 127
    // loop through number of arguments
    while (numOfArguments--) {
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	8e 0f       	add	r24, r30
     a16:	ee 23       	and	r30, r30
     a18:	89 f0       	breq	.+34     	; 0xa3c <St7735Commands+0x64>
     a1a:	3e 2d       	mov	r19, r14
     a1c:	2f 2d       	mov	r18, r15
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	e8 0e       	add	r14, r24
     a24:	f9 1e       	adc	r15, r25
     a26:	87 01       	movw	r16, r14
     a28:	c3 2f       	mov	r28, r19
     a2a:	d2 2f       	mov	r29, r18
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
     a2c:	fe 01       	movw	r30, r28
     a2e:	84 91       	lpm	r24, Z
     a30:	0e 94 03 03 	call	0x606	; 0x606 <Data8BitsSend>
     a34:	21 96       	adiw	r28, 0x01	; 1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
    // remove delay flag
    numOfArguments &= ~DELAY;
    // loop through number of arguments
    while (numOfArguments--) {
     a36:	c0 17       	cp	r28, r16
     a38:	d1 07       	cpc	r29, r17
     a3a:	c1 f7       	brne	.-16     	; 0xa2c <St7735Commands+0x54>
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
     a3c:	cc 20       	and	r12, r12
     a3e:	39 f0       	breq	.+14     	; 0xa4e <St7735Commands+0x76>
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
     a40:	e7 01       	movw	r28, r14
     a42:	21 96       	adiw	r28, 0x01	; 1
     a44:	f7 01       	movw	r30, r14
     a46:	84 91       	lpm	r24, Z
      // delay
      DelayMs(milliseconds);
     a48:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <DelayMs>
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
     a4c:	7e 01       	movw	r14, r28
     a4e:	da 94       	dec	r13

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
  
  // loop through whole command list
  while (numOfCommands--) {
     a50:	d1 10       	cpse	r13, r1
     a52:	d1 cf       	rjmp	.-94     	; 0x9f6 <St7735Commands+0x1e>
      milliseconds = pgm_read_byte(commands++);
      // delay
      DelayMs(milliseconds);
    }
  }
}
     a54:	df 91       	pop	r29
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	df 90       	pop	r13
     a62:	cf 90       	pop	r12
     a64:	08 95       	ret

00000a66 <St7735Init>:


void St7735Init(void)
{
  // hardware reset
  HardwareReset();
     a66:	0e 94 db 02 	call	0x5b6	; 0x5b6 <HardwareReset>
  // init spi
  SpiInit();
     a6a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SpiInit>
  // load list of commands
  St7735Commands(INIT_ST7735B);
     a6e:	88 e4       	ldi	r24, 0x48	; 72
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <St7735Commands>
     a76:	08 95       	ret

00000a78 <tecladoInit>:


void tecladoInit(void)
{
	//OUTPUTS
	DDRC |= (1 << DDC0) | (1 << DDC1);
     a78:	87 b1       	in	r24, 0x07	; 7
     a7a:	83 60       	ori	r24, 0x03	; 3
     a7c:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << DDD2) | (1 << DDD3);
     a7e:	8a b1       	in	r24, 0x0a	; 10
     a80:	8c 60       	ori	r24, 0x0C	; 12
     a82:	8a b9       	out	0x0a, r24	; 10
	
	//INPUTS
	DDRC &= ~((1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5));
     a84:	87 b1       	in	r24, 0x07	; 7
     a86:	83 7c       	andi	r24, 0xC3	; 195
     a88:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~((1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7));
     a8a:	8a b1       	in	r24, 0x0a	; 10
     a8c:	8f 70       	andi	r24, 0x0F	; 15
     a8e:	8a b9       	out	0x0a, r24	; 10
	
	//PULL-UP
	PORTC |= (1 << PORTC2) | (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5);
     a90:	88 b1       	in	r24, 0x08	; 8
     a92:	8c 63       	ori	r24, 0x3C	; 60
     a94:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);
     a96:	8b b1       	in	r24, 0x0b	; 11
     a98:	80 6f       	ori	r24, 0xF0	; 240
     a9a:	8b b9       	out	0x0b, r24	; 11
	
	//OUTPUTS HIGH (neutro)
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
     a9c:	88 b1       	in	r24, 0x08	; 8
     a9e:	83 60       	ori	r24, 0x03	; 3
     aa0:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PORTD2) | (1 << PORTC3);
     aa2:	8b b1       	in	r24, 0x0b	; 11
     aa4:	8c 60       	ori	r24, 0x0C	; 12
     aa6:	8b b9       	out	0x0b, r24	; 11
	
	PCMSK1 |= 0x3C; //PC2,3,4,5
     aa8:	ec e6       	ldi	r30, 0x6C	; 108
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	80 81       	ld	r24, Z
     aae:	8c 63       	ori	r24, 0x3C	; 60
     ab0:	80 83       	st	Z, r24
	PCMSK2 |= 0xF0; //PD4,5,6,7
     ab2:	ed e6       	ldi	r30, 0x6D	; 109
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	80 81       	ld	r24, Z
     ab8:	80 6f       	ori	r24, 0xF0	; 240
     aba:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1) | (1<<PCIE2);   //interrupts de cambio habilitados
     abc:	e8 e6       	ldi	r30, 0x68	; 104
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	86 60       	ori	r24, 0x06	; 6
     ac4:	80 83       	st	Z, r24
     ac6:	08 95       	ret

00000ac8 <USART_Transmit_char>:
	

void USART_Transmit_char( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
     ac8:	e0 ec       	ldi	r30, 0xC0	; 192
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	90 81       	ld	r25, Z
     ace:	95 ff       	sbrs	r25, 5
     ad0:	fd cf       	rjmp	.-6      	; 0xacc <USART_Transmit_char+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     ad2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     ad6:	08 95       	ret

00000ad8 <USART_Transmit_String>:
}

void USART_Transmit_String(char* StringPtr){
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
     ade:	88 81       	ld	r24, Y
     ae0:	88 23       	and	r24, r24
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <USART_Transmit_String+0x18>
     ae4:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_char(*StringPtr);
     ae6:	0e 94 64 05 	call	0xac8	; 0xac8 <USART_Transmit_char>
	/* Put data into buffer, sends the data */
	UDR0 = data;
}

void USART_Transmit_String(char* StringPtr){
	while(*StringPtr != 0x00){
     aea:	89 91       	ld	r24, Y+
     aec:	81 11       	cpse	r24, r1
     aee:	fb cf       	rjmp	.-10     	; 0xae6 <USART_Transmit_String+0xe>
		USART_Transmit_char(*StringPtr);
		StringPtr++;
	}
}
     af0:	df 91       	pop	r29
     af2:	cf 91       	pop	r28
     af4:	08 95       	ret

00000af6 <mostrar>:
	PCICR |= (1<<PCIE1) | (1<<PCIE2);   //interrupts de cambio habilitados
}


void mostrar(int presionado) //interpretacion de seleccion, mapea input
{
     af6:	ff 92       	push	r15
     af8:	0f 93       	push	r16
     afa:	1f 93       	push	r17
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	cd b7       	in	r28, 0x3d	; 61
     b02:	de b7       	in	r29, 0x3e	; 62
     b04:	a1 97       	sbiw	r28, 0x21	; 33
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
	//presionado es el input
	//mapear presionado con respectiva entrada en entradas
	//cambiar orden en este string segun se necesite
	char entradas[31] = "m123456789.+-*/^qlesctgxpofa0dn=";
     b10:	2f e1       	ldi	r18, 0x1F	; 31
     b12:	e0 e0       	ldi	r30, 0x00	; 0
     b14:	f1 e0       	ldi	r31, 0x01	; 1
     b16:	de 01       	movw	r26, r28
     b18:	11 96       	adiw	r26, 0x01	; 1
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	2a 95       	dec	r18
     b20:	e1 f7       	brne	.-8      	; 0xb1a <mostrar+0x24>
	char ent = entradas[presionado];
     b22:	e1 e0       	ldi	r30, 0x01	; 1
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	ec 0f       	add	r30, r28
     b28:	fd 1f       	adc	r31, r29
     b2a:	e8 0f       	add	r30, r24
     b2c:	f9 1f       	adc	r31, r25
     b2e:	f0 80       	ld	r15, Z
	//calculadora(entrada); //le pasa la entrada a la calculadora
	
	//FIN OCUPADO
	//MOSTRAR PRESIONADO POR USART (por ahora)
	char str[2];
	sprintf(str, "%d", presionado);
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	8a e3       	ldi	r24, 0x3A	; 58
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	8e 01       	movw	r16, r28
     b3e:	00 5e       	subi	r16, 0xE0	; 224
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	1f 93       	push	r17
     b44:	0f 93       	push	r16
     b46:	0e 94 cf 05 	call	0xb9e	; 0xb9e <sprintf>
	USART_Transmit_String(str);
     b4a:	c8 01       	movw	r24, r16
     b4c:	0e 94 6c 05 	call	0xad8	; 0xad8 <USART_Transmit_String>
	USART_Transmit_String(" -> ");
     b50:	8d e3       	ldi	r24, 0x3D	; 61
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	0e 94 6c 05 	call	0xad8	; 0xad8 <USART_Transmit_String>
	USART_Transmit_char(ent);
     b58:	8f 2d       	mov	r24, r15
     b5a:	0e 94 64 05 	call	0xac8	; 0xac8 <USART_Transmit_char>
	USART_Transmit_char('\n');
     b5e:	8a e0       	ldi	r24, 0x0A	; 10
     b60:	0e 94 64 05 	call	0xac8	; 0xac8 <USART_Transmit_char>
	}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	a1 96       	adiw	r28, 0x21	; 33
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	08 95       	ret

00000b88 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
     b88:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
     b8c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);			//habilitamos tx y rx
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);					//decimos cuantos stopbit queremos y que data -> 8bits, 1stpobit
     b96:	86 e0       	ldi	r24, 0x06	; 6
     b98:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     b9c:	08 95       	ret

00000b9e <sprintf>:
     b9e:	ae e0       	ldi	r26, 0x0E	; 14
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e5 ed       	ldi	r30, 0xD5	; 213
     ba4:	f5 e0       	ldi	r31, 0x05	; 5
     ba6:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__prologue_saves__+0x1c>
     baa:	0d 89       	ldd	r16, Y+21	; 0x15
     bac:	1e 89       	ldd	r17, Y+22	; 0x16
     bae:	86 e0       	ldi	r24, 0x06	; 6
     bb0:	8c 83       	std	Y+4, r24	; 0x04
     bb2:	1a 83       	std	Y+2, r17	; 0x02
     bb4:	09 83       	std	Y+1, r16	; 0x01
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	9f e7       	ldi	r25, 0x7F	; 127
     bba:	9e 83       	std	Y+6, r25	; 0x06
     bbc:	8d 83       	std	Y+5, r24	; 0x05
     bbe:	ae 01       	movw	r20, r28
     bc0:	47 5e       	subi	r20, 0xE7	; 231
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	6f 89       	ldd	r22, Y+23	; 0x17
     bc6:	78 8d       	ldd	r23, Y+24	; 0x18
     bc8:	ce 01       	movw	r24, r28
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <vfprintf>
     bd0:	ef 81       	ldd	r30, Y+7	; 0x07
     bd2:	f8 85       	ldd	r31, Y+8	; 0x08
     bd4:	e0 0f       	add	r30, r16
     bd6:	f1 1f       	adc	r31, r17
     bd8:	10 82       	st	Z, r1
     bda:	2e 96       	adiw	r28, 0x0e	; 14
     bdc:	e4 e0       	ldi	r30, 0x04	; 4
     bde:	0c 94 ac 08 	jmp	0x1158	; 0x1158 <__epilogue_restores__+0x1c>

00000be2 <vfprintf>:
     be2:	ab e0       	ldi	r26, 0x0B	; 11
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e7 ef       	ldi	r30, 0xF7	; 247
     be8:	f5 e0       	ldi	r31, 0x05	; 5
     bea:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__prologue_saves__>
     bee:	6c 01       	movw	r12, r24
     bf0:	7b 01       	movw	r14, r22
     bf2:	8a 01       	movw	r16, r20
     bf4:	fc 01       	movw	r30, r24
     bf6:	17 82       	std	Z+7, r1	; 0x07
     bf8:	16 82       	std	Z+6, r1	; 0x06
     bfa:	83 81       	ldd	r24, Z+3	; 0x03
     bfc:	81 ff       	sbrs	r24, 1
     bfe:	cc c1       	rjmp	.+920    	; 0xf98 <vfprintf+0x3b6>
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	3c 01       	movw	r6, r24
     c06:	f6 01       	movw	r30, r12
     c08:	93 81       	ldd	r25, Z+3	; 0x03
     c0a:	f7 01       	movw	r30, r14
     c0c:	93 fd       	sbrc	r25, 3
     c0e:	85 91       	lpm	r24, Z+
     c10:	93 ff       	sbrs	r25, 3
     c12:	81 91       	ld	r24, Z+
     c14:	7f 01       	movw	r14, r30
     c16:	88 23       	and	r24, r24
     c18:	09 f4       	brne	.+2      	; 0xc1c <vfprintf+0x3a>
     c1a:	ba c1       	rjmp	.+884    	; 0xf90 <vfprintf+0x3ae>
     c1c:	85 32       	cpi	r24, 0x25	; 37
     c1e:	39 f4       	brne	.+14     	; 0xc2e <vfprintf+0x4c>
     c20:	93 fd       	sbrc	r25, 3
     c22:	85 91       	lpm	r24, Z+
     c24:	93 ff       	sbrs	r25, 3
     c26:	81 91       	ld	r24, Z+
     c28:	7f 01       	movw	r14, r30
     c2a:	85 32       	cpi	r24, 0x25	; 37
     c2c:	29 f4       	brne	.+10     	; 0xc38 <vfprintf+0x56>
     c2e:	b6 01       	movw	r22, r12
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     c36:	e7 cf       	rjmp	.-50     	; 0xc06 <vfprintf+0x24>
     c38:	91 2c       	mov	r9, r1
     c3a:	21 2c       	mov	r2, r1
     c3c:	31 2c       	mov	r3, r1
     c3e:	ff e1       	ldi	r31, 0x1F	; 31
     c40:	f3 15       	cp	r31, r3
     c42:	d8 f0       	brcs	.+54     	; 0xc7a <vfprintf+0x98>
     c44:	8b 32       	cpi	r24, 0x2B	; 43
     c46:	79 f0       	breq	.+30     	; 0xc66 <vfprintf+0x84>
     c48:	38 f4       	brcc	.+14     	; 0xc58 <vfprintf+0x76>
     c4a:	80 32       	cpi	r24, 0x20	; 32
     c4c:	79 f0       	breq	.+30     	; 0xc6c <vfprintf+0x8a>
     c4e:	83 32       	cpi	r24, 0x23	; 35
     c50:	a1 f4       	brne	.+40     	; 0xc7a <vfprintf+0x98>
     c52:	23 2d       	mov	r18, r3
     c54:	20 61       	ori	r18, 0x10	; 16
     c56:	1d c0       	rjmp	.+58     	; 0xc92 <vfprintf+0xb0>
     c58:	8d 32       	cpi	r24, 0x2D	; 45
     c5a:	61 f0       	breq	.+24     	; 0xc74 <vfprintf+0x92>
     c5c:	80 33       	cpi	r24, 0x30	; 48
     c5e:	69 f4       	brne	.+26     	; 0xc7a <vfprintf+0x98>
     c60:	23 2d       	mov	r18, r3
     c62:	21 60       	ori	r18, 0x01	; 1
     c64:	16 c0       	rjmp	.+44     	; 0xc92 <vfprintf+0xb0>
     c66:	83 2d       	mov	r24, r3
     c68:	82 60       	ori	r24, 0x02	; 2
     c6a:	38 2e       	mov	r3, r24
     c6c:	e3 2d       	mov	r30, r3
     c6e:	e4 60       	ori	r30, 0x04	; 4
     c70:	3e 2e       	mov	r3, r30
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <vfprintf+0xe6>
     c74:	f3 2d       	mov	r31, r3
     c76:	f8 60       	ori	r31, 0x08	; 8
     c78:	1d c0       	rjmp	.+58     	; 0xcb4 <vfprintf+0xd2>
     c7a:	37 fc       	sbrc	r3, 7
     c7c:	2d c0       	rjmp	.+90     	; 0xcd8 <vfprintf+0xf6>
     c7e:	20 ed       	ldi	r18, 0xD0	; 208
     c80:	28 0f       	add	r18, r24
     c82:	2a 30       	cpi	r18, 0x0A	; 10
     c84:	40 f0       	brcs	.+16     	; 0xc96 <vfprintf+0xb4>
     c86:	8e 32       	cpi	r24, 0x2E	; 46
     c88:	b9 f4       	brne	.+46     	; 0xcb8 <vfprintf+0xd6>
     c8a:	36 fc       	sbrc	r3, 6
     c8c:	81 c1       	rjmp	.+770    	; 0xf90 <vfprintf+0x3ae>
     c8e:	23 2d       	mov	r18, r3
     c90:	20 64       	ori	r18, 0x40	; 64
     c92:	32 2e       	mov	r3, r18
     c94:	19 c0       	rjmp	.+50     	; 0xcc8 <vfprintf+0xe6>
     c96:	36 fe       	sbrs	r3, 6
     c98:	06 c0       	rjmp	.+12     	; 0xca6 <vfprintf+0xc4>
     c9a:	8a e0       	ldi	r24, 0x0A	; 10
     c9c:	98 9e       	mul	r9, r24
     c9e:	20 0d       	add	r18, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	92 2e       	mov	r9, r18
     ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <vfprintf+0xe6>
     ca6:	ea e0       	ldi	r30, 0x0A	; 10
     ca8:	2e 9e       	mul	r2, r30
     caa:	20 0d       	add	r18, r0
     cac:	11 24       	eor	r1, r1
     cae:	22 2e       	mov	r2, r18
     cb0:	f3 2d       	mov	r31, r3
     cb2:	f0 62       	ori	r31, 0x20	; 32
     cb4:	3f 2e       	mov	r3, r31
     cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <vfprintf+0xe6>
     cb8:	8c 36       	cpi	r24, 0x6C	; 108
     cba:	21 f4       	brne	.+8      	; 0xcc4 <vfprintf+0xe2>
     cbc:	83 2d       	mov	r24, r3
     cbe:	80 68       	ori	r24, 0x80	; 128
     cc0:	38 2e       	mov	r3, r24
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <vfprintf+0xe6>
     cc4:	88 36       	cpi	r24, 0x68	; 104
     cc6:	41 f4       	brne	.+16     	; 0xcd8 <vfprintf+0xf6>
     cc8:	f7 01       	movw	r30, r14
     cca:	93 fd       	sbrc	r25, 3
     ccc:	85 91       	lpm	r24, Z+
     cce:	93 ff       	sbrs	r25, 3
     cd0:	81 91       	ld	r24, Z+
     cd2:	7f 01       	movw	r14, r30
     cd4:	81 11       	cpse	r24, r1
     cd6:	b3 cf       	rjmp	.-154    	; 0xc3e <vfprintf+0x5c>
     cd8:	98 2f       	mov	r25, r24
     cda:	9f 7d       	andi	r25, 0xDF	; 223
     cdc:	95 54       	subi	r25, 0x45	; 69
     cde:	93 30       	cpi	r25, 0x03	; 3
     ce0:	28 f4       	brcc	.+10     	; 0xcec <vfprintf+0x10a>
     ce2:	0c 5f       	subi	r16, 0xFC	; 252
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	9f e3       	ldi	r25, 0x3F	; 63
     ce8:	99 83       	std	Y+1, r25	; 0x01
     cea:	0d c0       	rjmp	.+26     	; 0xd06 <vfprintf+0x124>
     cec:	83 36       	cpi	r24, 0x63	; 99
     cee:	31 f0       	breq	.+12     	; 0xcfc <vfprintf+0x11a>
     cf0:	83 37       	cpi	r24, 0x73	; 115
     cf2:	71 f0       	breq	.+28     	; 0xd10 <vfprintf+0x12e>
     cf4:	83 35       	cpi	r24, 0x53	; 83
     cf6:	09 f0       	breq	.+2      	; 0xcfa <vfprintf+0x118>
     cf8:	59 c0       	rjmp	.+178    	; 0xdac <vfprintf+0x1ca>
     cfa:	21 c0       	rjmp	.+66     	; 0xd3e <vfprintf+0x15c>
     cfc:	f8 01       	movw	r30, r16
     cfe:	80 81       	ld	r24, Z
     d00:	89 83       	std	Y+1, r24	; 0x01
     d02:	0e 5f       	subi	r16, 0xFE	; 254
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	88 24       	eor	r8, r8
     d08:	83 94       	inc	r8
     d0a:	91 2c       	mov	r9, r1
     d0c:	53 01       	movw	r10, r6
     d0e:	13 c0       	rjmp	.+38     	; 0xd36 <vfprintf+0x154>
     d10:	28 01       	movw	r4, r16
     d12:	f2 e0       	ldi	r31, 0x02	; 2
     d14:	4f 0e       	add	r4, r31
     d16:	51 1c       	adc	r5, r1
     d18:	f8 01       	movw	r30, r16
     d1a:	a0 80       	ld	r10, Z
     d1c:	b1 80       	ldd	r11, Z+1	; 0x01
     d1e:	36 fe       	sbrs	r3, 6
     d20:	03 c0       	rjmp	.+6      	; 0xd28 <vfprintf+0x146>
     d22:	69 2d       	mov	r22, r9
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <vfprintf+0x14a>
     d28:	6f ef       	ldi	r22, 0xFF	; 255
     d2a:	7f ef       	ldi	r23, 0xFF	; 255
     d2c:	c5 01       	movw	r24, r10
     d2e:	0e 94 dd 07 	call	0xfba	; 0xfba <strnlen>
     d32:	4c 01       	movw	r8, r24
     d34:	82 01       	movw	r16, r4
     d36:	f3 2d       	mov	r31, r3
     d38:	ff 77       	andi	r31, 0x7F	; 127
     d3a:	3f 2e       	mov	r3, r31
     d3c:	16 c0       	rjmp	.+44     	; 0xd6a <vfprintf+0x188>
     d3e:	28 01       	movw	r4, r16
     d40:	22 e0       	ldi	r18, 0x02	; 2
     d42:	42 0e       	add	r4, r18
     d44:	51 1c       	adc	r5, r1
     d46:	f8 01       	movw	r30, r16
     d48:	a0 80       	ld	r10, Z
     d4a:	b1 80       	ldd	r11, Z+1	; 0x01
     d4c:	36 fe       	sbrs	r3, 6
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <vfprintf+0x174>
     d50:	69 2d       	mov	r22, r9
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <vfprintf+0x178>
     d56:	6f ef       	ldi	r22, 0xFF	; 255
     d58:	7f ef       	ldi	r23, 0xFF	; 255
     d5a:	c5 01       	movw	r24, r10
     d5c:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <strnlen_P>
     d60:	4c 01       	movw	r8, r24
     d62:	f3 2d       	mov	r31, r3
     d64:	f0 68       	ori	r31, 0x80	; 128
     d66:	3f 2e       	mov	r3, r31
     d68:	82 01       	movw	r16, r4
     d6a:	33 fc       	sbrc	r3, 3
     d6c:	1b c0       	rjmp	.+54     	; 0xda4 <vfprintf+0x1c2>
     d6e:	82 2d       	mov	r24, r2
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	88 16       	cp	r8, r24
     d74:	99 06       	cpc	r9, r25
     d76:	b0 f4       	brcc	.+44     	; 0xda4 <vfprintf+0x1c2>
     d78:	b6 01       	movw	r22, r12
     d7a:	80 e2       	ldi	r24, 0x20	; 32
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     d82:	2a 94       	dec	r2
     d84:	f4 cf       	rjmp	.-24     	; 0xd6e <vfprintf+0x18c>
     d86:	f5 01       	movw	r30, r10
     d88:	37 fc       	sbrc	r3, 7
     d8a:	85 91       	lpm	r24, Z+
     d8c:	37 fe       	sbrs	r3, 7
     d8e:	81 91       	ld	r24, Z+
     d90:	5f 01       	movw	r10, r30
     d92:	b6 01       	movw	r22, r12
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     d9a:	21 10       	cpse	r2, r1
     d9c:	2a 94       	dec	r2
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	82 1a       	sub	r8, r18
     da2:	91 08       	sbc	r9, r1
     da4:	81 14       	cp	r8, r1
     da6:	91 04       	cpc	r9, r1
     da8:	71 f7       	brne	.-36     	; 0xd86 <vfprintf+0x1a4>
     daa:	e8 c0       	rjmp	.+464    	; 0xf7c <vfprintf+0x39a>
     dac:	84 36       	cpi	r24, 0x64	; 100
     dae:	11 f0       	breq	.+4      	; 0xdb4 <vfprintf+0x1d2>
     db0:	89 36       	cpi	r24, 0x69	; 105
     db2:	41 f5       	brne	.+80     	; 0xe04 <vfprintf+0x222>
     db4:	f8 01       	movw	r30, r16
     db6:	37 fe       	sbrs	r3, 7
     db8:	07 c0       	rjmp	.+14     	; 0xdc8 <vfprintf+0x1e6>
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	0c 5f       	subi	r16, 0xFC	; 252
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
     dc6:	08 c0       	rjmp	.+16     	; 0xdd8 <vfprintf+0x1f6>
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	07 2e       	mov	r0, r23
     dce:	00 0c       	add	r0, r0
     dd0:	88 0b       	sbc	r24, r24
     dd2:	99 0b       	sbc	r25, r25
     dd4:	0e 5f       	subi	r16, 0xFE	; 254
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	f3 2d       	mov	r31, r3
     dda:	ff 76       	andi	r31, 0x6F	; 111
     ddc:	3f 2e       	mov	r3, r31
     dde:	97 ff       	sbrs	r25, 7
     de0:	09 c0       	rjmp	.+18     	; 0xdf4 <vfprintf+0x212>
     de2:	90 95       	com	r25
     de4:	80 95       	com	r24
     de6:	70 95       	com	r23
     de8:	61 95       	neg	r22
     dea:	7f 4f       	sbci	r23, 0xFF	; 255
     dec:	8f 4f       	sbci	r24, 0xFF	; 255
     dee:	9f 4f       	sbci	r25, 0xFF	; 255
     df0:	f0 68       	ori	r31, 0x80	; 128
     df2:	3f 2e       	mov	r3, r31
     df4:	2a e0       	ldi	r18, 0x0A	; 10
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	a3 01       	movw	r20, r6
     dfa:	0e 94 24 08 	call	0x1048	; 0x1048 <__ultoa_invert>
     dfe:	88 2e       	mov	r8, r24
     e00:	86 18       	sub	r8, r6
     e02:	45 c0       	rjmp	.+138    	; 0xe8e <vfprintf+0x2ac>
     e04:	85 37       	cpi	r24, 0x75	; 117
     e06:	31 f4       	brne	.+12     	; 0xe14 <vfprintf+0x232>
     e08:	23 2d       	mov	r18, r3
     e0a:	2f 7e       	andi	r18, 0xEF	; 239
     e0c:	b2 2e       	mov	r11, r18
     e0e:	2a e0       	ldi	r18, 0x0A	; 10
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	25 c0       	rjmp	.+74     	; 0xe5e <vfprintf+0x27c>
     e14:	93 2d       	mov	r25, r3
     e16:	99 7f       	andi	r25, 0xF9	; 249
     e18:	b9 2e       	mov	r11, r25
     e1a:	8f 36       	cpi	r24, 0x6F	; 111
     e1c:	c1 f0       	breq	.+48     	; 0xe4e <vfprintf+0x26c>
     e1e:	18 f4       	brcc	.+6      	; 0xe26 <vfprintf+0x244>
     e20:	88 35       	cpi	r24, 0x58	; 88
     e22:	79 f0       	breq	.+30     	; 0xe42 <vfprintf+0x260>
     e24:	b5 c0       	rjmp	.+362    	; 0xf90 <vfprintf+0x3ae>
     e26:	80 37       	cpi	r24, 0x70	; 112
     e28:	19 f0       	breq	.+6      	; 0xe30 <vfprintf+0x24e>
     e2a:	88 37       	cpi	r24, 0x78	; 120
     e2c:	21 f0       	breq	.+8      	; 0xe36 <vfprintf+0x254>
     e2e:	b0 c0       	rjmp	.+352    	; 0xf90 <vfprintf+0x3ae>
     e30:	e9 2f       	mov	r30, r25
     e32:	e0 61       	ori	r30, 0x10	; 16
     e34:	be 2e       	mov	r11, r30
     e36:	b4 fe       	sbrs	r11, 4
     e38:	0d c0       	rjmp	.+26     	; 0xe54 <vfprintf+0x272>
     e3a:	fb 2d       	mov	r31, r11
     e3c:	f4 60       	ori	r31, 0x04	; 4
     e3e:	bf 2e       	mov	r11, r31
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <vfprintf+0x272>
     e42:	34 fe       	sbrs	r3, 4
     e44:	0a c0       	rjmp	.+20     	; 0xe5a <vfprintf+0x278>
     e46:	29 2f       	mov	r18, r25
     e48:	26 60       	ori	r18, 0x06	; 6
     e4a:	b2 2e       	mov	r11, r18
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <vfprintf+0x278>
     e4e:	28 e0       	ldi	r18, 0x08	; 8
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <vfprintf+0x27c>
     e54:	20 e1       	ldi	r18, 0x10	; 16
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <vfprintf+0x27c>
     e5a:	20 e1       	ldi	r18, 0x10	; 16
     e5c:	32 e0       	ldi	r19, 0x02	; 2
     e5e:	f8 01       	movw	r30, r16
     e60:	b7 fe       	sbrs	r11, 7
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <vfprintf+0x290>
     e64:	60 81       	ld	r22, Z
     e66:	71 81       	ldd	r23, Z+1	; 0x01
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	0c 5f       	subi	r16, 0xFC	; 252
     e6e:	1f 4f       	sbci	r17, 0xFF	; 255
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0x29c>
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 5f       	subi	r16, 0xFE	; 254
     e7c:	1f 4f       	sbci	r17, 0xFF	; 255
     e7e:	a3 01       	movw	r20, r6
     e80:	0e 94 24 08 	call	0x1048	; 0x1048 <__ultoa_invert>
     e84:	88 2e       	mov	r8, r24
     e86:	86 18       	sub	r8, r6
     e88:	fb 2d       	mov	r31, r11
     e8a:	ff 77       	andi	r31, 0x7F	; 127
     e8c:	3f 2e       	mov	r3, r31
     e8e:	36 fe       	sbrs	r3, 6
     e90:	0d c0       	rjmp	.+26     	; 0xeac <vfprintf+0x2ca>
     e92:	23 2d       	mov	r18, r3
     e94:	2e 7f       	andi	r18, 0xFE	; 254
     e96:	a2 2e       	mov	r10, r18
     e98:	89 14       	cp	r8, r9
     e9a:	58 f4       	brcc	.+22     	; 0xeb2 <vfprintf+0x2d0>
     e9c:	34 fe       	sbrs	r3, 4
     e9e:	0b c0       	rjmp	.+22     	; 0xeb6 <vfprintf+0x2d4>
     ea0:	32 fc       	sbrc	r3, 2
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <vfprintf+0x2d4>
     ea4:	83 2d       	mov	r24, r3
     ea6:	8e 7e       	andi	r24, 0xEE	; 238
     ea8:	a8 2e       	mov	r10, r24
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <vfprintf+0x2d4>
     eac:	b8 2c       	mov	r11, r8
     eae:	a3 2c       	mov	r10, r3
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <vfprintf+0x2d6>
     eb2:	b8 2c       	mov	r11, r8
     eb4:	01 c0       	rjmp	.+2      	; 0xeb8 <vfprintf+0x2d6>
     eb6:	b9 2c       	mov	r11, r9
     eb8:	a4 fe       	sbrs	r10, 4
     eba:	0f c0       	rjmp	.+30     	; 0xeda <vfprintf+0x2f8>
     ebc:	fe 01       	movw	r30, r28
     ebe:	e8 0d       	add	r30, r8
     ec0:	f1 1d       	adc	r31, r1
     ec2:	80 81       	ld	r24, Z
     ec4:	80 33       	cpi	r24, 0x30	; 48
     ec6:	21 f4       	brne	.+8      	; 0xed0 <vfprintf+0x2ee>
     ec8:	9a 2d       	mov	r25, r10
     eca:	99 7e       	andi	r25, 0xE9	; 233
     ecc:	a9 2e       	mov	r10, r25
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <vfprintf+0x300>
     ed0:	a2 fe       	sbrs	r10, 2
     ed2:	06 c0       	rjmp	.+12     	; 0xee0 <vfprintf+0x2fe>
     ed4:	b3 94       	inc	r11
     ed6:	b3 94       	inc	r11
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <vfprintf+0x300>
     eda:	8a 2d       	mov	r24, r10
     edc:	86 78       	andi	r24, 0x86	; 134
     ede:	09 f0       	breq	.+2      	; 0xee2 <vfprintf+0x300>
     ee0:	b3 94       	inc	r11
     ee2:	a3 fc       	sbrc	r10, 3
     ee4:	11 c0       	rjmp	.+34     	; 0xf08 <vfprintf+0x326>
     ee6:	a0 fe       	sbrs	r10, 0
     ee8:	06 c0       	rjmp	.+12     	; 0xef6 <vfprintf+0x314>
     eea:	b2 14       	cp	r11, r2
     eec:	88 f4       	brcc	.+34     	; 0xf10 <vfprintf+0x32e>
     eee:	28 0c       	add	r2, r8
     ef0:	92 2c       	mov	r9, r2
     ef2:	9b 18       	sub	r9, r11
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <vfprintf+0x330>
     ef6:	b2 14       	cp	r11, r2
     ef8:	60 f4       	brcc	.+24     	; 0xf12 <vfprintf+0x330>
     efa:	b6 01       	movw	r22, r12
     efc:	80 e2       	ldi	r24, 0x20	; 32
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     f04:	b3 94       	inc	r11
     f06:	f7 cf       	rjmp	.-18     	; 0xef6 <vfprintf+0x314>
     f08:	b2 14       	cp	r11, r2
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <vfprintf+0x330>
     f0c:	2b 18       	sub	r2, r11
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <vfprintf+0x332>
     f10:	98 2c       	mov	r9, r8
     f12:	21 2c       	mov	r2, r1
     f14:	a4 fe       	sbrs	r10, 4
     f16:	10 c0       	rjmp	.+32     	; 0xf38 <vfprintf+0x356>
     f18:	b6 01       	movw	r22, r12
     f1a:	80 e3       	ldi	r24, 0x30	; 48
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     f22:	a2 fe       	sbrs	r10, 2
     f24:	17 c0       	rjmp	.+46     	; 0xf54 <vfprintf+0x372>
     f26:	a1 fc       	sbrc	r10, 1
     f28:	03 c0       	rjmp	.+6      	; 0xf30 <vfprintf+0x34e>
     f2a:	88 e7       	ldi	r24, 0x78	; 120
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x352>
     f30:	88 e5       	ldi	r24, 0x58	; 88
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	b6 01       	movw	r22, r12
     f36:	0c c0       	rjmp	.+24     	; 0xf50 <vfprintf+0x36e>
     f38:	8a 2d       	mov	r24, r10
     f3a:	86 78       	andi	r24, 0x86	; 134
     f3c:	59 f0       	breq	.+22     	; 0xf54 <vfprintf+0x372>
     f3e:	a1 fe       	sbrs	r10, 1
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <vfprintf+0x364>
     f42:	8b e2       	ldi	r24, 0x2B	; 43
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <vfprintf+0x366>
     f46:	80 e2       	ldi	r24, 0x20	; 32
     f48:	a7 fc       	sbrc	r10, 7
     f4a:	8d e2       	ldi	r24, 0x2D	; 45
     f4c:	b6 01       	movw	r22, r12
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     f54:	89 14       	cp	r8, r9
     f56:	38 f4       	brcc	.+14     	; 0xf66 <vfprintf+0x384>
     f58:	b6 01       	movw	r22, r12
     f5a:	80 e3       	ldi	r24, 0x30	; 48
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     f62:	9a 94       	dec	r9
     f64:	f7 cf       	rjmp	.-18     	; 0xf54 <vfprintf+0x372>
     f66:	8a 94       	dec	r8
     f68:	f3 01       	movw	r30, r6
     f6a:	e8 0d       	add	r30, r8
     f6c:	f1 1d       	adc	r31, r1
     f6e:	80 81       	ld	r24, Z
     f70:	b6 01       	movw	r22, r12
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     f78:	81 10       	cpse	r8, r1
     f7a:	f5 cf       	rjmp	.-22     	; 0xf66 <vfprintf+0x384>
     f7c:	22 20       	and	r2, r2
     f7e:	09 f4       	brne	.+2      	; 0xf82 <vfprintf+0x3a0>
     f80:	42 ce       	rjmp	.-892    	; 0xc06 <vfprintf+0x24>
     f82:	b6 01       	movw	r22, r12
     f84:	80 e2       	ldi	r24, 0x20	; 32
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <fputc>
     f8c:	2a 94       	dec	r2
     f8e:	f6 cf       	rjmp	.-20     	; 0xf7c <vfprintf+0x39a>
     f90:	f6 01       	movw	r30, r12
     f92:	86 81       	ldd	r24, Z+6	; 0x06
     f94:	97 81       	ldd	r25, Z+7	; 0x07
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <vfprintf+0x3ba>
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
     f9c:	2b 96       	adiw	r28, 0x0b	; 11
     f9e:	e2 e1       	ldi	r30, 0x12	; 18
     fa0:	0c 94 9e 08 	jmp	0x113c	; 0x113c <__epilogue_restores__>

00000fa4 <strnlen_P>:
     fa4:	fc 01       	movw	r30, r24
     fa6:	05 90       	lpm	r0, Z+
     fa8:	61 50       	subi	r22, 0x01	; 1
     faa:	70 40       	sbci	r23, 0x00	; 0
     fac:	01 10       	cpse	r0, r1
     fae:	d8 f7       	brcc	.-10     	; 0xfa6 <strnlen_P+0x2>
     fb0:	80 95       	com	r24
     fb2:	90 95       	com	r25
     fb4:	8e 0f       	add	r24, r30
     fb6:	9f 1f       	adc	r25, r31
     fb8:	08 95       	ret

00000fba <strnlen>:
     fba:	fc 01       	movw	r30, r24
     fbc:	61 50       	subi	r22, 0x01	; 1
     fbe:	70 40       	sbci	r23, 0x00	; 0
     fc0:	01 90       	ld	r0, Z+
     fc2:	01 10       	cpse	r0, r1
     fc4:	d8 f7       	brcc	.-10     	; 0xfbc <strnlen+0x2>
     fc6:	80 95       	com	r24
     fc8:	90 95       	com	r25
     fca:	8e 0f       	add	r24, r30
     fcc:	9f 1f       	adc	r25, r31
     fce:	08 95       	ret

00000fd0 <fputc>:
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	fb 01       	movw	r30, r22
     fda:	23 81       	ldd	r18, Z+3	; 0x03
     fdc:	21 fd       	sbrc	r18, 1
     fde:	03 c0       	rjmp	.+6      	; 0xfe6 <fputc+0x16>
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	9f ef       	ldi	r25, 0xFF	; 255
     fe4:	2c c0       	rjmp	.+88     	; 0x103e <fputc+0x6e>
     fe6:	22 ff       	sbrs	r18, 2
     fe8:	16 c0       	rjmp	.+44     	; 0x1016 <fputc+0x46>
     fea:	46 81       	ldd	r20, Z+6	; 0x06
     fec:	57 81       	ldd	r21, Z+7	; 0x07
     fee:	24 81       	ldd	r18, Z+4	; 0x04
     ff0:	35 81       	ldd	r19, Z+5	; 0x05
     ff2:	42 17       	cp	r20, r18
     ff4:	53 07       	cpc	r21, r19
     ff6:	44 f4       	brge	.+16     	; 0x1008 <fputc+0x38>
     ff8:	a0 81       	ld	r26, Z
     ffa:	b1 81       	ldd	r27, Z+1	; 0x01
     ffc:	9d 01       	movw	r18, r26
     ffe:	2f 5f       	subi	r18, 0xFF	; 255
    1000:	3f 4f       	sbci	r19, 0xFF	; 255
    1002:	31 83       	std	Z+1, r19	; 0x01
    1004:	20 83       	st	Z, r18
    1006:	8c 93       	st	X, r24
    1008:	26 81       	ldd	r18, Z+6	; 0x06
    100a:	37 81       	ldd	r19, Z+7	; 0x07
    100c:	2f 5f       	subi	r18, 0xFF	; 255
    100e:	3f 4f       	sbci	r19, 0xFF	; 255
    1010:	37 83       	std	Z+7, r19	; 0x07
    1012:	26 83       	std	Z+6, r18	; 0x06
    1014:	14 c0       	rjmp	.+40     	; 0x103e <fputc+0x6e>
    1016:	8b 01       	movw	r16, r22
    1018:	ec 01       	movw	r28, r24
    101a:	fb 01       	movw	r30, r22
    101c:	00 84       	ldd	r0, Z+8	; 0x08
    101e:	f1 85       	ldd	r31, Z+9	; 0x09
    1020:	e0 2d       	mov	r30, r0
    1022:	09 95       	icall
    1024:	89 2b       	or	r24, r25
    1026:	e1 f6       	brne	.-72     	; 0xfe0 <fputc+0x10>
    1028:	d8 01       	movw	r26, r16
    102a:	16 96       	adiw	r26, 0x06	; 6
    102c:	8d 91       	ld	r24, X+
    102e:	9c 91       	ld	r25, X
    1030:	17 97       	sbiw	r26, 0x07	; 7
    1032:	01 96       	adiw	r24, 0x01	; 1
    1034:	17 96       	adiw	r26, 0x07	; 7
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
    103a:	16 97       	sbiw	r26, 0x06	; 6
    103c:	ce 01       	movw	r24, r28
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	1f 91       	pop	r17
    1044:	0f 91       	pop	r16
    1046:	08 95       	ret

00001048 <__ultoa_invert>:
    1048:	fa 01       	movw	r30, r20
    104a:	aa 27       	eor	r26, r26
    104c:	28 30       	cpi	r18, 0x08	; 8
    104e:	51 f1       	breq	.+84     	; 0x10a4 <__ultoa_invert+0x5c>
    1050:	20 31       	cpi	r18, 0x10	; 16
    1052:	81 f1       	breq	.+96     	; 0x10b4 <__ultoa_invert+0x6c>
    1054:	e8 94       	clt
    1056:	6f 93       	push	r22
    1058:	6e 7f       	andi	r22, 0xFE	; 254
    105a:	6e 5f       	subi	r22, 0xFE	; 254
    105c:	7f 4f       	sbci	r23, 0xFF	; 255
    105e:	8f 4f       	sbci	r24, 0xFF	; 255
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	af 4f       	sbci	r26, 0xFF	; 255
    1064:	b1 e0       	ldi	r27, 0x01	; 1
    1066:	3e d0       	rcall	.+124    	; 0x10e4 <__ultoa_invert+0x9c>
    1068:	b4 e0       	ldi	r27, 0x04	; 4
    106a:	3c d0       	rcall	.+120    	; 0x10e4 <__ultoa_invert+0x9c>
    106c:	67 0f       	add	r22, r23
    106e:	78 1f       	adc	r23, r24
    1070:	89 1f       	adc	r24, r25
    1072:	9a 1f       	adc	r25, r26
    1074:	a1 1d       	adc	r26, r1
    1076:	68 0f       	add	r22, r24
    1078:	79 1f       	adc	r23, r25
    107a:	8a 1f       	adc	r24, r26
    107c:	91 1d       	adc	r25, r1
    107e:	a1 1d       	adc	r26, r1
    1080:	6a 0f       	add	r22, r26
    1082:	71 1d       	adc	r23, r1
    1084:	81 1d       	adc	r24, r1
    1086:	91 1d       	adc	r25, r1
    1088:	a1 1d       	adc	r26, r1
    108a:	20 d0       	rcall	.+64     	; 0x10cc <__ultoa_invert+0x84>
    108c:	09 f4       	brne	.+2      	; 0x1090 <__ultoa_invert+0x48>
    108e:	68 94       	set
    1090:	3f 91       	pop	r19
    1092:	2a e0       	ldi	r18, 0x0A	; 10
    1094:	26 9f       	mul	r18, r22
    1096:	11 24       	eor	r1, r1
    1098:	30 19       	sub	r19, r0
    109a:	30 5d       	subi	r19, 0xD0	; 208
    109c:	31 93       	st	Z+, r19
    109e:	de f6       	brtc	.-74     	; 0x1056 <__ultoa_invert+0xe>
    10a0:	cf 01       	movw	r24, r30
    10a2:	08 95       	ret
    10a4:	46 2f       	mov	r20, r22
    10a6:	47 70       	andi	r20, 0x07	; 7
    10a8:	40 5d       	subi	r20, 0xD0	; 208
    10aa:	41 93       	st	Z+, r20
    10ac:	b3 e0       	ldi	r27, 0x03	; 3
    10ae:	0f d0       	rcall	.+30     	; 0x10ce <__ultoa_invert+0x86>
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__ultoa_invert+0x5c>
    10b2:	f6 cf       	rjmp	.-20     	; 0x10a0 <__ultoa_invert+0x58>
    10b4:	46 2f       	mov	r20, r22
    10b6:	4f 70       	andi	r20, 0x0F	; 15
    10b8:	40 5d       	subi	r20, 0xD0	; 208
    10ba:	4a 33       	cpi	r20, 0x3A	; 58
    10bc:	18 f0       	brcs	.+6      	; 0x10c4 <__ultoa_invert+0x7c>
    10be:	49 5d       	subi	r20, 0xD9	; 217
    10c0:	31 fd       	sbrc	r19, 1
    10c2:	40 52       	subi	r20, 0x20	; 32
    10c4:	41 93       	st	Z+, r20
    10c6:	02 d0       	rcall	.+4      	; 0x10cc <__ultoa_invert+0x84>
    10c8:	a9 f7       	brne	.-22     	; 0x10b4 <__ultoa_invert+0x6c>
    10ca:	ea cf       	rjmp	.-44     	; 0x10a0 <__ultoa_invert+0x58>
    10cc:	b4 e0       	ldi	r27, 0x04	; 4
    10ce:	a6 95       	lsr	r26
    10d0:	97 95       	ror	r25
    10d2:	87 95       	ror	r24
    10d4:	77 95       	ror	r23
    10d6:	67 95       	ror	r22
    10d8:	ba 95       	dec	r27
    10da:	c9 f7       	brne	.-14     	; 0x10ce <__ultoa_invert+0x86>
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	61 05       	cpc	r22, r1
    10e0:	71 05       	cpc	r23, r1
    10e2:	08 95       	ret
    10e4:	9b 01       	movw	r18, r22
    10e6:	ac 01       	movw	r20, r24
    10e8:	0a 2e       	mov	r0, r26
    10ea:	06 94       	lsr	r0
    10ec:	57 95       	ror	r21
    10ee:	47 95       	ror	r20
    10f0:	37 95       	ror	r19
    10f2:	27 95       	ror	r18
    10f4:	ba 95       	dec	r27
    10f6:	c9 f7       	brne	.-14     	; 0x10ea <__ultoa_invert+0xa2>
    10f8:	62 0f       	add	r22, r18
    10fa:	73 1f       	adc	r23, r19
    10fc:	84 1f       	adc	r24, r20
    10fe:	95 1f       	adc	r25, r21
    1100:	a0 1d       	adc	r26, r0
    1102:	08 95       	ret

00001104 <__prologue_saves__>:
    1104:	2f 92       	push	r2
    1106:	3f 92       	push	r3
    1108:	4f 92       	push	r4
    110a:	5f 92       	push	r5
    110c:	6f 92       	push	r6
    110e:	7f 92       	push	r7
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	ca 1b       	sub	r28, r26
    112e:	db 0b       	sbc	r29, r27
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	09 94       	ijmp

0000113c <__epilogue_restores__>:
    113c:	2a 88       	ldd	r2, Y+18	; 0x12
    113e:	39 88       	ldd	r3, Y+17	; 0x11
    1140:	48 88       	ldd	r4, Y+16	; 0x10
    1142:	5f 84       	ldd	r5, Y+15	; 0x0f
    1144:	6e 84       	ldd	r6, Y+14	; 0x0e
    1146:	7d 84       	ldd	r7, Y+13	; 0x0d
    1148:	8c 84       	ldd	r8, Y+12	; 0x0c
    114a:	9b 84       	ldd	r9, Y+11	; 0x0b
    114c:	aa 84       	ldd	r10, Y+10	; 0x0a
    114e:	b9 84       	ldd	r11, Y+9	; 0x09
    1150:	c8 84       	ldd	r12, Y+8	; 0x08
    1152:	df 80       	ldd	r13, Y+7	; 0x07
    1154:	ee 80       	ldd	r14, Y+6	; 0x06
    1156:	fd 80       	ldd	r15, Y+5	; 0x05
    1158:	0c 81       	ldd	r16, Y+4	; 0x04
    115a:	1b 81       	ldd	r17, Y+3	; 0x03
    115c:	aa 81       	ldd	r26, Y+2	; 0x02
    115e:	b9 81       	ldd	r27, Y+1	; 0x01
    1160:	ce 0f       	add	r28, r30
    1162:	d1 1d       	adc	r29, r1
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	ed 01       	movw	r28, r26
    1170:	08 95       	ret

00001172 <_exit>:
    1172:	f8 94       	cli

00001174 <__stop_program>:
    1174:	ff cf       	rjmp	.-2      	; 0x1174 <__stop_program>
