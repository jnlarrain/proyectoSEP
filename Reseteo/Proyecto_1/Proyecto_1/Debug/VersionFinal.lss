
VersionFinal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00004052  000040e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004052  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000067  0080015e  0080015e  00004144  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004144  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000041a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ae8  00000000  00000000  00004398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000db7  00000000  00000000  00006e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001535  00000000  00000000  00007c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000568  00000000  00000000  0000916c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d0  00000000  00000000  000096d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023b1  00000000  00000000  00009ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000c255  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__ctors_end>
       4:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
       8:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
       c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      10:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__vector_4>
      14:	0c 94 df 12 	jmp	0x25be	; 0x25be <__vector_5>
      18:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      1c:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_7>
      20:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      24:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      28:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      2c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      30:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      34:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      38:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      3c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      40:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      44:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      48:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      4c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      50:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      54:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      58:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      5c:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      60:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      64:	0c 94 c4 02 	jmp	0x588	; 0x588 <__bad_interrupt>
      68:	1b 05       	cpc	r17, r11
      6a:	31 05       	cpc	r19, r1
      6c:	44 05       	cpc	r20, r4
      6e:	57 05       	cpc	r21, r7
      70:	5c 05       	cpc	r21, r12
      72:	6f 05       	cpc	r22, r15
      74:	74 05       	cpc	r23, r4
      76:	77 08       	sbc	r7, r7
      78:	80 08       	sbc	r8, r0
      7a:	b2 05       	cpc	r27, r2
      7c:	f8 05       	cpc	r31, r8
      7e:	3f 06       	cpc	r3, r31
      80:	86 06       	cpc	r8, r22
      82:	cd 06       	cpc	r12, r29
      84:	14 07       	cpc	r17, r20
      86:	5b 07       	cpc	r21, r27
      88:	a2 07       	cpc	r26, r18
      8a:	e9 07       	cpc	r30, r25
      8c:	30 08       	sbc	r3, r0
      8e:	77 08       	sbc	r7, r7
      90:	85 08       	sbc	r8, r5
      92:	bb 05       	cpc	r27, r11
      94:	01 06       	cpc	r0, r17
      96:	48 06       	cpc	r4, r24
      98:	8f 06       	cpc	r8, r31
      9a:	d6 06       	cpc	r13, r22
      9c:	1d 07       	cpc	r17, r29
      9e:	64 07       	cpc	r22, r20
      a0:	ab 07       	cpc	r26, r27
      a2:	f2 07       	cpc	r31, r18
      a4:	39 08       	sbc	r3, r9
      a6:	5c 0b       	sbc	r21, r28
      a8:	65 0b       	sbc	r22, r21
      aa:	97 08       	sbc	r9, r7
      ac:	dd 08       	sbc	r13, r13
      ae:	24 09       	sbc	r18, r4
      b0:	6b 09       	sbc	r22, r11
      b2:	b2 09       	sbc	r27, r2
      b4:	f9 09       	sbc	r31, r9
      b6:	40 0a       	sbc	r4, r16
      b8:	87 0a       	sbc	r8, r23
      ba:	ce 0a       	sbc	r12, r30
      bc:	15 0b       	sbc	r17, r21
      be:	5c 0b       	sbc	r21, r28
      c0:	6a 0b       	sbc	r22, r26
      c2:	a0 08       	sbc	r10, r0
      c4:	e6 08       	sbc	r14, r6
      c6:	2d 09       	sbc	r18, r13
      c8:	74 09       	sbc	r23, r4
      ca:	bb 09       	sbc	r27, r11
      cc:	02 0a       	sbc	r0, r18
      ce:	49 0a       	sbc	r4, r25
      d0:	90 0a       	sbc	r9, r16
      d2:	d7 0a       	sbc	r13, r23
      d4:	1e 0b       	sbc	r17, r30
      d6:	05 0c       	add	r0, r5
      d8:	54 0c       	add	r5, r4
      da:	df 0b       	sbc	r29, r31
      dc:	54 0c       	add	r5, r4
      de:	2b 0c       	add	r2, r11
      e0:	54 0c       	add	r5, r4
      e2:	54 0c       	add	r5, r4
      e4:	54 0c       	add	r5, r4
      e6:	54 0c       	add	r5, r4
      e8:	cc 0b       	sbc	r28, r28
      ea:	54 0c       	add	r5, r4
      ec:	54 0c       	add	r5, r4
      ee:	54 0c       	add	r5, r4
      f0:	54 0c       	add	r5, r4
      f2:	b9 0b       	sbc	r27, r25
      f4:	54 0c       	add	r5, r4
      f6:	f2 0b       	sbc	r31, r18
      f8:	18 0c       	add	r1, r8
      fa:	54 0c       	add	r5, r4
      fc:	54 0c       	add	r5, r4
      fe:	54 0c       	add	r5, r4
     100:	3e 0c       	add	r3, r14
     102:	09 10       	cpse	r0, r9
     104:	79 12       	cpse	r7, r25
     106:	79 12       	cpse	r7, r25
     108:	79 12       	cpse	r7, r25
     10a:	79 12       	cpse	r7, r25
     10c:	79 12       	cpse	r7, r25
     10e:	79 12       	cpse	r7, r25
     110:	79 12       	cpse	r7, r25
     112:	79 12       	cpse	r7, r25
     114:	79 12       	cpse	r7, r25
     116:	79 12       	cpse	r7, r25
     118:	79 12       	cpse	r7, r25
     11a:	79 12       	cpse	r7, r25
     11c:	79 12       	cpse	r7, r25
     11e:	79 12       	cpse	r7, r25
     120:	79 12       	cpse	r7, r25
     122:	79 12       	cpse	r7, r25
     124:	79 12       	cpse	r7, r25
     126:	79 12       	cpse	r7, r25
     128:	79 12       	cpse	r7, r25
     12a:	79 12       	cpse	r7, r25
     12c:	79 12       	cpse	r7, r25
     12e:	79 12       	cpse	r7, r25
     130:	79 12       	cpse	r7, r25
     132:	79 12       	cpse	r7, r25
     134:	79 12       	cpse	r7, r25
     136:	79 12       	cpse	r7, r25
     138:	79 12       	cpse	r7, r25
     13a:	79 12       	cpse	r7, r25
     13c:	79 12       	cpse	r7, r25
     13e:	79 12       	cpse	r7, r25
     140:	79 12       	cpse	r7, r25
     142:	79 12       	cpse	r7, r25
     144:	79 12       	cpse	r7, r25
     146:	79 12       	cpse	r7, r25
     148:	79 12       	cpse	r7, r25
     14a:	e0 0f       	add	r30, r16
     14c:	79 12       	cpse	r7, r25
     14e:	79 12       	cpse	r7, r25
     150:	4f 10       	cpse	r4, r15
     152:	79 12       	cpse	r7, r25
     154:	dd 10       	cpse	r13, r13
     156:	79 12       	cpse	r7, r25
     158:	79 12       	cpse	r7, r25
     15a:	79 12       	cpse	r7, r25
     15c:	79 12       	cpse	r7, r25
     15e:	79 12       	cpse	r7, r25
     160:	79 12       	cpse	r7, r25
     162:	28 10       	cpse	r2, r8
     164:	96 10       	cpse	r9, r6
     166:	79 12       	cpse	r7, r25
     168:	b9 0f       	add	r27, r25
     16a:	07 63       	ori	r16, 0x37	; 55
     16c:	42 36       	cpi	r20, 0x62	; 98
     16e:	b7 9b       	sbis	0x16, 7	; 22
     170:	d8 a7       	std	Y+40, r29	; 0x28
     172:	1a 39       	cpi	r17, 0x9A	; 154
     174:	68 56       	subi	r22, 0x68	; 104
     176:	18 ae       	std	Y+56, r1	; 0x38
     178:	ba ab       	std	Y+50, r27	; 0x32
     17a:	55 8c       	ldd	r5, Z+29	; 0x1d
     17c:	1d 3c       	cpi	r17, 0xCD	; 205
     17e:	b7 cc       	rjmp	.-1682   	; 0xfffffaee <__eeprom_end+0xff7efaee>
     180:	57 63       	ori	r21, 0x37	; 55
     182:	bd 6d       	ori	r27, 0xDD	; 221
     184:	ed fd       	.word	0xfded	; ????
     186:	75 3e       	cpi	r23, 0xE5	; 229
     188:	f6 17       	cp	r31, r22
     18a:	72 31       	cpi	r23, 0x12	; 18
     18c:	bf 00       	.word	0x00bf	; ????
     18e:	00 00       	nop
     190:	80 3f       	cpi	r24, 0xF0	; 240
     192:	05 a8       	ldd	r0, Z+53	; 0x35
     194:	4c cd       	rjmp	.-1384   	; 0xfffffc2e <__eeprom_end+0xff7efc2e>
     196:	b2 d4       	rcall	.+2404   	; 0xafc <mostrar+0xd8>
     198:	4e b9       	out	0x0e, r20	; 14
     19a:	38 36       	cpi	r19, 0x68	; 104
     19c:	a9 02       	muls	r26, r25
     19e:	0c 50       	subi	r16, 0x0C	; 12
     1a0:	b9 91       	ld	r27, Y+
     1a2:	86 88       	ldd	r8, Z+22	; 0x16
     1a4:	08 3c       	cpi	r16, 0xC8	; 200
     1a6:	a6 aa       	std	Z+54, r10	; 0x36
     1a8:	aa 2a       	or	r10, r26
     1aa:	be 00       	.word	0x00be	; ????
     1ac:	00 00       	nop
     1ae:	80 3f       	cpi	r24, 0xF0	; 240
     1b0:	08 00       	.word	0x0008	; ????
     1b2:	00 00       	nop
     1b4:	be 92       	st	-X, r11
     1b6:	24 49       	sbci	r18, 0x94	; 148
     1b8:	12 3e       	cpi	r17, 0xE2	; 226
     1ba:	ab aa       	std	Y+51, r10	; 0x33
     1bc:	aa 2a       	or	r10, r26
     1be:	be cd       	rjmp	.-1156   	; 0xfffffd3c <__eeprom_end+0xff7efd3c>
     1c0:	cc cc       	rjmp	.-1640   	; 0xfffffb5a <__eeprom_end+0xff7efb5a>
     1c2:	4c 3e       	cpi	r20, 0xEC	; 236
     1c4:	00 00       	nop
     1c6:	00 80       	ld	r0, Z
     1c8:	be ab       	std	Y+54, r27	; 0x36
     1ca:	aa aa       	std	Y+50, r10	; 0x32
     1cc:	aa 3e       	cpi	r26, 0xEA	; 234
     1ce:	00 00       	nop
     1d0:	00 00       	nop
     1d2:	bf 00       	.word	0x00bf	; ????
     1d4:	00 00       	nop
     1d6:	80 3f       	cpi	r24, 0xF0	; 240
     1d8:	00 00       	nop
     1da:	00 00       	nop
     1dc:	00 08       	sbc	r0, r0
     1de:	41 78       	andi	r20, 0x81	; 129
     1e0:	d3 bb       	out	0x13, r29	; 19
     1e2:	43 87       	std	Z+11, r20	; 0x0b
     1e4:	d1 13       	cpse	r29, r17
     1e6:	3d 19       	sub	r19, r13
     1e8:	0e 3c       	cpi	r16, 0xCE	; 206
     1ea:	c3 bd       	out	0x23, r28	; 35
     1ec:	42 82       	std	Z+2, r4	; 0x02
     1ee:	ad 2b       	or	r26, r29
     1f0:	3e 68       	ori	r19, 0x8E	; 142
     1f2:	ec 82       	std	Y+4, r14	; 0x04
     1f4:	76 be       	out	0x36, r7	; 54
     1f6:	d9 8f       	std	Y+25, r29	; 0x19
     1f8:	e1 a9       	ldd	r30, Z+49	; 0x31
     1fa:	3e 4c       	sbci	r19, 0xCE	; 206
     1fc:	80 ef       	ldi	r24, 0xF0	; 240
     1fe:	ff be       	out	0x3f, r15	; 63
     200:	01 c4       	rjmp	.+2050   	; 0xa04 <__stack+0x105>
     202:	ff 7f       	andi	r31, 0xFF	; 255
     204:	3f 00       	.word	0x003f	; ????
     206:	00 00       	nop
     208:	00 00       	nop
     20a:	06 64       	ori	r16, 0x46	; 70
     20c:	ec 1b       	sub	r30, r28
     20e:	3c 04       	cpc	r3, r12
     210:	bc 16       	cp	r11, r28
     212:	3e 3b       	cpi	r19, 0xBE	; 190
     214:	e5 b9       	out	0x05, r30	; 5
     216:	3c c9       	rjmp	.-3464   	; 0xfffff490 <__eeprom_end+0xff7ef490>
     218:	3c 37       	cpi	r19, 0x7C	; 124
     21a:	c2 9e       	mul	r12, r18
     21c:	5a 3d       	cpi	r21, 0xDA	; 218
     21e:	66 04       	cpc	r6, r6
     220:	98 08       	sbc	r9, r8
     222:	3e ea       	ldi	r19, 0xAE	; 174
     224:	69 aa       	std	Y+49, r6	; 0x31
     226:	aa 3e       	cpi	r26, 0xEA	; 234
     228:	00 00       	nop
     22a:	00 80       	ld	r0, Z
     22c:	3f 00       	.word	0x003f	; ????

0000022e <__trampolines_end>:
     22e:	00 40       	sbci	r16, 0x00	; 0
     230:	7a 10       	cpse	r7, r10
     232:	f3 5a       	subi	r31, 0xA3	; 163
     234:	00 a0       	ldd	r0, Z+32	; 0x20
     236:	72 4e       	sbci	r23, 0xE2	; 226
     238:	18 09       	sbc	r17, r8
     23a:	00 10       	cpse	r0, r0
     23c:	a5 d4       	rcall	.+2378   	; 0xb88 <actualizarNumero+0x64>
     23e:	e8 00       	.word	0x00e8	; ????
     240:	00 e8       	ldi	r16, 0x80	; 128
     242:	76 48       	sbci	r23, 0x86	; 134
     244:	17 00       	.word	0x0017	; ????
     246:	00 e4       	ldi	r16, 0x40	; 64
     248:	0b 54       	subi	r16, 0x4B	; 75
     24a:	02 00       	.word	0x0002	; ????
     24c:	00 ca       	rjmp	.-3072   	; 0xfffff64e <__eeprom_end+0xff7ef64e>
     24e:	9a 3b       	cpi	r25, 0xBA	; 186
     250:	00 00       	nop
     252:	00 e1       	ldi	r16, 0x10	; 16
     254:	f5 05       	cpc	r31, r5
     256:	00 00       	nop
     258:	80 96       	adiw	r24, 0x20	; 32
     25a:	98 00       	.word	0x0098	; ????
     25c:	00 00       	nop
     25e:	40 42       	sbci	r20, 0x20	; 32
     260:	0f 00       	.word	0x000f	; ????
     262:	00 00       	nop
     264:	a0 86       	std	Z+8, r10	; 0x08
     266:	01 00       	.word	0x0001	; ????
     268:	00 00       	nop
     26a:	10 27       	eor	r17, r16
     26c:	00 00       	nop
     26e:	00 00       	nop
     270:	e8 03       	fmulsu	r22, r16
     272:	00 00       	nop
     274:	00 00       	nop
     276:	64 00       	.word	0x0064	; ????
     278:	00 00       	nop
     27a:	00 00       	nop
     27c:	0a 00       	.word	0x000a	; ????
     27e:	00 00       	nop
     280:	00 00       	nop
     282:	01 00       	.word	0x0001	; ????
     284:	00 00       	nop
     286:	00 00       	nop
     288:	2c 76       	andi	r18, 0x6C	; 108
     28a:	d8 88       	ldd	r13, Y+16	; 0x10
     28c:	dc 67       	ori	r29, 0x7C	; 124
     28e:	4f 08       	sbc	r4, r15
     290:	23 df       	rcall	.-442    	; 0xd8 <__SREG__+0x99>
     292:	c1 df       	rcall	.-126    	; 0x216 <__SREG__+0x1d7>
     294:	ae 59       	subi	r26, 0x9E	; 158
     296:	e1 b1       	in	r30, 0x01	; 1
     298:	b7 96       	adiw	r30, 0x27	; 39
     29a:	e5 e3       	ldi	r30, 0x35	; 53
     29c:	e4 53       	subi	r30, 0x34	; 52
     29e:	c6 3a       	cpi	r28, 0xA6	; 166
     2a0:	e6 51       	subi	r30, 0x16	; 22
     2a2:	99 76       	andi	r25, 0x69	; 105
     2a4:	96 e8       	ldi	r25, 0x86	; 134
     2a6:	e6 c2       	rjmp	.+1484   	; 0x874 <floatToString+0x8>
     2a8:	84 26       	eor	r8, r20
     2aa:	eb 89       	ldd	r30, Y+19	; 0x13
     2ac:	8c 9b       	sbis	0x11, 4	; 17
     2ae:	62 ed       	ldi	r22, 0xD2	; 210
     2b0:	40 7c       	andi	r20, 0xC0	; 192
     2b2:	6f fc       	.word	0xfc6f	; ????
     2b4:	ef bc       	out	0x2f, r14	; 47
     2b6:	9c 9f       	mul	r25, r28
     2b8:	40 f2       	brcs	.-112    	; 0x24a <__trampolines_end+0x1c>
     2ba:	ba a5       	ldd	r27, Y+42	; 0x2a
     2bc:	6f a5       	ldd	r22, Y+47	; 0x2f
     2be:	f4 90       	lpm	r15, Z
     2c0:	05 5a       	subi	r16, 0xA5	; 165
     2c2:	2a f7       	brpl	.-54     	; 0x28e <__trampolines_end+0x60>
     2c4:	5c 93       	st	X, r21
     2c6:	6b 6c       	ori	r22, 0xCB	; 203
     2c8:	f9 67       	ori	r31, 0x79	; 121
     2ca:	6d c1       	rjmp	.+730    	; 0x5a6 <first_grid+0x1a>
     2cc:	1b fc       	.word	0xfc1b	; ????
     2ce:	e0 e4       	ldi	r30, 0x40	; 64
     2d0:	0d 47       	sbci	r16, 0x7D	; 125
     2d2:	fe f5       	brtc	.+126    	; 0x352 <CHARACTERS+0x2a>
     2d4:	20 e6       	ldi	r18, 0x60	; 96
     2d6:	b5 00       	.word	0x00b5	; ????
     2d8:	d0 ed       	ldi	r29, 0xD0	; 208
     2da:	90 2e       	mov	r9, r16
     2dc:	03 00       	.word	0x0003	; ????
     2de:	94 35       	cpi	r25, 0x54	; 84
     2e0:	77 05       	cpc	r23, r7
     2e2:	00 80       	ld	r0, Z
     2e4:	84 1e       	adc	r8, r20
     2e6:	08 00       	.word	0x0008	; ????
     2e8:	00 20       	and	r0, r0
     2ea:	4e 0a       	sbc	r4, r30
     2ec:	00 00       	nop
     2ee:	00 c8       	rjmp	.-4096   	; 0xfffff2f0 <__eeprom_end+0xff7ef2f0>
     2f0:	0c 33       	cpi	r16, 0x3C	; 60
     2f2:	33 33       	cpi	r19, 0x33	; 51
     2f4:	33 0f       	add	r19, r19
     2f6:	98 6e       	ori	r25, 0xE8	; 232
     2f8:	12 83       	std	Z+2, r17	; 0x02
     2fa:	11 41       	sbci	r17, 0x11	; 17
     2fc:	ef 8d       	ldd	r30, Y+31	; 0x1f
     2fe:	21 14       	cp	r2, r1
     300:	89 3b       	cpi	r24, 0xB9	; 185
     302:	e6 55       	subi	r30, 0x56	; 86
     304:	16 cf       	rjmp	.-468    	; 0x132 <__SREG__+0xf3>
     306:	fe e6       	ldi	r31, 0x6E	; 110
     308:	db 18       	sub	r13, r11
     30a:	d1 84       	ldd	r13, Z+9	; 0x09
     30c:	4b 38       	cpi	r20, 0x8B	; 139
     30e:	1b f7       	brvc	.-58     	; 0x2d6 <__trampolines_end+0xa8>
     310:	7c 1d       	adc	r23, r12
     312:	90 1d       	adc	r25, r0
     314:	a4 bb       	out	0x14, r26	; 20
     316:	e4 24       	eor	r14, r4
     318:	20 32       	cpi	r18, 0x20	; 32
     31a:	84 72       	andi	r24, 0x24	; 36
     31c:	5e 22       	and	r5, r30
     31e:	81 00       	.word	0x0081	; ????
     320:	c9 f1       	breq	.+114    	; 0x394 <CHARACTERS+0x6c>
     322:	24 ec       	ldi	r18, 0xC4	; 196
     324:	a1 e5       	ldi	r26, 0x51	; 81
     326:	3d 27       	eor	r19, r29

00000328 <CHARACTERS>:
     328:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     338:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     348:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     358:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     368:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     378:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     388:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     398:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     3a8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     3b8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     3c8:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     3d8:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     3e8:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     3f8:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     408:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     418:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     428:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     438:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     448:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     458:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     468:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     478:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     488:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     498:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     4a8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     4b8:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
     4c8:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     4d8:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     4e8:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     4f8:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000508 <INIT_ST7735B>:
     508:	0b 01 80 c8 11 80 c8 3a 81 05 0a b1 83 00 06 03     .......:........
     518:	0a 20 80 0a 36 01 a0 b6 02 15 02 b4 01 00 e0 10     . ..6...........
     528:	09 16 09 20 21 1b 13 19 17 15 1e 2b 04 05 02 0e     ... !......+....
     538:	e1 90 0b 14 08 1e 22 1d 18 1e 1b 1a 24 2b 06 06     ......".....$+..
     548:	02 0f 0a 13 80 0a                                   ......

0000054e <__ctors_end>:
     54e:	11 24       	eor	r1, r1
     550:	1f be       	out	0x3f, r1	; 63
     552:	cf ef       	ldi	r28, 0xFF	; 255
     554:	d8 e0       	ldi	r29, 0x08	; 8
     556:	de bf       	out	0x3e, r29	; 62
     558:	cd bf       	out	0x3d, r28	; 61

0000055a <__do_copy_data>:
     55a:	11 e0       	ldi	r17, 0x01	; 1
     55c:	a0 e0       	ldi	r26, 0x00	; 0
     55e:	b1 e0       	ldi	r27, 0x01	; 1
     560:	e2 e5       	ldi	r30, 0x52	; 82
     562:	f0 e4       	ldi	r31, 0x40	; 64
     564:	02 c0       	rjmp	.+4      	; 0x56a <__do_copy_data+0x10>
     566:	05 90       	lpm	r0, Z+
     568:	0d 92       	st	X+, r0
     56a:	ae 35       	cpi	r26, 0x5E	; 94
     56c:	b1 07       	cpc	r27, r17
     56e:	d9 f7       	brne	.-10     	; 0x566 <__do_copy_data+0xc>

00000570 <__do_clear_bss>:
     570:	21 e0       	ldi	r18, 0x01	; 1
     572:	ae e5       	ldi	r26, 0x5E	; 94
     574:	b1 e0       	ldi	r27, 0x01	; 1
     576:	01 c0       	rjmp	.+2      	; 0x57a <.do_clear_bss_start>

00000578 <.do_clear_bss_loop>:
     578:	1d 92       	st	X+, r1

0000057a <.do_clear_bss_start>:
     57a:	a5 3c       	cpi	r26, 0xC5	; 197
     57c:	b2 07       	cpc	r27, r18
     57e:	e1 f7       	brne	.-8      	; 0x578 <.do_clear_bss_loop>
     580:	0e 94 0e 04 	call	0x81c	; 0x81c <main>
     584:	0c 94 27 20 	jmp	0x404e	; 0x404e <_exit>

00000588 <__bad_interrupt>:
     588:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000058c <first_grid>:
char old_string2[10];
char old_string3[10];
char old_string4;

//recibe numero y lo pone en el cuadrante 1
void first_grid(char letter[10]){
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	ec 01       	movw	r28, r24
	int i;
	if (letter=='a'){
     592:	81 36       	cpi	r24, 0x61	; 97
     594:	91 05       	cpc	r25, r1
     596:	61 f4       	brne	.+24     	; 0x5b0 <first_grid+0x24>
		SetPosition(35, 25);
     598:	69 e1       	ldi	r22, 0x19	; 25
     59a:	83 e2       	ldi	r24, 0x23	; 35
     59c:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string1, 0xffff, X2);
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	6f ef       	ldi	r22, 0xFF	; 255
     5a4:	7f ef       	ldi	r23, 0xFF	; 255
     5a6:	8a eb       	ldi	r24, 0xBA	; 186
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
     5ae:	20 c0       	rjmp	.+64     	; 0x5f0 <first_grid+0x64>
	}
	else{
		SetPosition(35, 25);
     5b0:	69 e1       	ldi	r22, 0x19	; 25
     5b2:	83 e2       	ldi	r24, 0x23	; 35
     5b4:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string1, 0xffff, X2);
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	6f ef       	ldi	r22, 0xFF	; 255
     5bc:	7f ef       	ldi	r23, 0xFF	; 255
     5be:	8a eb       	ldi	r24, 0xBA	; 186
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
     5c6:	de 01       	movw	r26, r28
     5c8:	ea eb       	ldi	r30, 0xBA	; 186
     5ca:	f1 e0       	ldi	r31, 0x01	; 1
     5cc:	24 ec       	ldi	r18, 0xC4	; 196
     5ce:	31 e0       	ldi	r19, 0x01	; 1
		for(i=0; i<10; i++){
		old_string1[i] = letter[i];
     5d0:	8d 91       	ld	r24, X+
     5d2:	81 93       	st	Z+, r24
		DrawString(old_string1, 0xffff, X2);
	}
	else{
		SetPosition(35, 25);
		DrawString(old_string1, 0xffff, X2);
		for(i=0; i<10; i++){
     5d4:	e2 17       	cp	r30, r18
     5d6:	f3 07       	cpc	r31, r19
     5d8:	d9 f7       	brne	.-10     	; 0x5d0 <first_grid+0x44>
		old_string1[i] = letter[i];
		}
		SetPosition(35, 25);
     5da:	69 e1       	ldi	r22, 0x19	; 25
     5dc:	83 e2       	ldi	r24, 0x23	; 35
     5de:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string1, 0x0000, X2);
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	8a eb       	ldi	r24, 0xBA	; 186
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
	}
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	08 95       	ret

000005f6 <second_grid>:



void second_grid(char letter[10]){
     5f6:	cf 93       	push	r28
     5f8:	df 93       	push	r29
     5fa:	ec 01       	movw	r28, r24
	int i;
	if (letter=='a'){
     5fc:	81 36       	cpi	r24, 0x61	; 97
     5fe:	91 05       	cpc	r25, r1
     600:	a9 f4       	brne	.+42     	; 0x62c <second_grid+0x36>
		SetPosition(35, 45);
     602:	6d e2       	ldi	r22, 0x2D	; 45
     604:	83 e2       	ldi	r24, 0x23	; 35
     606:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string2, 0xffff, X2);
     60a:	41 e0       	ldi	r20, 0x01	; 1
     60c:	6f ef       	ldi	r22, 0xFF	; 255
     60e:	7f ef       	ldi	r23, 0xFF	; 255
     610:	86 ea       	ldi	r24, 0xA6	; 166
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
     618:	e6 ea       	ldi	r30, 0xA6	; 166
     61a:	f1 e0       	ldi	r31, 0x01	; 1
     61c:	20 eb       	ldi	r18, 0xB0	; 176
     61e:	31 e0       	ldi	r19, 0x01	; 1
		for(i=0; i<10; i++){
			old_string2[i] = ' ';
     620:	80 e2       	ldi	r24, 0x20	; 32
     622:	81 93       	st	Z+, r24
void second_grid(char letter[10]){
	int i;
	if (letter=='a'){
		SetPosition(35, 45);
		DrawString(old_string2, 0xffff, X2);
		for(i=0; i<10; i++){
     624:	e2 17       	cp	r30, r18
     626:	f3 07       	cpc	r31, r19
     628:	e1 f7       	brne	.-8      	; 0x622 <second_grid+0x2c>
     62a:	20 c0       	rjmp	.+64     	; 0x66c <second_grid+0x76>
			old_string2[i] = ' ';
		}
	}
	else{
		SetPosition(35, 45);
     62c:	6d e2       	ldi	r22, 0x2D	; 45
     62e:	83 e2       	ldi	r24, 0x23	; 35
     630:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string2, 0xffff, X2);
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	6f ef       	ldi	r22, 0xFF	; 255
     638:	7f ef       	ldi	r23, 0xFF	; 255
     63a:	86 ea       	ldi	r24, 0xA6	; 166
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
     642:	de 01       	movw	r26, r28
     644:	e6 ea       	ldi	r30, 0xA6	; 166
     646:	f1 e0       	ldi	r31, 0x01	; 1
     648:	20 eb       	ldi	r18, 0xB0	; 176
     64a:	31 e0       	ldi	r19, 0x01	; 1
		for(i=0; i<10; i++){
			old_string2[i] = letter[i];
     64c:	8d 91       	ld	r24, X+
     64e:	81 93       	st	Z+, r24
		}
	}
	else{
		SetPosition(35, 45);
		DrawString(old_string2, 0xffff, X2);
		for(i=0; i<10; i++){
     650:	e2 17       	cp	r30, r18
     652:	f3 07       	cpc	r31, r19
     654:	d9 f7       	brne	.-10     	; 0x64c <second_grid+0x56>
			old_string2[i] = letter[i];
		}
		SetPosition(35, 45);
     656:	6d e2       	ldi	r22, 0x2D	; 45
     658:	83 e2       	ldi	r24, 0x23	; 35
     65a:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string2, 0x0000, X2);
     65e:	41 e0       	ldi	r20, 0x01	; 1
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	86 ea       	ldi	r24, 0xA6	; 166
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
	}
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <thrid_grid>:

void thrid_grid(char letter[10]){
     672:	cf 93       	push	r28
     674:	df 93       	push	r29
     676:	ec 01       	movw	r28, r24
	int i;
	if (letter=='a'){
     678:	81 36       	cpi	r24, 0x61	; 97
     67a:	91 05       	cpc	r25, r1
     67c:	a9 f4       	brne	.+42     	; 0x6a8 <thrid_grid+0x36>
		SetPosition(35, 65);
     67e:	61 e4       	ldi	r22, 0x41	; 65
     680:	83 e2       	ldi	r24, 0x23	; 35
     682:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string3, 0xffff, X2);		
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	6f ef       	ldi	r22, 0xFF	; 255
     68a:	7f ef       	ldi	r23, 0xFF	; 255
     68c:	80 eb       	ldi	r24, 0xB0	; 176
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
     694:	e0 eb       	ldi	r30, 0xB0	; 176
     696:	f1 e0       	ldi	r31, 0x01	; 1
     698:	2a eb       	ldi	r18, 0xBA	; 186
     69a:	31 e0       	ldi	r19, 0x01	; 1
		for(i=0; i<10; i++){
			old_string3[i] = ' ';
     69c:	80 e2       	ldi	r24, 0x20	; 32
     69e:	81 93       	st	Z+, r24
void thrid_grid(char letter[10]){
	int i;
	if (letter=='a'){
		SetPosition(35, 65);
		DrawString(old_string3, 0xffff, X2);		
		for(i=0; i<10; i++){
     6a0:	e2 17       	cp	r30, r18
     6a2:	f3 07       	cpc	r31, r19
     6a4:	e1 f7       	brne	.-8      	; 0x69e <thrid_grid+0x2c>
     6a6:	20 c0       	rjmp	.+64     	; 0x6e8 <thrid_grid+0x76>
			old_string3[i] = ' ';
		}
	}
	else{
		SetPosition(35, 65);
     6a8:	61 e4       	ldi	r22, 0x41	; 65
     6aa:	83 e2       	ldi	r24, 0x23	; 35
     6ac:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string3, 0xffff, X2);
     6b0:	41 e0       	ldi	r20, 0x01	; 1
     6b2:	6f ef       	ldi	r22, 0xFF	; 255
     6b4:	7f ef       	ldi	r23, 0xFF	; 255
     6b6:	80 eb       	ldi	r24, 0xB0	; 176
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
     6be:	de 01       	movw	r26, r28
     6c0:	e0 eb       	ldi	r30, 0xB0	; 176
     6c2:	f1 e0       	ldi	r31, 0x01	; 1
     6c4:	2a eb       	ldi	r18, 0xBA	; 186
     6c6:	31 e0       	ldi	r19, 0x01	; 1
		for(i=0; i<10; i++){
			old_string3[i] = letter[i];
     6c8:	8d 91       	ld	r24, X+
     6ca:	81 93       	st	Z+, r24
		}
	}
	else{
		SetPosition(35, 65);
		DrawString(old_string3, 0xffff, X2);
		for(i=0; i<10; i++){
     6cc:	e2 17       	cp	r30, r18
     6ce:	f3 07       	cpc	r31, r19
     6d0:	d9 f7       	brne	.-10     	; 0x6c8 <thrid_grid+0x56>
			old_string3[i] = letter[i];
		}
		SetPosition(35, 65);
     6d2:	61 e4       	ldi	r22, 0x41	; 65
     6d4:	83 e2       	ldi	r24, 0x23	; 35
     6d6:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawString(old_string3, 0x0000, X2);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 eb       	ldi	r24, 0xB0	; 176
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
	}
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <fourth_grid>:


void fourth_grid(char letter){
     6ee:	cf 93       	push	r28
     6f0:	c8 2f       	mov	r28, r24
		if (letter=='a'){
     6f2:	81 36       	cpi	r24, 0x61	; 97
     6f4:	71 f4       	brne	.+28     	; 0x712 <fourth_grid+0x24>
		SetPosition(15, 45);
     6f6:	6d e2       	ldi	r22, 0x2D	; 45
     6f8:	8f e0       	ldi	r24, 0x0F	; 15
     6fa:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawChar(letter, 0xffff, X2);	
     6fe:	41 e0       	ldi	r20, 0x01	; 1
     700:	6f ef       	ldi	r22, 0xFF	; 255
     702:	7f ef       	ldi	r23, 0xFF	; 255
     704:	81 e6       	ldi	r24, 0x61	; 97
     706:	0e 94 77 14 	call	0x28ee	; 0x28ee <DrawChar>
		old_string4 = ' ';
     70a:	80 e2       	ldi	r24, 0x20	; 32
     70c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <old_string4>
     710:	16 c0       	rjmp	.+44     	; 0x73e <fourth_grid+0x50>
		}
		else{
		SetPosition(15, 45);
     712:	6d e2       	ldi	r22, 0x2D	; 45
     714:	8f e0       	ldi	r24, 0x0F	; 15
     716:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawChar(letter, 0xffff, X2);
     71a:	41 e0       	ldi	r20, 0x01	; 1
     71c:	6f ef       	ldi	r22, 0xFF	; 255
     71e:	7f ef       	ldi	r23, 0xFF	; 255
     720:	8c 2f       	mov	r24, r28
     722:	0e 94 77 14 	call	0x28ee	; 0x28ee <DrawChar>
		old_string4 = letter;
     726:	c0 93 c4 01 	sts	0x01C4, r28	; 0x8001c4 <old_string4>
		SetPosition(15, 45);
     72a:	6d e2       	ldi	r22, 0x2D	; 45
     72c:	8f e0       	ldi	r24, 0x0F	; 15
     72e:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
		DrawChar(letter, 0x0000, X2);
     732:	41 e0       	ldi	r20, 0x01	; 1
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	8c 2f       	mov	r24, r28
     73a:	0e 94 77 14 	call	0x28ee	; 0x28ee <DrawChar>
		}
}
     73e:	cf 91       	pop	r28
     740:	08 95       	ret

00000742 <__vector_7>:
	else{
		tdeb = tref;
	}
}

ISR(TIMER2_COMPA_vect) { //timer cada 1ms
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	8f 93       	push	r24
     752:	9f 93       	push	r25
	if (tdeb > 0)
     754:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     758:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     75c:	18 16       	cp	r1, r24
     75e:	19 06       	cpc	r1, r25
     760:	34 f4       	brge	.+12     	; 0x76e <__vector_7+0x2c>
	{
		tdeb--;
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     768:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     76c:	04 c0       	rjmp	.+8      	; 0x776 <__vector_7+0x34>
	}
	else{
		deb = 0;
     76e:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <deb+0x1>
     772:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <deb>
	}
	t++;
     776:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     77a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
     784:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
	if (t == 8)
     788:	88 30       	cpi	r24, 0x08	; 8
     78a:	91 05       	cpc	r25, r1
     78c:	29 f4       	brne	.+10     	; 0x798 <__vector_7+0x56>
	{
		t = 0;
     78e:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <__data_end+0x1>
     792:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <__data_end>
     796:	1c c0       	rjmp	.+56     	; 0x7d0 <__vector_7+0x8e>
	}
	//barrido
	if((t == 1)||(t == 3)||(t == 5)||(t == 7))	{ neutro }
     798:	9c 01       	movw	r18, r24
     79a:	2d 7f       	andi	r18, 0xFD	; 253
     79c:	21 30       	cpi	r18, 0x01	; 1
     79e:	31 05       	cpc	r19, r1
     7a0:	19 f0       	breq	.+6      	; 0x7a8 <__vector_7+0x66>
     7a2:	25 30       	cpi	r18, 0x05	; 5
     7a4:	31 05       	cpc	r19, r1
     7a6:	39 f4       	brne	.+14     	; 0x7b6 <__vector_7+0x74>
     7a8:	88 b1       	in	r24, 0x08	; 8
     7aa:	83 60       	ori	r24, 0x03	; 3
     7ac:	88 b9       	out	0x08, r24	; 8
     7ae:	8b b1       	in	r24, 0x0b	; 11
     7b0:	8c 60       	ori	r24, 0x0C	; 12
     7b2:	8b b9       	out	0x0b, r24	; 11
     7b4:	2a c0       	rjmp	.+84     	; 0x80a <__vector_7+0xc8>
	else{
		switch(t){
     7b6:	82 30       	cpi	r24, 0x02	; 2
     7b8:	91 05       	cpc	r25, r1
     7ba:	81 f0       	breq	.+32     	; 0x7dc <__vector_7+0x9a>
     7bc:	1c f4       	brge	.+6      	; 0x7c4 <__vector_7+0x82>
     7be:	89 2b       	or	r24, r25
     7c0:	21 f5       	brne	.+72     	; 0x80a <__vector_7+0xc8>
     7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <__vector_7+0x8e>
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	91 05       	cpc	r25, r1
     7c8:	89 f0       	breq	.+34     	; 0x7ec <__vector_7+0xaa>
     7ca:	06 97       	sbiw	r24, 0x06	; 6
     7cc:	b9 f0       	breq	.+46     	; 0x7fc <__vector_7+0xba>
     7ce:	1d c0       	rjmp	.+58     	; 0x80a <__vector_7+0xc8>
			case 0: p1 break;
     7d0:	40 98       	cbi	0x08, 0	; 8
     7d2:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <linea+0x1>
     7d6:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <linea>
     7da:	17 c0       	rjmp	.+46     	; 0x80a <__vector_7+0xc8>
			case 2: p2 break;
     7dc:	41 98       	cbi	0x08, 1	; 8
     7de:	88 e0       	ldi	r24, 0x08	; 8
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <linea+0x1>
     7e6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <linea>
     7ea:	0f c0       	rjmp	.+30     	; 0x80a <__vector_7+0xc8>
			case 4: p3 break;
     7ec:	5a 98       	cbi	0x0b, 2	; 11
     7ee:	80 e1       	ldi	r24, 0x10	; 16
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <linea+0x1>
     7f6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <linea>
     7fa:	07 c0       	rjmp	.+14     	; 0x80a <__vector_7+0xc8>
			case 6: p4 break;
     7fc:	5b 98       	cbi	0x0b, 3	; 11
     7fe:	88 e1       	ldi	r24, 0x18	; 24
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <linea+0x1>
     806:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <linea>
		}
	}
}
     80a:	9f 91       	pop	r25
     80c:	8f 91       	pop	r24
     80e:	3f 91       	pop	r19
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <main>:

int main(void)
{
	St7735Init();
     81c:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <St7735Init>
	UpdateScreen();
     820:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <UpdateScreen>
	tecladoInit();
     824:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <tecladoInit>
	USART_Init(MYUBRR);
     828:	80 e1       	ldi	r24, 0x10	; 16
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <USART_Init>
	USART_Transmit_String("HOLA");	
     830:	85 e2       	ldi	r24, 0x25	; 37
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 5d 16 	call	0x2cba	; 0x2cba <USART_Transmit_String>
	sei();
     838:	78 94       	sei
		
	SetPosition(25, 55);
     83a:	67 e3       	ldi	r22, 0x37	; 55
     83c:	89 e1       	ldi	r24, 0x19	; 25
     83e:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
	DrawString("Inicio programa", 0x0000, X2);
     842:	41 e0       	ldi	r20, 0x01	; 1
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	8a e2       	ldi	r24, 0x2A	; 42
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <DrawString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     850:	2f e7       	ldi	r18, 0x7F	; 127
     852:	84 e8       	ldi	r24, 0x84	; 132
     854:	9e e1       	ldi	r25, 0x1E	; 30
     856:	21 50       	subi	r18, 0x01	; 1
     858:	80 40       	sbci	r24, 0x00	; 0
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <main+0x3a>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <main+0x44>
     860:	00 00       	nop
	_delay_ms(10000);
	ClearScreen(0xffff);	
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	9f ef       	ldi	r25, 0xFF	; 255
     866:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ClearScreen>
     86a:	ff cf       	rjmp	.-2      	; 0x86a <main+0x4e>

0000086c <floatToString>:
	
}
}

void floatToString(float numero, char* str) //recibe un float y el string donde guardar
{
     86c:	cf 92       	push	r12
     86e:	df 92       	push	r13
     870:	ef 92       	push	r14
     872:	ff 92       	push	r15
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
     880:	8a 01       	movw	r16, r20
	int decimales = 0;
	if((numero > 9999999) || (numero < -9999999)) //mas de 7 digitos
     882:	2f e7       	ldi	r18, 0x7F	; 127
     884:	36 e9       	ldi	r19, 0x96	; 150
     886:	48 e1       	ldi	r20, 0x18	; 24
     888:	5b e4       	ldi	r21, 0x4B	; 75
     88a:	0e 94 b2 18 	call	0x3164	; 0x3164 <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	54 f0       	brlt	.+20     	; 0x8a6 <floatToString+0x3a>
     892:	2f e7       	ldi	r18, 0x7F	; 127
     894:	36 e9       	ldi	r19, 0x96	; 150
     896:	48 e1       	ldi	r20, 0x18	; 24
     898:	5b ec       	ldi	r21, 0xCB	; 203
     89a:	c7 01       	movw	r24, r14
     89c:	b6 01       	movw	r22, r12
     89e:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__cmpsf2>
     8a2:	88 23       	and	r24, r24
     8a4:	7c f4       	brge	.+30     	; 0x8c4 <floatToString+0x58>
	{
		strcpy(str,"       ovf");
     8a6:	8b e0       	ldi	r24, 0x0B	; 11
     8a8:	ea e3       	ldi	r30, 0x3A	; 58
     8aa:	f1 e0       	ldi	r31, 0x01	; 1
     8ac:	d8 01       	movw	r26, r16
     8ae:	01 90       	ld	r0, Z+
     8b0:	0d 92       	st	X+, r0
     8b2:	8a 95       	dec	r24
     8b4:	e1 f7       	brne	.-8      	; 0x8ae <floatToString+0x42>
		ovfe = 1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ovfe+0x1>
     8be:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <ovfe>
     8c2:	a7 c0       	rjmp	.+334    	; 0xa12 <__stack+0x113>
	}
	else if (numero >= 0) //positivos
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	a9 01       	movw	r20, r18
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	0e 94 b2 18 	call	0x3164	; 0x3164 <__gesf2>
     8d2:	88 23       	and	r24, r24
     8d4:	0c f4       	brge	.+2      	; 0x8d8 <floatToString+0x6c>
     8d6:	4a c0       	rjmp	.+148    	; 0x96c <__stack+0x6d>
	{
		if     (numero <     10) {decimales = 5;}
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	40 e2       	ldi	r20, 0x20	; 32
     8de:	51 e4       	ldi	r21, 0x41	; 65
     8e0:	c7 01       	movw	r24, r14
     8e2:	b6 01       	movw	r22, r12
     8e4:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__cmpsf2>
     8e8:	88 23       	and	r24, r24
     8ea:	74 f1       	brlt	.+92     	; 0x948 <__stack+0x49>
		else if(numero <    100) {decimales = 4;}
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	48 ec       	ldi	r20, 0xC8	; 200
     8f2:	52 e4       	ldi	r21, 0x42	; 66
     8f4:	c7 01       	movw	r24, r14
     8f6:	b6 01       	movw	r22, r12
     8f8:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__cmpsf2>
     8fc:	88 23       	and	r24, r24
     8fe:	3c f1       	brlt	.+78     	; 0x94e <__stack+0x4f>
		else if(numero <   1000) {decimales = 3;}
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	4a e7       	ldi	r20, 0x7A	; 122
     906:	54 e4       	ldi	r21, 0x44	; 68
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__cmpsf2>
     910:	88 23       	and	r24, r24
     912:	04 f1       	brlt	.+64     	; 0x954 <__stack+0x55>
		else if(numero <  10000) {decimales = 2;}
     914:	20 e0       	ldi	r18, 0x00	; 0
     916:	30 e4       	ldi	r19, 0x40	; 64
     918:	4c e1       	ldi	r20, 0x1C	; 28
     91a:	56 e4       	ldi	r21, 0x46	; 70
     91c:	c7 01       	movw	r24, r14
     91e:	b6 01       	movw	r22, r12
     920:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__cmpsf2>
     924:	88 23       	and	r24, r24
     926:	cc f0       	brlt	.+50     	; 0x95a <__stack+0x5b>
		strcpy(str,"       ovf");
		ovfe = 1;
	}
	else if (numero >= 0) //positivos
	{
		if     (numero <     10) {decimales = 5;}
     928:	d1 e0       	ldi	r29, 0x01	; 1
     92a:	c0 e0       	ldi	r28, 0x00	; 0
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e5       	ldi	r19, 0x50	; 80
     930:	43 ec       	ldi	r20, 0xC3	; 195
     932:	57 e4       	ldi	r21, 0x47	; 71
     934:	c7 01       	movw	r24, r14
     936:	b6 01       	movw	r22, r12
     938:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__cmpsf2>
     93c:	88 23       	and	r24, r24
     93e:	0c f0       	brlt	.+2      	; 0x942 <__stack+0x43>
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	2d 2f       	mov	r18, r29
     944:	3c 2f       	mov	r19, r28
     946:	0b c0       	rjmp	.+22     	; 0x95e <__stack+0x5f>
     948:	25 e0       	ldi	r18, 0x05	; 5
     94a:	30 e0       	ldi	r19, 0x00	; 0
     94c:	08 c0       	rjmp	.+16     	; 0x95e <__stack+0x5f>
		else if(numero <    100) {decimales = 4;}
     94e:	24 e0       	ldi	r18, 0x04	; 4
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	05 c0       	rjmp	.+10     	; 0x95e <__stack+0x5f>
		else if(numero <   1000) {decimales = 3;}
     954:	23 e0       	ldi	r18, 0x03	; 3
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0x5f>
		else if(numero <  10000) {decimales = 2;}
     95a:	22 e0       	ldi	r18, 0x02	; 2
     95c:	30 e0       	ldi	r19, 0x00	; 0
		else if(numero < 100000) {decimales = 1;}
		dtostrf(numero,10, decimales, str);
     95e:	4a e0       	ldi	r20, 0x0A	; 10
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	c7 01       	movw	r24, r14
     964:	b6 01       	movw	r22, r12
     966:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <dtostrf>
     96a:	53 c0       	rjmp	.+166    	; 0xa12 <__stack+0x113>
	}
	else if (numero < 0)  //negativos
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	a9 01       	movw	r20, r18
     972:	c7 01       	movw	r24, r14
     974:	b6 01       	movw	r22, r12
     976:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <__cmpsf2>
     97a:	88 23       	and	r24, r24
     97c:	0c f0       	brlt	.+2      	; 0x980 <__stack+0x81>
     97e:	49 c0       	rjmp	.+146    	; 0xa12 <__stack+0x113>
	{
		if     (numero >    -10) {decimales = 5;}
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e2       	ldi	r20, 0x20	; 32
     986:	51 ec       	ldi	r21, 0xC1	; 193
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 b2 18 	call	0x3164	; 0x3164 <__gesf2>
     990:	18 16       	cp	r1, r24
     992:	74 f1       	brlt	.+92     	; 0x9f0 <__stack+0xf1>
		else if(numero >   -100) {decimales = 4;}
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	48 ec       	ldi	r20, 0xC8	; 200
     99a:	52 ec       	ldi	r21, 0xC2	; 194
     99c:	c7 01       	movw	r24, r14
     99e:	b6 01       	movw	r22, r12
     9a0:	0e 94 b2 18 	call	0x3164	; 0x3164 <__gesf2>
     9a4:	18 16       	cp	r1, r24
     9a6:	3c f1       	brlt	.+78     	; 0x9f6 <__stack+0xf7>
		else if(numero >  -1000) {decimales = 3;}
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	4a e7       	ldi	r20, 0x7A	; 122
     9ae:	54 ec       	ldi	r21, 0xC4	; 196
     9b0:	c7 01       	movw	r24, r14
     9b2:	b6 01       	movw	r22, r12
     9b4:	0e 94 b2 18 	call	0x3164	; 0x3164 <__gesf2>
     9b8:	18 16       	cp	r1, r24
     9ba:	04 f1       	brlt	.+64     	; 0x9fc <__stack+0xfd>
		else if(numero > -10000) {decimales = 2;}
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e4       	ldi	r19, 0x40	; 64
     9c0:	4c e1       	ldi	r20, 0x1C	; 28
     9c2:	56 ec       	ldi	r21, 0xC6	; 198
     9c4:	c7 01       	movw	r24, r14
     9c6:	b6 01       	movw	r22, r12
     9c8:	0e 94 b2 18 	call	0x3164	; 0x3164 <__gesf2>
     9cc:	18 16       	cp	r1, r24
     9ce:	cc f0       	brlt	.+50     	; 0xa02 <__stack+0x103>
		else if(numero < 100000) {decimales = 1;}
		dtostrf(numero,10, decimales, str);
	}
	else if (numero < 0)  //negativos
	{
		if     (numero >    -10) {decimales = 5;}
     9d0:	d1 e0       	ldi	r29, 0x01	; 1
     9d2:	c0 e0       	ldi	r28, 0x00	; 0
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	30 e5       	ldi	r19, 0x50	; 80
     9d8:	43 ec       	ldi	r20, 0xC3	; 195
     9da:	57 ec       	ldi	r21, 0xC7	; 199
     9dc:	c7 01       	movw	r24, r14
     9de:	b6 01       	movw	r22, r12
     9e0:	0e 94 b2 18 	call	0x3164	; 0x3164 <__gesf2>
     9e4:	18 16       	cp	r1, r24
     9e6:	0c f0       	brlt	.+2      	; 0x9ea <__stack+0xeb>
     9e8:	d0 e0       	ldi	r29, 0x00	; 0
     9ea:	2d 2f       	mov	r18, r29
     9ec:	3c 2f       	mov	r19, r28
     9ee:	0b c0       	rjmp	.+22     	; 0xa06 <__stack+0x107>
     9f0:	25 e0       	ldi	r18, 0x05	; 5
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	08 c0       	rjmp	.+16     	; 0xa06 <__stack+0x107>
		else if(numero >   -100) {decimales = 4;}
     9f6:	24 e0       	ldi	r18, 0x04	; 4
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__stack+0x107>
		else if(numero >  -1000) {decimales = 3;}
     9fc:	23 e0       	ldi	r18, 0x03	; 3
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <__stack+0x107>
		else if(numero > -10000) {decimales = 2;}
     a02:	22 e0       	ldi	r18, 0x02	; 2
     a04:	30 e0       	ldi	r19, 0x00	; 0
		else if(numero >-100000) {decimales = 1;}
		dtostrf(numero,10, decimales, str);
     a06:	4a e0       	ldi	r20, 0x0A	; 10
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	c7 01       	movw	r24, r14
     a0c:	b6 01       	movw	r22, r12
     a0e:	0e 94 e4 1a 	call	0x35c8	; 0x35c8 <dtostrf>
	}
}
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	ff 90       	pop	r15
     a1c:	ef 90       	pop	r14
     a1e:	df 90       	pop	r13
     a20:	cf 90       	pop	r12
     a22:	08 95       	ret

00000a24 <mostrar>:

//a partir de aca -> esto va en avr
void mostrar(int posicion)
{
	int ver = 1;
	switch(posicion)
     a24:	87 30       	cpi	r24, 0x07	; 7
     a26:	91 05       	cpc	r25, r1
     a28:	08 f0       	brcs	.+2      	; 0xa2c <mostrar+0x8>
     a2a:	67 c0       	rjmp	.+206    	; 0xafa <mostrar+0xd6>
     a2c:	fc 01       	movw	r30, r24
     a2e:	ec 5c       	subi	r30, 0xCC	; 204
     a30:	ff 4f       	sbci	r31, 0xFF	; 255
     a32:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__tablejump2__>
	{
		case 0: //limpiamos //0 limpia la pantalla!
		//strcpy(pantalla1,"         ");
		strcpy(pantalla2,"         ");
     a36:	8a e0       	ldi	r24, 0x0A	; 10
     a38:	eb e4       	ldi	r30, 0x4B	; 75
     a3a:	f1 e0       	ldi	r31, 0x01	; 1
     a3c:	a0 e7       	ldi	r26, 0x70	; 112
     a3e:	b1 e0       	ldi	r27, 0x01	; 1
     a40:	01 90       	ld	r0, Z+
     a42:	0d 92       	st	X+, r0
     a44:	8a 95       	dec	r24
     a46:	e1 f7       	brne	.-8      	; 0xa40 <mostrar+0x1c>
		pantalla3 = ' ';
     a48:	80 e2       	ldi	r24, 0x20	; 32
     a4a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pantalla3>
		strcpy(pantalla4,"         ");
     a4e:	8a e0       	ldi	r24, 0x0A	; 10
     a50:	eb e4       	ldi	r30, 0x4B	; 75
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	a6 e6       	ldi	r26, 0x66	; 102
     a56:	b1 e0       	ldi	r27, 0x01	; 1
     a58:	01 90       	ld	r0, Z+
     a5a:	0d 92       	st	X+, r0
     a5c:	8a 95       	dec	r24
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <mostrar+0x34>
     a60:	08 95       	ret
		ver = 0; break;
		case 1: floatToString(N1,salida);strcpy(pantalla1,salida); break;
     a62:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
     a66:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
     a6a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
     a6e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
     a72:	44 e8       	ldi	r20, 0x84	; 132
     a74:	51 e0       	ldi	r21, 0x01	; 1
     a76:	0e 94 36 04 	call	0x86c	; 0x86c <floatToString>
     a7a:	64 e8       	ldi	r22, 0x84	; 132
     a7c:	71 e0       	ldi	r23, 0x01	; 1
     a7e:	8a e7       	ldi	r24, 0x7A	; 122
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 04 1b 	call	0x3608	; 0x3608 <strcpy>
     a86:	39 c0       	rjmp	.+114    	; 0xafa <mostrar+0xd6>
		case 2: floatToString(N2,salida);strcpy(pantalla2,salida); break;
     a88:	60 91 9a 01 	lds	r22, 0x019A	; 0x80019a <N2>
     a8c:	70 91 9b 01 	lds	r23, 0x019B	; 0x80019b <N2+0x1>
     a90:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <N2+0x2>
     a94:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <N2+0x3>
     a98:	44 e8       	ldi	r20, 0x84	; 132
     a9a:	51 e0       	ldi	r21, 0x01	; 1
     a9c:	0e 94 36 04 	call	0x86c	; 0x86c <floatToString>
     aa0:	64 e8       	ldi	r22, 0x84	; 132
     aa2:	71 e0       	ldi	r23, 0x01	; 1
     aa4:	80 e7       	ldi	r24, 0x70	; 112
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 04 1b 	call	0x3608	; 0x3608 <strcpy>
     aac:	26 c0       	rjmp	.+76     	; 0xafa <mostrar+0xd6>
		case 3: pantalla3 = operador; break;		
     aae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <operador>
     ab2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <pantalla3>
     ab6:	21 c0       	rjmp	.+66     	; 0xafa <mostrar+0xd6>
		case 4: floatToString(N1,salida);strcpy(pantalla4,salida); break;		
     ab8:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
     abc:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
     ac0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
     ac4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
     ac8:	44 e8       	ldi	r20, 0x84	; 132
     aca:	51 e0       	ldi	r21, 0x01	; 1
     acc:	0e 94 36 04 	call	0x86c	; 0x86c <floatToString>
     ad0:	64 e8       	ldi	r22, 0x84	; 132
     ad2:	71 e0       	ldi	r23, 0x01	; 1
     ad4:	86 e6       	ldi	r24, 0x66	; 102
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	0e 94 04 1b 	call	0x3608	; 0x3608 <strcpy>
     adc:	0e c0       	rjmp	.+28     	; 0xafa <mostrar+0xd6>
		case 5: ClearScreen(0x0000);break;
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ClearScreen>
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <mostrar+0xd6>
		case 6: //error
		strcpy(pantalla1,"Error");
     ae8:	86 e0       	ldi	r24, 0x06	; 6
     aea:	e5 e4       	ldi	r30, 0x45	; 69
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	aa e7       	ldi	r26, 0x7A	; 122
     af0:	b1 e0       	ldi	r27, 0x01	; 1
     af2:	01 90       	ld	r0, Z+
     af4:	0d 92       	st	X+, r0
     af6:	8a 95       	dec	r24
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <mostrar+0xce>
	}
	if(ver)
	{
		//actualizar pantalla con respectivos strings aca [borrar estos Serial.println(), son de arduino]
	
	if(pantalla1!= "         ") {first_grid(pantalla1);} second_grid(pantalla2); thrid_grid(pantalla4);fourth_grid(pantalla3);
     afa:	8a e7       	ldi	r24, 0x7A	; 122
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	21 e0       	ldi	r18, 0x01	; 1
     b00:	8b 34       	cpi	r24, 0x4B	; 75
     b02:	92 07       	cpc	r25, r18
     b04:	11 f0       	breq	.+4      	; 0xb0a <mostrar+0xe6>
     b06:	0e 94 c6 02 	call	0x58c	; 0x58c <first_grid>
     b0a:	80 e7       	ldi	r24, 0x70	; 112
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <second_grid>
     b12:	86 e6       	ldi	r24, 0x66	; 102
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 39 03 	call	0x672	; 0x672 <thrid_grid>
     b1a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <pantalla3>
     b1e:	0e 94 77 03 	call	0x6ee	; 0x6ee <fourth_grid>
     b22:	08 95       	ret

00000b24 <actualizarNumero>:
		dtostrf(numero,10, decimales, str);
	}
}

void actualizarNumero(int n, char num) //actualiza numero n con num
{
     b24:	8f 92       	push	r8
     b26:	9f 92       	push	r9
     b28:	af 92       	push	r10
     b2a:	bf 92       	push	r11
     b2c:	cf 92       	push	r12
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
	if(contadorPunto < 7){
     b3c:	c0 91 90 01 	lds	r28, 0x0190	; 0x800190 <contadorPunto>
     b40:	d0 91 91 01 	lds	r29, 0x0191	; 0x800191 <contadorPunto+0x1>
     b44:	c7 30       	cpi	r28, 0x07	; 7
     b46:	d1 05       	cpc	r29, r1
     b48:	0c f0       	brlt	.+2      	; 0xb4c <actualizarNumero+0x28>
     b4a:	f7 c5       	rjmp	.+3054   	; 0x173a <actualizarNumero+0xc16>
		if(n == 1)//N1
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	09 f0       	breq	.+2      	; 0xb52 <actualizarNumero+0x2e>
     b50:	e5 c2       	rjmp	.+1482   	; 0x111c <actualizarNumero+0x5f8>
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     b52:	00 91 92 01 	lds	r16, 0x0192	; 0x800192 <punto>
     b56:	10 91 93 01 	lds	r17, 0x0193	; 0x800193 <punto+0x1>
     b5a:	01 15       	cp	r16, r1
     b5c:	11 05       	cpc	r17, r1
     b5e:	09 f0       	breq	.+2      	; 0xb62 <actualizarNumero+0x3e>
     b60:	be c5       	rjmp	.+2940   	; 0x16de <actualizarNumero+0xbba>
     b62:	c9 c5       	rjmp	.+2962   	; 0x16f6 <actualizarNumero+0xbd2>
     b64:	0f 2e       	mov	r0, r31
     b66:	c1 2c       	mov	r12, r1
     b68:	d1 2c       	mov	r13, r1
     b6a:	f0 e8       	ldi	r31, 0x80	; 128
     b6c:	ef 2e       	mov	r14, r31
     b6e:	ff e3       	ldi	r31, 0x3F	; 63
     b70:	ff 2e       	mov	r15, r31
     b72:	f0 2d       	mov	r31, r0
     b74:	08 c0       	rjmp	.+16     	; 0xb86 <actualizarNumero+0x62>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     b76:	0f 2e       	mov	r0, r31
     b78:	c1 2c       	mov	r12, r1
     b7a:	d1 2c       	mov	r13, r1
     b7c:	f0 e2       	ldi	r31, 0x20	; 32
     b7e:	ef 2e       	mov	r14, r31
     b80:	f1 e4       	ldi	r31, 0x41	; 65
     b82:	ff 2e       	mov	r15, r31
     b84:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N1 = N1*sumar + 0/pow(10,contadorPunto); break;
     b86:	be 01       	movw	r22, r28
     b88:	0d 2e       	mov	r0, r29
     b8a:	00 0c       	add	r0, r0
     b8c:	88 0b       	sbc	r24, r24
     b8e:	99 0b       	sbc	r25, r25
     b90:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     b94:	9b 01       	movw	r18, r22
     b96:	ac 01       	movw	r20, r24
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	91 e4       	ldi	r25, 0x41	; 65
     ba0:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     ba4:	4b 01       	movw	r8, r22
     ba6:	5c 01       	movw	r10, r24
     ba8:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     bac:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     bb0:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     bb4:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     bc0:	6b 01       	movw	r12, r22
     bc2:	7c 01       	movw	r14, r24
     bc4:	a5 01       	movw	r20, r10
     bc6:	94 01       	movw	r18, r8
     bc8:	60 e0       	ldi	r22, 0x00	; 0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	cb 01       	movw	r24, r22
     bce:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	c7 01       	movw	r24, r14
     bd8:	b6 01       	movw	r22, r12
     bda:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     bde:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     be2:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     be6:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     bea:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     bee:	86 c2       	rjmp	.+1292   	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     bf0:	0f 2e       	mov	r0, r31
     bf2:	c1 2c       	mov	r12, r1
     bf4:	d1 2c       	mov	r13, r1
     bf6:	f0 e8       	ldi	r31, 0x80	; 128
     bf8:	ef 2e       	mov	r14, r31
     bfa:	ff e3       	ldi	r31, 0x3F	; 63
     bfc:	ff 2e       	mov	r15, r31
     bfe:	f0 2d       	mov	r31, r0
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <actualizarNumero+0xee>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     c02:	0f 2e       	mov	r0, r31
     c04:	c1 2c       	mov	r12, r1
     c06:	d1 2c       	mov	r13, r1
     c08:	f0 e2       	ldi	r31, 0x20	; 32
     c0a:	ef 2e       	mov	r14, r31
     c0c:	f1 e4       	ldi	r31, 0x41	; 65
     c0e:	ff 2e       	mov	r15, r31
     c10:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N1 = N1*sumar + 0/pow(10,contadorPunto); break;
				case '1': N1 = N1*sumar + 1/pow(10,contadorPunto); break;
     c12:	be 01       	movw	r22, r28
     c14:	0d 2e       	mov	r0, r29
     c16:	00 0c       	add	r0, r0
     c18:	88 0b       	sbc	r24, r24
     c1a:	99 0b       	sbc	r25, r25
     c1c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     c20:	9b 01       	movw	r18, r22
     c22:	ac 01       	movw	r20, r24
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	80 e2       	ldi	r24, 0x20	; 32
     c2a:	91 e4       	ldi	r25, 0x41	; 65
     c2c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     c30:	4b 01       	movw	r8, r22
     c32:	5c 01       	movw	r10, r24
     c34:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     c38:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     c3c:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     c40:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     c44:	c7 01       	movw	r24, r14
     c46:	b6 01       	movw	r22, r12
     c48:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     c4c:	6b 01       	movw	r12, r22
     c4e:	7c 01       	movw	r14, r24
     c50:	a5 01       	movw	r20, r10
     c52:	94 01       	movw	r18, r8
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	80 e8       	ldi	r24, 0x80	; 128
     c5a:	9f e3       	ldi	r25, 0x3F	; 63
     c5c:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     c60:	9b 01       	movw	r18, r22
     c62:	ac 01       	movw	r20, r24
     c64:	c7 01       	movw	r24, r14
     c66:	b6 01       	movw	r22, r12
     c68:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     c6c:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     c70:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     c74:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     c78:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     c7c:	3f c2       	rjmp	.+1150   	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     c7e:	0f 2e       	mov	r0, r31
     c80:	c1 2c       	mov	r12, r1
     c82:	d1 2c       	mov	r13, r1
     c84:	f0 e8       	ldi	r31, 0x80	; 128
     c86:	ef 2e       	mov	r14, r31
     c88:	ff e3       	ldi	r31, 0x3F	; 63
     c8a:	ff 2e       	mov	r15, r31
     c8c:	f0 2d       	mov	r31, r0
     c8e:	08 c0       	rjmp	.+16     	; 0xca0 <actualizarNumero+0x17c>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     c90:	0f 2e       	mov	r0, r31
     c92:	c1 2c       	mov	r12, r1
     c94:	d1 2c       	mov	r13, r1
     c96:	f0 e2       	ldi	r31, 0x20	; 32
     c98:	ef 2e       	mov	r14, r31
     c9a:	f1 e4       	ldi	r31, 0x41	; 65
     c9c:	ff 2e       	mov	r15, r31
     c9e:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N1 = N1*sumar + 0/pow(10,contadorPunto); break;
				case '1': N1 = N1*sumar + 1/pow(10,contadorPunto); break;
				case '2': N1 = N1*sumar + 2/pow(10,contadorPunto); break;
     ca0:	be 01       	movw	r22, r28
     ca2:	0d 2e       	mov	r0, r29
     ca4:	00 0c       	add	r0, r0
     ca6:	88 0b       	sbc	r24, r24
     ca8:	99 0b       	sbc	r25, r25
     caa:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     cae:	9b 01       	movw	r18, r22
     cb0:	ac 01       	movw	r20, r24
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	80 e2       	ldi	r24, 0x20	; 32
     cb8:	91 e4       	ldi	r25, 0x41	; 65
     cba:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     cbe:	4b 01       	movw	r8, r22
     cc0:	5c 01       	movw	r10, r24
     cc2:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     cc6:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     cca:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     cce:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     cd2:	c7 01       	movw	r24, r14
     cd4:	b6 01       	movw	r22, r12
     cd6:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     cda:	6b 01       	movw	r12, r22
     cdc:	7c 01       	movw	r14, r24
     cde:	a5 01       	movw	r20, r10
     ce0:	94 01       	movw	r18, r8
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e4       	ldi	r25, 0x40	; 64
     cea:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     cee:	9b 01       	movw	r18, r22
     cf0:	ac 01       	movw	r20, r24
     cf2:	c7 01       	movw	r24, r14
     cf4:	b6 01       	movw	r22, r12
     cf6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     cfa:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     cfe:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     d02:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     d06:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     d0a:	f8 c1       	rjmp	.+1008   	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     d0c:	0f 2e       	mov	r0, r31
     d0e:	c1 2c       	mov	r12, r1
     d10:	d1 2c       	mov	r13, r1
     d12:	f0 e8       	ldi	r31, 0x80	; 128
     d14:	ef 2e       	mov	r14, r31
     d16:	ff e3       	ldi	r31, 0x3F	; 63
     d18:	ff 2e       	mov	r15, r31
     d1a:	f0 2d       	mov	r31, r0
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <actualizarNumero+0x20a>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     d1e:	0f 2e       	mov	r0, r31
     d20:	c1 2c       	mov	r12, r1
     d22:	d1 2c       	mov	r13, r1
     d24:	f0 e2       	ldi	r31, 0x20	; 32
     d26:	ef 2e       	mov	r14, r31
     d28:	f1 e4       	ldi	r31, 0x41	; 65
     d2a:	ff 2e       	mov	r15, r31
     d2c:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N1 = N1*sumar + 0/pow(10,contadorPunto); break;
				case '1': N1 = N1*sumar + 1/pow(10,contadorPunto); break;
				case '2': N1 = N1*sumar + 2/pow(10,contadorPunto); break;
				case '3': N1 = N1*sumar + 3/pow(10,contadorPunto); break;
     d2e:	be 01       	movw	r22, r28
     d30:	0d 2e       	mov	r0, r29
     d32:	00 0c       	add	r0, r0
     d34:	88 0b       	sbc	r24, r24
     d36:	99 0b       	sbc	r25, r25
     d38:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	80 e2       	ldi	r24, 0x20	; 32
     d46:	91 e4       	ldi	r25, 0x41	; 65
     d48:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     d4c:	4b 01       	movw	r8, r22
     d4e:	5c 01       	movw	r10, r24
     d50:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     d54:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     d58:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     d5c:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     d60:	c7 01       	movw	r24, r14
     d62:	b6 01       	movw	r22, r12
     d64:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     d68:	6b 01       	movw	r12, r22
     d6a:	7c 01       	movw	r14, r24
     d6c:	a5 01       	movw	r20, r10
     d6e:	94 01       	movw	r18, r8
     d70:	60 e0       	ldi	r22, 0x00	; 0
     d72:	70 e0       	ldi	r23, 0x00	; 0
     d74:	80 e4       	ldi	r24, 0x40	; 64
     d76:	90 e4       	ldi	r25, 0x40	; 64
     d78:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	c7 01       	movw	r24, r14
     d82:	b6 01       	movw	r22, r12
     d84:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     d88:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     d8c:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     d90:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     d94:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     d98:	b1 c1       	rjmp	.+866    	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     d9a:	0f 2e       	mov	r0, r31
     d9c:	c1 2c       	mov	r12, r1
     d9e:	d1 2c       	mov	r13, r1
     da0:	f0 e8       	ldi	r31, 0x80	; 128
     da2:	ef 2e       	mov	r14, r31
     da4:	ff e3       	ldi	r31, 0x3F	; 63
     da6:	ff 2e       	mov	r15, r31
     da8:	f0 2d       	mov	r31, r0
     daa:	08 c0       	rjmp	.+16     	; 0xdbc <actualizarNumero+0x298>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     dac:	0f 2e       	mov	r0, r31
     dae:	c1 2c       	mov	r12, r1
     db0:	d1 2c       	mov	r13, r1
     db2:	f0 e2       	ldi	r31, 0x20	; 32
     db4:	ef 2e       	mov	r14, r31
     db6:	f1 e4       	ldi	r31, 0x41	; 65
     db8:	ff 2e       	mov	r15, r31
     dba:	f0 2d       	mov	r31, r0
			switch (num){
				case '0': N1 = N1*sumar + 0/pow(10,contadorPunto); break;
				case '1': N1 = N1*sumar + 1/pow(10,contadorPunto); break;
				case '2': N1 = N1*sumar + 2/pow(10,contadorPunto); break;
				case '3': N1 = N1*sumar + 3/pow(10,contadorPunto); break;
				case '4': N1 = N1*sumar + 4/pow(10,contadorPunto); break;
     dbc:	be 01       	movw	r22, r28
     dbe:	0d 2e       	mov	r0, r29
     dc0:	00 0c       	add	r0, r0
     dc2:	88 0b       	sbc	r24, r24
     dc4:	99 0b       	sbc	r25, r25
     dc6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     dca:	9b 01       	movw	r18, r22
     dcc:	ac 01       	movw	r20, r24
     dce:	60 e0       	ldi	r22, 0x00	; 0
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	80 e2       	ldi	r24, 0x20	; 32
     dd4:	91 e4       	ldi	r25, 0x41	; 65
     dd6:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     dda:	4b 01       	movw	r8, r22
     ddc:	5c 01       	movw	r10, r24
     dde:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     de2:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     de6:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     dea:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     dee:	c7 01       	movw	r24, r14
     df0:	b6 01       	movw	r22, r12
     df2:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     df6:	6b 01       	movw	r12, r22
     df8:	7c 01       	movw	r14, r24
     dfa:	a5 01       	movw	r20, r10
     dfc:	94 01       	movw	r18, r8
     dfe:	60 e0       	ldi	r22, 0x00	; 0
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	80 e8       	ldi	r24, 0x80	; 128
     e04:	90 e4       	ldi	r25, 0x40	; 64
     e06:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	c7 01       	movw	r24, r14
     e10:	b6 01       	movw	r22, r12
     e12:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     e16:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     e1a:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     e1e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     e22:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     e26:	6a c1       	rjmp	.+724    	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     e28:	0f 2e       	mov	r0, r31
     e2a:	c1 2c       	mov	r12, r1
     e2c:	d1 2c       	mov	r13, r1
     e2e:	f0 e8       	ldi	r31, 0x80	; 128
     e30:	ef 2e       	mov	r14, r31
     e32:	ff e3       	ldi	r31, 0x3F	; 63
     e34:	ff 2e       	mov	r15, r31
     e36:	f0 2d       	mov	r31, r0
     e38:	08 c0       	rjmp	.+16     	; 0xe4a <actualizarNumero+0x326>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     e3a:	0f 2e       	mov	r0, r31
     e3c:	c1 2c       	mov	r12, r1
     e3e:	d1 2c       	mov	r13, r1
     e40:	f0 e2       	ldi	r31, 0x20	; 32
     e42:	ef 2e       	mov	r14, r31
     e44:	f1 e4       	ldi	r31, 0x41	; 65
     e46:	ff 2e       	mov	r15, r31
     e48:	f0 2d       	mov	r31, r0
				case '0': N1 = N1*sumar + 0/pow(10,contadorPunto); break;
				case '1': N1 = N1*sumar + 1/pow(10,contadorPunto); break;
				case '2': N1 = N1*sumar + 2/pow(10,contadorPunto); break;
				case '3': N1 = N1*sumar + 3/pow(10,contadorPunto); break;
				case '4': N1 = N1*sumar + 4/pow(10,contadorPunto); break;
				case '5': N1 = N1*sumar + 5/pow(10,contadorPunto); break;
     e4a:	be 01       	movw	r22, r28
     e4c:	0d 2e       	mov	r0, r29
     e4e:	00 0c       	add	r0, r0
     e50:	88 0b       	sbc	r24, r24
     e52:	99 0b       	sbc	r25, r25
     e54:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	80 e2       	ldi	r24, 0x20	; 32
     e62:	91 e4       	ldi	r25, 0x41	; 65
     e64:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     e68:	4b 01       	movw	r8, r22
     e6a:	5c 01       	movw	r10, r24
     e6c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     e70:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     e74:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     e78:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     e7c:	c7 01       	movw	r24, r14
     e7e:	b6 01       	movw	r22, r12
     e80:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     e84:	6b 01       	movw	r12, r22
     e86:	7c 01       	movw	r14, r24
     e88:	a5 01       	movw	r20, r10
     e8a:	94 01       	movw	r18, r8
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 ea       	ldi	r24, 0xA0	; 160
     e92:	90 e4       	ldi	r25, 0x40	; 64
     e94:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     e98:	9b 01       	movw	r18, r22
     e9a:	ac 01       	movw	r20, r24
     e9c:	c7 01       	movw	r24, r14
     e9e:	b6 01       	movw	r22, r12
     ea0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     ea4:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     ea8:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     eac:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     eb0:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     eb4:	23 c1       	rjmp	.+582    	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     eb6:	0f 2e       	mov	r0, r31
     eb8:	c1 2c       	mov	r12, r1
     eba:	d1 2c       	mov	r13, r1
     ebc:	f0 e8       	ldi	r31, 0x80	; 128
     ebe:	ef 2e       	mov	r14, r31
     ec0:	ff e3       	ldi	r31, 0x3F	; 63
     ec2:	ff 2e       	mov	r15, r31
     ec4:	f0 2d       	mov	r31, r0
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <actualizarNumero+0x3b4>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     ec8:	0f 2e       	mov	r0, r31
     eca:	c1 2c       	mov	r12, r1
     ecc:	d1 2c       	mov	r13, r1
     ece:	f0 e2       	ldi	r31, 0x20	; 32
     ed0:	ef 2e       	mov	r14, r31
     ed2:	f1 e4       	ldi	r31, 0x41	; 65
     ed4:	ff 2e       	mov	r15, r31
     ed6:	f0 2d       	mov	r31, r0
				case '1': N1 = N1*sumar + 1/pow(10,contadorPunto); break;
				case '2': N1 = N1*sumar + 2/pow(10,contadorPunto); break;
				case '3': N1 = N1*sumar + 3/pow(10,contadorPunto); break;
				case '4': N1 = N1*sumar + 4/pow(10,contadorPunto); break;
				case '5': N1 = N1*sumar + 5/pow(10,contadorPunto); break;
				case '6': N1 = N1*sumar + 6/pow(10,contadorPunto); break;
     ed8:	be 01       	movw	r22, r28
     eda:	0d 2e       	mov	r0, r29
     edc:	00 0c       	add	r0, r0
     ede:	88 0b       	sbc	r24, r24
     ee0:	99 0b       	sbc	r25, r25
     ee2:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     ee6:	9b 01       	movw	r18, r22
     ee8:	ac 01       	movw	r20, r24
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	80 e2       	ldi	r24, 0x20	; 32
     ef0:	91 e4       	ldi	r25, 0x41	; 65
     ef2:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     ef6:	4b 01       	movw	r8, r22
     ef8:	5c 01       	movw	r10, r24
     efa:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     efe:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     f02:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     f06:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     f12:	6b 01       	movw	r12, r22
     f14:	7c 01       	movw	r14, r24
     f16:	a5 01       	movw	r20, r10
     f18:	94 01       	movw	r18, r8
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 ec       	ldi	r24, 0xC0	; 192
     f20:	90 e4       	ldi	r25, 0x40	; 64
     f22:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     f26:	9b 01       	movw	r18, r22
     f28:	ac 01       	movw	r20, r24
     f2a:	c7 01       	movw	r24, r14
     f2c:	b6 01       	movw	r22, r12
     f2e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     f32:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     f36:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     f3a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     f3e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     f42:	dc c0       	rjmp	.+440    	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     f44:	0f 2e       	mov	r0, r31
     f46:	c1 2c       	mov	r12, r1
     f48:	d1 2c       	mov	r13, r1
     f4a:	f0 e8       	ldi	r31, 0x80	; 128
     f4c:	ef 2e       	mov	r14, r31
     f4e:	ff e3       	ldi	r31, 0x3F	; 63
     f50:	ff 2e       	mov	r15, r31
     f52:	f0 2d       	mov	r31, r0
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <actualizarNumero+0x442>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     f56:	0f 2e       	mov	r0, r31
     f58:	c1 2c       	mov	r12, r1
     f5a:	d1 2c       	mov	r13, r1
     f5c:	f0 e2       	ldi	r31, 0x20	; 32
     f5e:	ef 2e       	mov	r14, r31
     f60:	f1 e4       	ldi	r31, 0x41	; 65
     f62:	ff 2e       	mov	r15, r31
     f64:	f0 2d       	mov	r31, r0
				case '2': N1 = N1*sumar + 2/pow(10,contadorPunto); break;
				case '3': N1 = N1*sumar + 3/pow(10,contadorPunto); break;
				case '4': N1 = N1*sumar + 4/pow(10,contadorPunto); break;
				case '5': N1 = N1*sumar + 5/pow(10,contadorPunto); break;
				case '6': N1 = N1*sumar + 6/pow(10,contadorPunto); break;
				case '7': N1 = N1*sumar + 7/pow(10,contadorPunto); break;
     f66:	be 01       	movw	r22, r28
     f68:	0d 2e       	mov	r0, r29
     f6a:	00 0c       	add	r0, r0
     f6c:	88 0b       	sbc	r24, r24
     f6e:	99 0b       	sbc	r25, r25
     f70:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
     f74:	9b 01       	movw	r18, r22
     f76:	ac 01       	movw	r20, r24
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	70 e0       	ldi	r23, 0x00	; 0
     f7c:	80 e2       	ldi	r24, 0x20	; 32
     f7e:	91 e4       	ldi	r25, 0x41	; 65
     f80:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
     f84:	4b 01       	movw	r8, r22
     f86:	5c 01       	movw	r10, r24
     f88:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
     f8c:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
     f90:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
     f94:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
     f98:	c7 01       	movw	r24, r14
     f9a:	b6 01       	movw	r22, r12
     f9c:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
     fa0:	6b 01       	movw	r12, r22
     fa2:	7c 01       	movw	r14, r24
     fa4:	a5 01       	movw	r20, r10
     fa6:	94 01       	movw	r18, r8
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	70 e0       	ldi	r23, 0x00	; 0
     fac:	80 ee       	ldi	r24, 0xE0	; 224
     fae:	90 e4       	ldi	r25, 0x40	; 64
     fb0:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
     fb4:	9b 01       	movw	r18, r22
     fb6:	ac 01       	movw	r20, r24
     fb8:	c7 01       	movw	r24, r14
     fba:	b6 01       	movw	r22, r12
     fbc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
     fc0:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
     fc4:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
     fc8:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
     fcc:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
     fd0:	95 c0       	rjmp	.+298    	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
     fd2:	0f 2e       	mov	r0, r31
     fd4:	c1 2c       	mov	r12, r1
     fd6:	d1 2c       	mov	r13, r1
     fd8:	f0 e8       	ldi	r31, 0x80	; 128
     fda:	ef 2e       	mov	r14, r31
     fdc:	ff e3       	ldi	r31, 0x3F	; 63
     fde:	ff 2e       	mov	r15, r31
     fe0:	f0 2d       	mov	r31, r0
     fe2:	08 c0       	rjmp	.+16     	; 0xff4 <actualizarNumero+0x4d0>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
     fe4:	0f 2e       	mov	r0, r31
     fe6:	c1 2c       	mov	r12, r1
     fe8:	d1 2c       	mov	r13, r1
     fea:	f0 e2       	ldi	r31, 0x20	; 32
     fec:	ef 2e       	mov	r14, r31
     fee:	f1 e4       	ldi	r31, 0x41	; 65
     ff0:	ff 2e       	mov	r15, r31
     ff2:	f0 2d       	mov	r31, r0
				case '3': N1 = N1*sumar + 3/pow(10,contadorPunto); break;
				case '4': N1 = N1*sumar + 4/pow(10,contadorPunto); break;
				case '5': N1 = N1*sumar + 5/pow(10,contadorPunto); break;
				case '6': N1 = N1*sumar + 6/pow(10,contadorPunto); break;
				case '7': N1 = N1*sumar + 7/pow(10,contadorPunto); break;
				case '8': N1 = N1*sumar + 8/pow(10,contadorPunto); break;
     ff4:	be 01       	movw	r22, r28
     ff6:	0d 2e       	mov	r0, r29
     ff8:	00 0c       	add	r0, r0
     ffa:	88 0b       	sbc	r24, r24
     ffc:	99 0b       	sbc	r25, r25
     ffe:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    1002:	9b 01       	movw	r18, r22
    1004:	ac 01       	movw	r20, r24
    1006:	60 e0       	ldi	r22, 0x00	; 0
    1008:	70 e0       	ldi	r23, 0x00	; 0
    100a:	80 e2       	ldi	r24, 0x20	; 32
    100c:	91 e4       	ldi	r25, 0x41	; 65
    100e:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    1012:	4b 01       	movw	r8, r22
    1014:	5c 01       	movw	r10, r24
    1016:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    101a:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    101e:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    1022:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    1026:	c7 01       	movw	r24, r14
    1028:	b6 01       	movw	r22, r12
    102a:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    102e:	6b 01       	movw	r12, r22
    1030:	7c 01       	movw	r14, r24
    1032:	a5 01       	movw	r20, r10
    1034:	94 01       	movw	r18, r8
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	91 e4       	ldi	r25, 0x41	; 65
    103e:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	c7 01       	movw	r24, r14
    1048:	b6 01       	movw	r22, r12
    104a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    104e:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    1052:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    1056:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    105a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    105e:	4e c0       	rjmp	.+156    	; 0x10fc <actualizarNumero+0x5d8>
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
    1060:	0f 2e       	mov	r0, r31
    1062:	c1 2c       	mov	r12, r1
    1064:	d1 2c       	mov	r13, r1
    1066:	f0 e8       	ldi	r31, 0x80	; 128
    1068:	ef 2e       	mov	r14, r31
    106a:	ff e3       	ldi	r31, 0x3F	; 63
    106c:	ff 2e       	mov	r15, r31
    106e:	f0 2d       	mov	r31, r0
    1070:	08 c0       	rjmp	.+16     	; 0x1082 <actualizarNumero+0x55e>
void actualizarNumero(int n, char num) //actualiza numero n con num
{
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
    1072:	0f 2e       	mov	r0, r31
    1074:	c1 2c       	mov	r12, r1
    1076:	d1 2c       	mov	r13, r1
    1078:	f0 e2       	ldi	r31, 0x20	; 32
    107a:	ef 2e       	mov	r14, r31
    107c:	f1 e4       	ldi	r31, 0x41	; 65
    107e:	ff 2e       	mov	r15, r31
    1080:	f0 2d       	mov	r31, r0
				case '4': N1 = N1*sumar + 4/pow(10,contadorPunto); break;
				case '5': N1 = N1*sumar + 5/pow(10,contadorPunto); break;
				case '6': N1 = N1*sumar + 6/pow(10,contadorPunto); break;
				case '7': N1 = N1*sumar + 7/pow(10,contadorPunto); break;
				case '8': N1 = N1*sumar + 8/pow(10,contadorPunto); break;
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
    1082:	be 01       	movw	r22, r28
    1084:	0d 2e       	mov	r0, r29
    1086:	00 0c       	add	r0, r0
    1088:	88 0b       	sbc	r24, r24
    108a:	99 0b       	sbc	r25, r25
    108c:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    1090:	9b 01       	movw	r18, r22
    1092:	ac 01       	movw	r20, r24
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	80 e2       	ldi	r24, 0x20	; 32
    109a:	91 e4       	ldi	r25, 0x41	; 65
    109c:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    10a0:	4b 01       	movw	r8, r22
    10a2:	5c 01       	movw	r10, r24
    10a4:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    10a8:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    10ac:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    10b0:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    10b4:	c7 01       	movw	r24, r14
    10b6:	b6 01       	movw	r22, r12
    10b8:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    10bc:	6b 01       	movw	r12, r22
    10be:	7c 01       	movw	r14, r24
    10c0:	a5 01       	movw	r20, r10
    10c2:	94 01       	movw	r18, r8
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	70 e0       	ldi	r23, 0x00	; 0
    10c8:	80 e1       	ldi	r24, 0x10	; 16
    10ca:	91 e4       	ldi	r25, 0x41	; 65
    10cc:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    10d0:	9b 01       	movw	r18, r22
    10d2:	ac 01       	movw	r20, r24
    10d4:	c7 01       	movw	r24, r14
    10d6:	b6 01       	movw	r22, r12
    10d8:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    10dc:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    10e0:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    10e4:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    10e8:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <actualizarNumero+0x5d8>
			case '.': punto = 1;  break;}
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <punto+0x1>
    10f6:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <punto>
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <actualizarNumero+0x5dc>
			if (punto){ contadorPunto++; }
    10fc:	01 2b       	or	r16, r17
    10fe:	29 f0       	breq	.+10     	; 0x110a <actualizarNumero+0x5e6>
    1100:	21 96       	adiw	r28, 0x01	; 1
    1102:	d0 93 91 01 	sts	0x0191, r29	; 0x800191 <contadorPunto+0x1>
    1106:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <contadorPunto>
			mostrar(0); mostrar(1);
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    111a:	0f c3       	rjmp	.+1566   	; 0x173a <actualizarNumero+0xc16>
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    111c:	00 91 92 01 	lds	r16, 0x0192	; 0x800192 <punto>
    1120:	10 91 93 01 	lds	r17, 0x0193	; 0x800193 <punto+0x1>
    1124:	01 15       	cp	r16, r1
    1126:	11 05       	cpc	r17, r1
    1128:	09 f0       	breq	.+2      	; 0x112c <actualizarNumero+0x608>
    112a:	f1 c2       	rjmp	.+1506   	; 0x170e <actualizarNumero+0xbea>
    112c:	fb c2       	rjmp	.+1526   	; 0x1724 <actualizarNumero+0xc00>
    112e:	0f 2e       	mov	r0, r31
    1130:	c1 2c       	mov	r12, r1
    1132:	d1 2c       	mov	r13, r1
    1134:	f0 e8       	ldi	r31, 0x80	; 128
    1136:	ef 2e       	mov	r14, r31
    1138:	ff e3       	ldi	r31, 0x3F	; 63
    113a:	ff 2e       	mov	r15, r31
    113c:	f0 2d       	mov	r31, r0
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <actualizarNumero+0x62c>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    1140:	0f 2e       	mov	r0, r31
    1142:	c1 2c       	mov	r12, r1
    1144:	d1 2c       	mov	r13, r1
    1146:	f0 e2       	ldi	r31, 0x20	; 32
    1148:	ef 2e       	mov	r14, r31
    114a:	f1 e4       	ldi	r31, 0x41	; 65
    114c:	ff 2e       	mov	r15, r31
    114e:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N2 = N2*sumar + 0/pow(10,contadorPunto); break;
    1150:	be 01       	movw	r22, r28
    1152:	0d 2e       	mov	r0, r29
    1154:	00 0c       	add	r0, r0
    1156:	88 0b       	sbc	r24, r24
    1158:	99 0b       	sbc	r25, r25
    115a:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    115e:	9b 01       	movw	r18, r22
    1160:	ac 01       	movw	r20, r24
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e2       	ldi	r24, 0x20	; 32
    1168:	91 e4       	ldi	r25, 0x41	; 65
    116a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    116e:	4b 01       	movw	r8, r22
    1170:	5c 01       	movw	r10, r24
    1172:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1176:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    117a:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    117e:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    1182:	c7 01       	movw	r24, r14
    1184:	b6 01       	movw	r22, r12
    1186:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    118a:	6b 01       	movw	r12, r22
    118c:	7c 01       	movw	r14, r24
    118e:	a5 01       	movw	r20, r10
    1190:	94 01       	movw	r18, r8
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	cb 01       	movw	r24, r22
    1198:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	c7 01       	movw	r24, r14
    11a2:	b6 01       	movw	r22, r12
    11a4:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    11a8:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    11ac:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    11b0:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    11b4:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    11b8:	86 c2       	rjmp	.+1292   	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    11ba:	0f 2e       	mov	r0, r31
    11bc:	c1 2c       	mov	r12, r1
    11be:	d1 2c       	mov	r13, r1
    11c0:	f0 e8       	ldi	r31, 0x80	; 128
    11c2:	ef 2e       	mov	r14, r31
    11c4:	ff e3       	ldi	r31, 0x3F	; 63
    11c6:	ff 2e       	mov	r15, r31
    11c8:	f0 2d       	mov	r31, r0
    11ca:	08 c0       	rjmp	.+16     	; 0x11dc <actualizarNumero+0x6b8>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    11cc:	0f 2e       	mov	r0, r31
    11ce:	c1 2c       	mov	r12, r1
    11d0:	d1 2c       	mov	r13, r1
    11d2:	f0 e2       	ldi	r31, 0x20	; 32
    11d4:	ef 2e       	mov	r14, r31
    11d6:	f1 e4       	ldi	r31, 0x41	; 65
    11d8:	ff 2e       	mov	r15, r31
    11da:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N2 = N2*sumar + 0/pow(10,contadorPunto); break;
				case '1': N2 = N2*sumar + 1/pow(10,contadorPunto); break;
    11dc:	be 01       	movw	r22, r28
    11de:	0d 2e       	mov	r0, r29
    11e0:	00 0c       	add	r0, r0
    11e2:	88 0b       	sbc	r24, r24
    11e4:	99 0b       	sbc	r25, r25
    11e6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	70 e0       	ldi	r23, 0x00	; 0
    11f2:	80 e2       	ldi	r24, 0x20	; 32
    11f4:	91 e4       	ldi	r25, 0x41	; 65
    11f6:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    11fa:	4b 01       	movw	r8, r22
    11fc:	5c 01       	movw	r10, r24
    11fe:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1202:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1206:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    120a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    120e:	c7 01       	movw	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    1216:	6b 01       	movw	r12, r22
    1218:	7c 01       	movw	r14, r24
    121a:	a5 01       	movw	r20, r10
    121c:	94 01       	movw	r18, r8
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	70 e0       	ldi	r23, 0x00	; 0
    1222:	80 e8       	ldi	r24, 0x80	; 128
    1224:	9f e3       	ldi	r25, 0x3F	; 63
    1226:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    122a:	9b 01       	movw	r18, r22
    122c:	ac 01       	movw	r20, r24
    122e:	c7 01       	movw	r24, r14
    1230:	b6 01       	movw	r22, r12
    1232:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    1236:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    123a:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    123e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    1242:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    1246:	3f c2       	rjmp	.+1150   	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    1248:	0f 2e       	mov	r0, r31
    124a:	c1 2c       	mov	r12, r1
    124c:	d1 2c       	mov	r13, r1
    124e:	f0 e8       	ldi	r31, 0x80	; 128
    1250:	ef 2e       	mov	r14, r31
    1252:	ff e3       	ldi	r31, 0x3F	; 63
    1254:	ff 2e       	mov	r15, r31
    1256:	f0 2d       	mov	r31, r0
    1258:	08 c0       	rjmp	.+16     	; 0x126a <actualizarNumero+0x746>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    125a:	0f 2e       	mov	r0, r31
    125c:	c1 2c       	mov	r12, r1
    125e:	d1 2c       	mov	r13, r1
    1260:	f0 e2       	ldi	r31, 0x20	; 32
    1262:	ef 2e       	mov	r14, r31
    1264:	f1 e4       	ldi	r31, 0x41	; 65
    1266:	ff 2e       	mov	r15, r31
    1268:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N2 = N2*sumar + 0/pow(10,contadorPunto); break;
				case '1': N2 = N2*sumar + 1/pow(10,contadorPunto); break;
				case '2': N2 = N2*sumar + 2/pow(10,contadorPunto); break;
    126a:	be 01       	movw	r22, r28
    126c:	0d 2e       	mov	r0, r29
    126e:	00 0c       	add	r0, r0
    1270:	88 0b       	sbc	r24, r24
    1272:	99 0b       	sbc	r25, r25
    1274:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    1278:	9b 01       	movw	r18, r22
    127a:	ac 01       	movw	r20, r24
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	80 e2       	ldi	r24, 0x20	; 32
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    1288:	4b 01       	movw	r8, r22
    128a:	5c 01       	movw	r10, r24
    128c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1290:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1294:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    1298:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    129c:	c7 01       	movw	r24, r14
    129e:	b6 01       	movw	r22, r12
    12a0:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    12a4:	6b 01       	movw	r12, r22
    12a6:	7c 01       	movw	r14, r24
    12a8:	a5 01       	movw	r20, r10
    12aa:	94 01       	movw	r18, r8
    12ac:	60 e0       	ldi	r22, 0x00	; 0
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	90 e4       	ldi	r25, 0x40	; 64
    12b4:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    12b8:	9b 01       	movw	r18, r22
    12ba:	ac 01       	movw	r20, r24
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 01       	movw	r22, r12
    12c0:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    12c4:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    12c8:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    12cc:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    12d0:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    12d4:	f8 c1       	rjmp	.+1008   	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    12d6:	0f 2e       	mov	r0, r31
    12d8:	c1 2c       	mov	r12, r1
    12da:	d1 2c       	mov	r13, r1
    12dc:	f0 e8       	ldi	r31, 0x80	; 128
    12de:	ef 2e       	mov	r14, r31
    12e0:	ff e3       	ldi	r31, 0x3F	; 63
    12e2:	ff 2e       	mov	r15, r31
    12e4:	f0 2d       	mov	r31, r0
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <actualizarNumero+0x7d4>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    12e8:	0f 2e       	mov	r0, r31
    12ea:	c1 2c       	mov	r12, r1
    12ec:	d1 2c       	mov	r13, r1
    12ee:	f0 e2       	ldi	r31, 0x20	; 32
    12f0:	ef 2e       	mov	r14, r31
    12f2:	f1 e4       	ldi	r31, 0x41	; 65
    12f4:	ff 2e       	mov	r15, r31
    12f6:	f0 2d       	mov	r31, r0
			if (punto){ sumar = 1; }
			switch (num){
				case '0': N2 = N2*sumar + 0/pow(10,contadorPunto); break;
				case '1': N2 = N2*sumar + 1/pow(10,contadorPunto); break;
				case '2': N2 = N2*sumar + 2/pow(10,contadorPunto); break;
				case '3': N2 = N2*sumar + 3/pow(10,contadorPunto); break;
    12f8:	be 01       	movw	r22, r28
    12fa:	0d 2e       	mov	r0, r29
    12fc:	00 0c       	add	r0, r0
    12fe:	88 0b       	sbc	r24, r24
    1300:	99 0b       	sbc	r25, r25
    1302:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    1306:	9b 01       	movw	r18, r22
    1308:	ac 01       	movw	r20, r24
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	80 e2       	ldi	r24, 0x20	; 32
    1310:	91 e4       	ldi	r25, 0x41	; 65
    1312:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    1316:	4b 01       	movw	r8, r22
    1318:	5c 01       	movw	r10, r24
    131a:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    131e:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1322:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    1326:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    132a:	c7 01       	movw	r24, r14
    132c:	b6 01       	movw	r22, r12
    132e:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    1332:	6b 01       	movw	r12, r22
    1334:	7c 01       	movw	r14, r24
    1336:	a5 01       	movw	r20, r10
    1338:	94 01       	movw	r18, r8
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	70 e0       	ldi	r23, 0x00	; 0
    133e:	80 e4       	ldi	r24, 0x40	; 64
    1340:	90 e4       	ldi	r25, 0x40	; 64
    1342:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    1346:	9b 01       	movw	r18, r22
    1348:	ac 01       	movw	r20, r24
    134a:	c7 01       	movw	r24, r14
    134c:	b6 01       	movw	r22, r12
    134e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    1352:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    1356:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    135a:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    135e:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    1362:	b1 c1       	rjmp	.+866    	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    1364:	0f 2e       	mov	r0, r31
    1366:	c1 2c       	mov	r12, r1
    1368:	d1 2c       	mov	r13, r1
    136a:	f0 e8       	ldi	r31, 0x80	; 128
    136c:	ef 2e       	mov	r14, r31
    136e:	ff e3       	ldi	r31, 0x3F	; 63
    1370:	ff 2e       	mov	r15, r31
    1372:	f0 2d       	mov	r31, r0
    1374:	08 c0       	rjmp	.+16     	; 0x1386 <actualizarNumero+0x862>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    1376:	0f 2e       	mov	r0, r31
    1378:	c1 2c       	mov	r12, r1
    137a:	d1 2c       	mov	r13, r1
    137c:	f0 e2       	ldi	r31, 0x20	; 32
    137e:	ef 2e       	mov	r14, r31
    1380:	f1 e4       	ldi	r31, 0x41	; 65
    1382:	ff 2e       	mov	r15, r31
    1384:	f0 2d       	mov	r31, r0
			switch (num){
				case '0': N2 = N2*sumar + 0/pow(10,contadorPunto); break;
				case '1': N2 = N2*sumar + 1/pow(10,contadorPunto); break;
				case '2': N2 = N2*sumar + 2/pow(10,contadorPunto); break;
				case '3': N2 = N2*sumar + 3/pow(10,contadorPunto); break;
				case '4': N2 = N2*sumar + 4/pow(10,contadorPunto); break;
    1386:	be 01       	movw	r22, r28
    1388:	0d 2e       	mov	r0, r29
    138a:	00 0c       	add	r0, r0
    138c:	88 0b       	sbc	r24, r24
    138e:	99 0b       	sbc	r25, r25
    1390:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	60 e0       	ldi	r22, 0x00	; 0
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	80 e2       	ldi	r24, 0x20	; 32
    139e:	91 e4       	ldi	r25, 0x41	; 65
    13a0:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    13a4:	4b 01       	movw	r8, r22
    13a6:	5c 01       	movw	r10, r24
    13a8:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    13ac:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    13b0:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    13b4:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    13b8:	c7 01       	movw	r24, r14
    13ba:	b6 01       	movw	r22, r12
    13bc:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    13c0:	6b 01       	movw	r12, r22
    13c2:	7c 01       	movw	r14, r24
    13c4:	a5 01       	movw	r20, r10
    13c6:	94 01       	movw	r18, r8
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	80 e8       	ldi	r24, 0x80	; 128
    13ce:	90 e4       	ldi	r25, 0x40	; 64
    13d0:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    13d4:	9b 01       	movw	r18, r22
    13d6:	ac 01       	movw	r20, r24
    13d8:	c7 01       	movw	r24, r14
    13da:	b6 01       	movw	r22, r12
    13dc:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    13e0:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    13e4:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    13e8:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    13ec:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    13f0:	6a c1       	rjmp	.+724    	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    13f2:	0f 2e       	mov	r0, r31
    13f4:	c1 2c       	mov	r12, r1
    13f6:	d1 2c       	mov	r13, r1
    13f8:	f0 e8       	ldi	r31, 0x80	; 128
    13fa:	ef 2e       	mov	r14, r31
    13fc:	ff e3       	ldi	r31, 0x3F	; 63
    13fe:	ff 2e       	mov	r15, r31
    1400:	f0 2d       	mov	r31, r0
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <actualizarNumero+0x8f0>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    1404:	0f 2e       	mov	r0, r31
    1406:	c1 2c       	mov	r12, r1
    1408:	d1 2c       	mov	r13, r1
    140a:	f0 e2       	ldi	r31, 0x20	; 32
    140c:	ef 2e       	mov	r14, r31
    140e:	f1 e4       	ldi	r31, 0x41	; 65
    1410:	ff 2e       	mov	r15, r31
    1412:	f0 2d       	mov	r31, r0
				case '0': N2 = N2*sumar + 0/pow(10,contadorPunto); break;
				case '1': N2 = N2*sumar + 1/pow(10,contadorPunto); break;
				case '2': N2 = N2*sumar + 2/pow(10,contadorPunto); break;
				case '3': N2 = N2*sumar + 3/pow(10,contadorPunto); break;
				case '4': N2 = N2*sumar + 4/pow(10,contadorPunto); break;
				case '5': N2 = N2*sumar + 5/pow(10,contadorPunto); break;
    1414:	be 01       	movw	r22, r28
    1416:	0d 2e       	mov	r0, r29
    1418:	00 0c       	add	r0, r0
    141a:	88 0b       	sbc	r24, r24
    141c:	99 0b       	sbc	r25, r25
    141e:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    1422:	9b 01       	movw	r18, r22
    1424:	ac 01       	movw	r20, r24
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	80 e2       	ldi	r24, 0x20	; 32
    142c:	91 e4       	ldi	r25, 0x41	; 65
    142e:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    1432:	4b 01       	movw	r8, r22
    1434:	5c 01       	movw	r10, r24
    1436:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    143a:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    143e:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    1442:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    1446:	c7 01       	movw	r24, r14
    1448:	b6 01       	movw	r22, r12
    144a:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    144e:	6b 01       	movw	r12, r22
    1450:	7c 01       	movw	r14, r24
    1452:	a5 01       	movw	r20, r10
    1454:	94 01       	movw	r18, r8
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	80 ea       	ldi	r24, 0xA0	; 160
    145c:	90 e4       	ldi	r25, 0x40	; 64
    145e:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	c7 01       	movw	r24, r14
    1468:	b6 01       	movw	r22, r12
    146a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    146e:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    1472:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    1476:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    147a:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    147e:	23 c1       	rjmp	.+582    	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    1480:	0f 2e       	mov	r0, r31
    1482:	c1 2c       	mov	r12, r1
    1484:	d1 2c       	mov	r13, r1
    1486:	f0 e8       	ldi	r31, 0x80	; 128
    1488:	ef 2e       	mov	r14, r31
    148a:	ff e3       	ldi	r31, 0x3F	; 63
    148c:	ff 2e       	mov	r15, r31
    148e:	f0 2d       	mov	r31, r0
    1490:	08 c0       	rjmp	.+16     	; 0x14a2 <actualizarNumero+0x97e>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    1492:	0f 2e       	mov	r0, r31
    1494:	c1 2c       	mov	r12, r1
    1496:	d1 2c       	mov	r13, r1
    1498:	f0 e2       	ldi	r31, 0x20	; 32
    149a:	ef 2e       	mov	r14, r31
    149c:	f1 e4       	ldi	r31, 0x41	; 65
    149e:	ff 2e       	mov	r15, r31
    14a0:	f0 2d       	mov	r31, r0
				case '1': N2 = N2*sumar + 1/pow(10,contadorPunto); break;
				case '2': N2 = N2*sumar + 2/pow(10,contadorPunto); break;
				case '3': N2 = N2*sumar + 3/pow(10,contadorPunto); break;
				case '4': N2 = N2*sumar + 4/pow(10,contadorPunto); break;
				case '5': N2 = N2*sumar + 5/pow(10,contadorPunto); break;
				case '6': N2 = N2*sumar + 6/pow(10,contadorPunto); break;
    14a2:	be 01       	movw	r22, r28
    14a4:	0d 2e       	mov	r0, r29
    14a6:	00 0c       	add	r0, r0
    14a8:	88 0b       	sbc	r24, r24
    14aa:	99 0b       	sbc	r25, r25
    14ac:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    14b0:	9b 01       	movw	r18, r22
    14b2:	ac 01       	movw	r20, r24
    14b4:	60 e0       	ldi	r22, 0x00	; 0
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	91 e4       	ldi	r25, 0x41	; 65
    14bc:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    14c0:	4b 01       	movw	r8, r22
    14c2:	5c 01       	movw	r10, r24
    14c4:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    14c8:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    14cc:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    14d0:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    14d4:	c7 01       	movw	r24, r14
    14d6:	b6 01       	movw	r22, r12
    14d8:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    14dc:	6b 01       	movw	r12, r22
    14de:	7c 01       	movw	r14, r24
    14e0:	a5 01       	movw	r20, r10
    14e2:	94 01       	movw	r18, r8
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	80 ec       	ldi	r24, 0xC0	; 192
    14ea:	90 e4       	ldi	r25, 0x40	; 64
    14ec:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    14f0:	9b 01       	movw	r18, r22
    14f2:	ac 01       	movw	r20, r24
    14f4:	c7 01       	movw	r24, r14
    14f6:	b6 01       	movw	r22, r12
    14f8:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    14fc:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    1500:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    1504:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    1508:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    150c:	dc c0       	rjmp	.+440    	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    150e:	0f 2e       	mov	r0, r31
    1510:	c1 2c       	mov	r12, r1
    1512:	d1 2c       	mov	r13, r1
    1514:	f0 e8       	ldi	r31, 0x80	; 128
    1516:	ef 2e       	mov	r14, r31
    1518:	ff e3       	ldi	r31, 0x3F	; 63
    151a:	ff 2e       	mov	r15, r31
    151c:	f0 2d       	mov	r31, r0
    151e:	08 c0       	rjmp	.+16     	; 0x1530 <actualizarNumero+0xa0c>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    1520:	0f 2e       	mov	r0, r31
    1522:	c1 2c       	mov	r12, r1
    1524:	d1 2c       	mov	r13, r1
    1526:	f0 e2       	ldi	r31, 0x20	; 32
    1528:	ef 2e       	mov	r14, r31
    152a:	f1 e4       	ldi	r31, 0x41	; 65
    152c:	ff 2e       	mov	r15, r31
    152e:	f0 2d       	mov	r31, r0
				case '2': N2 = N2*sumar + 2/pow(10,contadorPunto); break;
				case '3': N2 = N2*sumar + 3/pow(10,contadorPunto); break;
				case '4': N2 = N2*sumar + 4/pow(10,contadorPunto); break;
				case '5': N2 = N2*sumar + 5/pow(10,contadorPunto); break;
				case '6': N2 = N2*sumar + 6/pow(10,contadorPunto); break;
				case '7': N2 = N2*sumar + 7/pow(10,contadorPunto); break;
    1530:	be 01       	movw	r22, r28
    1532:	0d 2e       	mov	r0, r29
    1534:	00 0c       	add	r0, r0
    1536:	88 0b       	sbc	r24, r24
    1538:	99 0b       	sbc	r25, r25
    153a:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    153e:	9b 01       	movw	r18, r22
    1540:	ac 01       	movw	r20, r24
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	80 e2       	ldi	r24, 0x20	; 32
    1548:	91 e4       	ldi	r25, 0x41	; 65
    154a:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    154e:	4b 01       	movw	r8, r22
    1550:	5c 01       	movw	r10, r24
    1552:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1556:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    155a:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    155e:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    1562:	c7 01       	movw	r24, r14
    1564:	b6 01       	movw	r22, r12
    1566:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    156a:	6b 01       	movw	r12, r22
    156c:	7c 01       	movw	r14, r24
    156e:	a5 01       	movw	r20, r10
    1570:	94 01       	movw	r18, r8
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	80 ee       	ldi	r24, 0xE0	; 224
    1578:	90 e4       	ldi	r25, 0x40	; 64
    157a:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    157e:	9b 01       	movw	r18, r22
    1580:	ac 01       	movw	r20, r24
    1582:	c7 01       	movw	r24, r14
    1584:	b6 01       	movw	r22, r12
    1586:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    158a:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    158e:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    1592:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    1596:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    159a:	95 c0       	rjmp	.+298    	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    159c:	0f 2e       	mov	r0, r31
    159e:	c1 2c       	mov	r12, r1
    15a0:	d1 2c       	mov	r13, r1
    15a2:	f0 e8       	ldi	r31, 0x80	; 128
    15a4:	ef 2e       	mov	r14, r31
    15a6:	ff e3       	ldi	r31, 0x3F	; 63
    15a8:	ff 2e       	mov	r15, r31
    15aa:	f0 2d       	mov	r31, r0
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <actualizarNumero+0xa9a>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    15ae:	0f 2e       	mov	r0, r31
    15b0:	c1 2c       	mov	r12, r1
    15b2:	d1 2c       	mov	r13, r1
    15b4:	f0 e2       	ldi	r31, 0x20	; 32
    15b6:	ef 2e       	mov	r14, r31
    15b8:	f1 e4       	ldi	r31, 0x41	; 65
    15ba:	ff 2e       	mov	r15, r31
    15bc:	f0 2d       	mov	r31, r0
				case '3': N2 = N2*sumar + 3/pow(10,contadorPunto); break;
				case '4': N2 = N2*sumar + 4/pow(10,contadorPunto); break;
				case '5': N2 = N2*sumar + 5/pow(10,contadorPunto); break;
				case '6': N2 = N2*sumar + 6/pow(10,contadorPunto); break;
				case '7': N2 = N2*sumar + 7/pow(10,contadorPunto); break;
				case '8': N2 = N2*sumar + 8/pow(10,contadorPunto); break;
    15be:	be 01       	movw	r22, r28
    15c0:	0d 2e       	mov	r0, r29
    15c2:	00 0c       	add	r0, r0
    15c4:	88 0b       	sbc	r24, r24
    15c6:	99 0b       	sbc	r25, r25
    15c8:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    15cc:	9b 01       	movw	r18, r22
    15ce:	ac 01       	movw	r20, r24
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	91 e4       	ldi	r25, 0x41	; 65
    15d8:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    15dc:	4b 01       	movw	r8, r22
    15de:	5c 01       	movw	r10, r24
    15e0:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    15e4:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    15e8:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    15ec:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    15f0:	c7 01       	movw	r24, r14
    15f2:	b6 01       	movw	r22, r12
    15f4:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    15f8:	6b 01       	movw	r12, r22
    15fa:	7c 01       	movw	r14, r24
    15fc:	a5 01       	movw	r20, r10
    15fe:	94 01       	movw	r18, r8
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	91 e4       	ldi	r25, 0x41	; 65
    1608:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    160c:	9b 01       	movw	r18, r22
    160e:	ac 01       	movw	r20, r24
    1610:	c7 01       	movw	r24, r14
    1612:	b6 01       	movw	r22, r12
    1614:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    1618:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    161c:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    1620:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    1624:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    1628:	4e c0       	rjmp	.+156    	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
    162a:	0f 2e       	mov	r0, r31
    162c:	c1 2c       	mov	r12, r1
    162e:	d1 2c       	mov	r13, r1
    1630:	f0 e8       	ldi	r31, 0x80	; 128
    1632:	ef 2e       	mov	r14, r31
    1634:	ff e3       	ldi	r31, 0x3F	; 63
    1636:	ff 2e       	mov	r15, r31
    1638:	f0 2d       	mov	r31, r0
    163a:	08 c0       	rjmp	.+16     	; 0x164c <actualizarNumero+0xb28>
				case '9': N1 = N1*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
    163c:	0f 2e       	mov	r0, r31
    163e:	c1 2c       	mov	r12, r1
    1640:	d1 2c       	mov	r13, r1
    1642:	f0 e2       	ldi	r31, 0x20	; 32
    1644:	ef 2e       	mov	r14, r31
    1646:	f1 e4       	ldi	r31, 0x41	; 65
    1648:	ff 2e       	mov	r15, r31
    164a:	f0 2d       	mov	r31, r0
				case '4': N2 = N2*sumar + 4/pow(10,contadorPunto); break;
				case '5': N2 = N2*sumar + 5/pow(10,contadorPunto); break;
				case '6': N2 = N2*sumar + 6/pow(10,contadorPunto); break;
				case '7': N2 = N2*sumar + 7/pow(10,contadorPunto); break;
				case '8': N2 = N2*sumar + 8/pow(10,contadorPunto); break;
				case '9': N2 = N2*sumar + 9/pow(10,contadorPunto); break;
    164c:	be 01       	movw	r22, r28
    164e:	0d 2e       	mov	r0, r29
    1650:	00 0c       	add	r0, r0
    1652:	88 0b       	sbc	r24, r24
    1654:	99 0b       	sbc	r25, r25
    1656:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	70 e0       	ldi	r23, 0x00	; 0
    1662:	80 e2       	ldi	r24, 0x20	; 32
    1664:	91 e4       	ldi	r25, 0x41	; 65
    1666:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    166a:	4b 01       	movw	r8, r22
    166c:	5c 01       	movw	r10, r24
    166e:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1672:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1676:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    167a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    167e:	c7 01       	movw	r24, r14
    1680:	b6 01       	movw	r22, r12
    1682:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    1686:	6b 01       	movw	r12, r22
    1688:	7c 01       	movw	r14, r24
    168a:	a5 01       	movw	r20, r10
    168c:	94 01       	movw	r18, r8
    168e:	60 e0       	ldi	r22, 0x00	; 0
    1690:	70 e0       	ldi	r23, 0x00	; 0
    1692:	80 e1       	ldi	r24, 0x10	; 16
    1694:	91 e4       	ldi	r25, 0x41	; 65
    1696:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    169a:	9b 01       	movw	r18, r22
    169c:	ac 01       	movw	r20, r24
    169e:	c7 01       	movw	r24, r14
    16a0:	b6 01       	movw	r22, r12
    16a2:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    16a6:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <N2>
    16aa:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <N2+0x1>
    16ae:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <N2+0x2>
    16b2:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <N2+0x3>
    16b6:	07 c0       	rjmp	.+14     	; 0x16c6 <actualizarNumero+0xba2>
			case '.': punto = 1;  break;}
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	90 93 93 01 	sts	0x0193, r25	; 0x800193 <punto+0x1>
    16c0:	80 93 92 01 	sts	0x0192, r24	; 0x800192 <punto>
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <actualizarNumero+0xba6>
			if (punto){ contadorPunto++; }
    16c6:	01 2b       	or	r16, r17
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <actualizarNumero+0xbb0>
    16ca:	21 96       	adiw	r28, 0x01	; 1
    16cc:	d0 93 91 01 	sts	0x0191, r29	; 0x800191 <contadorPunto+0x1>
    16d0:	c0 93 90 01 	sts	0x0190, r28	; 0x800190 <contadorPunto>
		mostrar(2);}
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
	}
}
    16dc:	2e c0       	rjmp	.+92     	; 0x173a <actualizarNumero+0xc16>
	if(contadorPunto < 7){
		if(n == 1)//N1
		{
			float sumar = 10;
			if (punto){ sumar = 1; }
			switch (num){
    16de:	86 2f       	mov	r24, r22
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	fc 01       	movw	r30, r24
    16e4:	be 97       	sbiw	r30, 0x2e	; 46
    16e6:	ec 30       	cpi	r30, 0x0C	; 12
    16e8:	f1 05       	cpc	r31, r1
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <actualizarNumero+0xbca>
    16ec:	09 cd       	rjmp	.-1518   	; 0x1100 <actualizarNumero+0x5dc>
    16ee:	e5 5c       	subi	r30, 0xC5	; 197
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__tablejump2__>
    16f6:	86 2f       	mov	r24, r22
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	fc 01       	movw	r30, r24
    16fc:	be 97       	sbiw	r30, 0x2e	; 46
    16fe:	ec 30       	cpi	r30, 0x0C	; 12
    1700:	f1 05       	cpc	r31, r1
    1702:	08 f0       	brcs	.+2      	; 0x1706 <actualizarNumero+0xbe2>
    1704:	02 cd       	rjmp	.-1532   	; 0x110a <actualizarNumero+0x5e6>
    1706:	e9 5b       	subi	r30, 0xB9	; 185
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__tablejump2__>
			if (punto){ contadorPunto++; }
			mostrar(0); mostrar(1);
			}else{ //N2
			float sumar = 10;
			if (punto){ sumar = 1; }
			switch (num){
    170e:	86 2f       	mov	r24, r22
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	fc 01       	movw	r30, r24
    1714:	be 97       	sbiw	r30, 0x2e	; 46
    1716:	ec 30       	cpi	r30, 0x0C	; 12
    1718:	f1 05       	cpc	r31, r1
    171a:	b8 f6       	brcc	.-82     	; 0x16ca <actualizarNumero+0xba6>
    171c:	ed 5a       	subi	r30, 0xAD	; 173
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__tablejump2__>
    1724:	86 2f       	mov	r24, r22
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	be 97       	sbiw	r30, 0x2e	; 46
    172c:	ec 30       	cpi	r30, 0x0C	; 12
    172e:	f1 05       	cpc	r31, r1
    1730:	88 f6       	brcc	.-94     	; 0x16d4 <actualizarNumero+0xbb0>
    1732:	e1 5a       	subi	r30, 0xA1	; 161
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__tablejump2__>
				case '9': N2 = N2*sumar + 9/pow(10,contadorPunto); break;
			case '.': punto = 1;  break;}
			if (punto){ contadorPunto++; }
		mostrar(2);}
	}
}
    173a:	df 91       	pop	r29
    173c:	cf 91       	pop	r28
    173e:	1f 91       	pop	r17
    1740:	0f 91       	pop	r16
    1742:	ff 90       	pop	r15
    1744:	ef 90       	pop	r14
    1746:	df 90       	pop	r13
    1748:	cf 90       	pop	r12
    174a:	bf 90       	pop	r11
    174c:	af 90       	pop	r10
    174e:	9f 90       	pop	r9
    1750:	8f 90       	pop	r8
    1752:	08 95       	ret

00001754 <calcular1>:

void calcular1(float n, char op) //opera el operador op con un solo numero n y lo guarda en N1
{
    1754:	cf 93       	push	r28
    1756:	c4 2f       	mov	r28, r20
	switch (op){
    1758:	84 2f       	mov	r24, r20
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	fc 01       	movw	r30, r24
    175e:	e3 56       	subi	r30, 0x63	; 99
    1760:	f1 09       	sbc	r31, r1
    1762:	e6 31       	cpi	r30, 0x16	; 22
    1764:	f1 05       	cpc	r31, r1
    1766:	08 f0       	brcs	.+2      	; 0x176a <calcular1+0x16>
    1768:	9f c0       	rjmp	.+318    	; 0x18a8 <calcular1+0x154>
    176a:	e5 59       	subi	r30, 0x95	; 149
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__tablejump2__>
		case 'q': N1 = sqrt(N1); break;  //raiz cuadrada
    1772:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1776:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    177a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    177e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1782:	0e 94 50 1a 	call	0x34a0	; 0x34a0 <sqrt>
    1786:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    178a:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    178e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    1792:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    1796:	88 c0       	rjmp	.+272    	; 0x18a8 <calcular1+0x154>
		case 'l': N1 = log(N1); break;   //logaritmo natural
    1798:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    179c:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    17a0:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    17a4:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    17a8:	0e 94 09 19 	call	0x3212	; 0x3212 <log>
    17ac:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    17b0:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    17b4:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    17b8:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    17bc:	75 c0       	rjmp	.+234    	; 0x18a8 <calcular1+0x154>
		case 'e': N1 = exp(N1); break;   //exp(x)
    17be:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    17c2:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    17c6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    17ca:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    17ce:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <exp>
    17d2:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    17d6:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    17da:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    17de:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    17e2:	62 c0       	rjmp	.+196    	; 0x18a8 <calcular1+0x154>
		case 's': N1 = sin(N1); break;   //sen(x)
    17e4:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    17e8:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    17ec:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    17f0:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    17f4:	0e 94 42 1a 	call	0x3484	; 0x3484 <sin>
    17f8:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    17fc:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    1800:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    1804:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    1808:	4f c0       	rjmp	.+158    	; 0x18a8 <calcular1+0x154>
		case 'c': N1 = cos(N1); break;   //cos(x)
    180a:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    180e:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1812:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1816:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    181a:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <cos>
    181e:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    1822:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    1826:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    182a:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    182e:	3c c0       	rjmp	.+120    	; 0x18a8 <calcular1+0x154>
		case 't': N1 = tan(N1); break;   //tg(x)
    1830:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1834:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1838:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    183c:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1840:	0e 94 90 1a 	call	0x3520	; 0x3520 <tan>
    1844:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    1848:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    184c:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    1850:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    1854:	29 c0       	rjmp	.+82     	; 0x18a8 <calcular1+0x154>
		case 'g': N1 = log10(N1); break; //log(x)
    1856:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    185a:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    185e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1862:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1866:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <log10>
    186a:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    186e:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    1872:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    1876:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    187a:	16 c0       	rjmp	.+44     	; 0x18a8 <calcular1+0x154>
	case 'x': N1 = pow(N1,(-1.0)); break;} //x^-1
    187c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    1880:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    1884:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    1888:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	80 e8       	ldi	r24, 0x80	; 128
    1892:	9f e3       	ldi	r25, 0x3F	; 63
    1894:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    1898:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    189c:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    18a0:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    18a4:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
	N2 = 0;
    18a8:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    18ac:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    18b0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    18b4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
	operador = op;
    18b8:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <operador>
	mostrar(3);
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
	mostrar(4);
    18c4:	84 e0       	ldi	r24, 0x04	; 4
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
}
    18cc:	cf 91       	pop	r28
    18ce:	08 95       	ret

000018d0 <calcular2>:



void calcular2(float n1, float n2, char op) //opera n1 op n2 y lo guarda en N1
{
    18d0:	0f 93       	push	r16
	switch (op){
    18d2:	0d 32       	cpi	r16, 0x2D	; 45
    18d4:	49 f1       	breq	.+82     	; 0x1928 <calcular2+0x58>
    18d6:	30 f4       	brcc	.+12     	; 0x18e4 <calcular2+0x14>
    18d8:	0a 32       	cpi	r16, 0x2A	; 42
    18da:	09 f4       	brne	.+2      	; 0x18de <calcular2+0xe>
    18dc:	40 c0       	rjmp	.+128    	; 0x195e <calcular2+0x8e>
    18de:	0b 32       	cpi	r16, 0x2B	; 43
    18e0:	41 f0       	breq	.+16     	; 0x18f2 <calcular2+0x22>
    18e2:	8d c0       	rjmp	.+282    	; 0x19fe <calcular2+0x12e>
    18e4:	0f 32       	cpi	r16, 0x2F	; 47
    18e6:	09 f4       	brne	.+2      	; 0x18ea <calcular2+0x1a>
    18e8:	55 c0       	rjmp	.+170    	; 0x1994 <calcular2+0xc4>
    18ea:	0e 35       	cpi	r16, 0x5E	; 94
    18ec:	09 f4       	brne	.+2      	; 0x18f0 <calcular2+0x20>
    18ee:	6d c0       	rjmp	.+218    	; 0x19ca <calcular2+0xfa>
    18f0:	86 c0       	rjmp	.+268    	; 0x19fe <calcular2+0x12e>
		case '+': N1 = N1 + N2; break;  // +
    18f2:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    18f6:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    18fa:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    18fe:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    1902:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1906:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    190a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    190e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1912:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    1916:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    191a:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    191e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    1922:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    1926:	6b c0       	rjmp	.+214    	; 0x19fe <calcular2+0x12e>
		case '-': N1 = N1 - N2; break;  // -
    1928:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    192c:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1930:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    1934:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    1938:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    193c:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1940:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1944:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1948:	0e 94 77 16 	call	0x2cee	; 0x2cee <__subsf3>
    194c:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    1950:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    1954:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    1958:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    195c:	50 c0       	rjmp	.+160    	; 0x19fe <calcular2+0x12e>
		case '*': N1 = N1 * N2; break;  // *
    195e:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1962:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1966:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    196a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    196e:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1972:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1976:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    197a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    197e:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    1982:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    1986:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    198a:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    198e:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    1992:	35 c0       	rjmp	.+106    	; 0x19fe <calcular2+0x12e>
		case '/': N1 = N1 / N2; break;  // /  ver el caso N2 = 0!!!
    1994:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1998:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    199c:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    19a0:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    19a4:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    19a8:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    19ac:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    19b0:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    19b4:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <__divsf3>
    19b8:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    19bc:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    19c0:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    19c4:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
    19c8:	1a c0       	rjmp	.+52     	; 0x19fe <calcular2+0x12e>
	case '^': N1 = pow(N1,N2); break;}   // ^ Falta aca
    19ca:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    19ce:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    19d2:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    19d6:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    19da:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    19de:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    19e2:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    19e6:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    19ea:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <pow>
    19ee:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <N1>
    19f2:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <N1+0x1>
    19f6:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <N1+0x2>
    19fa:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <N1+0x3>
	N2 = 0;
    19fe:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1a02:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1a06:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1a0a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
	mostrar(4);
    1a0e:	84 e0       	ldi	r24, 0x04	; 4
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
}
    1a16:	0f 91       	pop	r16
    1a18:	08 95       	ret

00001a1a <calculadora>:

void calculadora(char entrada) //basado en diagrama estados calculadora
{
    1a1a:	0f 93       	push	r16
    1a1c:	cf 93       	push	r28
    1a1e:	c8 2f       	mov	r28, r24
	if(ovfe)
    1a20:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <ovfe>
    1a24:	90 91 8f 01 	lds	r25, 0x018F	; 0x80018f <ovfe+0x1>
    1a28:	89 2b       	or	r24, r25
    1a2a:	39 f0       	breq	.+14     	; 0x1a3a <calculadora+0x20>
	{
		estado = 4;
    1a2c:	84 e0       	ldi	r24, 0x04	; 4
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1a34:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1a38:	12 c5       	rjmp	.+2596   	; 0x245e <calculadora+0xa44>
	}
	switch (estado)
    1a3a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <estado>
    1a3e:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <estado+0x1>
    1a42:	82 30       	cpi	r24, 0x02	; 2
    1a44:	91 05       	cpc	r25, r1
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <calculadora+0x30>
    1a48:	0d c2       	rjmp	.+1050   	; 0x1e64 <calculadora+0x44a>
    1a4a:	34 f4       	brge	.+12     	; 0x1a58 <calculadora+0x3e>
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	61 f0       	breq	.+24     	; 0x1a68 <calculadora+0x4e>
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <calculadora+0x3c>
    1a54:	3a c1       	rjmp	.+628    	; 0x1cca <calculadora+0x2b0>
    1a56:	4d c5       	rjmp	.+2714   	; 0x24f2 <calculadora+0xad8>
    1a58:	83 30       	cpi	r24, 0x03	; 3
    1a5a:	91 05       	cpc	r25, r1
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <calculadora+0x46>
    1a5e:	b8 c3       	rjmp	.+1904   	; 0x21d0 <calculadora+0x7b6>
    1a60:	04 97       	sbiw	r24, 0x04	; 4
    1a62:	09 f0       	breq	.+2      	; 0x1a66 <calculadora+0x4c>
    1a64:	46 c5       	rjmp	.+2700   	; 0x24f2 <calculadora+0xad8>
    1a66:	fb c4       	rjmp	.+2550   	; 0x245e <calculadora+0xa44>
	{
		case 0: //estado 0
		if((entrada == '0')||
    1a68:	80 ed       	ldi	r24, 0xD0	; 208
    1a6a:	8c 0f       	add	r24, r28
    1a6c:	8a 30       	cpi	r24, 0x0A	; 10
    1a6e:	10 f0       	brcs	.+4      	; 0x1a74 <calculadora+0x5a>
		(entrada == '4')||
		(entrada == '5')||
		(entrada == '6')||
		(entrada == '7')||
		(entrada == '8')||
		(entrada == '9')||
    1a70:	ce 32       	cpi	r28, 0x2E	; 46
    1a72:	51 f4       	brne	.+20     	; 0x1a88 <calculadora+0x6e>
		(entrada == '.')) { actualizarNumero(1,entrada); estado = 0;}
    1a74:	6c 2f       	mov	r22, r28
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 92 05 	call	0xb24	; 0xb24 <actualizarNumero>
    1a7e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    1a82:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    1a86:	35 c5       	rjmp	.+2666   	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == '+')||
    1a88:	8c 2f       	mov	r24, r28
    1a8a:	8d 7f       	andi	r24, 0xFD	; 253
    1a8c:	8d 32       	cpi	r24, 0x2D	; 45
    1a8e:	31 f0       	breq	.+12     	; 0x1a9c <calculadora+0x82>
		(entrada == '-')||
    1a90:	86 ed       	ldi	r24, 0xD6	; 214
    1a92:	8c 0f       	add	r24, r28
    1a94:	82 30       	cpi	r24, 0x02	; 2
    1a96:	10 f0       	brcs	.+4      	; 0x1a9c <calculadora+0x82>
		(entrada == '*')||
		(entrada == '/')||
    1a98:	ce 35       	cpi	r28, 0x5E	; 94
    1a9a:	69 f4       	brne	.+26     	; 0x1ab6 <calculadora+0x9c>
		(entrada == '^')) {operador = entrada; estado = 1;mostrar(3);}
    1a9c:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <operador>
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1aa8:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1aac:	83 e0       	ldi	r24, 0x03	; 3
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1ab4:	1e c5       	rjmp	.+2620   	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == 'q')||
    1ab6:	c1 37       	cpi	r28, 0x71	; 113
    1ab8:	71 f0       	breq	.+28     	; 0x1ad6 <calculadora+0xbc>
    1aba:	cc 36       	cpi	r28, 0x6C	; 108
    1abc:	61 f0       	breq	.+24     	; 0x1ad6 <calculadora+0xbc>
		(entrada == 'l')||
    1abe:	c5 36       	cpi	r28, 0x65	; 101
    1ac0:	51 f0       	breq	.+20     	; 0x1ad6 <calculadora+0xbc>
		(entrada == 'e')||
    1ac2:	8d e8       	ldi	r24, 0x8D	; 141
    1ac4:	8c 0f       	add	r24, r28
    1ac6:	82 30       	cpi	r24, 0x02	; 2
    1ac8:	30 f0       	brcs	.+12     	; 0x1ad6 <calculadora+0xbc>
		(entrada == 's')||
    1aca:	8c 2f       	mov	r24, r28
    1acc:	8b 7f       	andi	r24, 0xFB	; 251
    1ace:	83 36       	cpi	r24, 0x63	; 99
    1ad0:	11 f0       	breq	.+4      	; 0x1ad6 <calculadora+0xbc>
		(entrada == 'c')||
		(entrada == 't')||
		(entrada == 'g')||
    1ad2:	c8 37       	cpi	r28, 0x78	; 120
    1ad4:	91 f4       	brne	.+36     	; 0x1afa <calculadora+0xe0>
		(entrada == 'x')) {calcular1(N1,entrada);   estado = 3;}
    1ad6:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1ada:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1ade:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1ae2:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1ae6:	4c 2f       	mov	r20, r28
    1ae8:	0e 94 aa 0b 	call	0x1754	; 0x1754 <calcular1>
    1aec:	83 e0       	ldi	r24, 0x03	; 3
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1af4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1af8:	fc c4       	rjmp	.+2552   	; 0x24f2 <calculadora+0xad8>
		else{
			switch (entrada){
    1afa:	c6 36       	cpi	r28, 0x66	; 102
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <calculadora+0xe6>
    1afe:	da c0       	rjmp	.+436    	; 0x1cb4 <calculadora+0x29a>
    1b00:	38 f4       	brcc	.+14     	; 0x1b10 <calculadora+0xf6>
    1b02:	c1 36       	cpi	r28, 0x61	; 97
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <calculadora+0xee>
    1b06:	b5 c0       	rjmp	.+362    	; 0x1c72 <calculadora+0x258>
    1b08:	c4 36       	cpi	r28, 0x64	; 100
    1b0a:	09 f4       	brne	.+2      	; 0x1b0e <calculadora+0xf4>
    1b0c:	4c c0       	rjmp	.+152    	; 0x1ba6 <calculadora+0x18c>
    1b0e:	f1 c4       	rjmp	.+2530   	; 0x24f2 <calculadora+0xad8>
    1b10:	ce 36       	cpi	r28, 0x6E	; 110
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <calculadora+0xfc>
    1b14:	7b c0       	rjmp	.+246    	; 0x1c0c <calculadora+0x1f2>
    1b16:	c0 37       	cpi	r28, 0x70	; 112
    1b18:	21 f0       	breq	.+8      	; 0x1b22 <calculadora+0x108>
    1b1a:	cd 36       	cpi	r28, 0x6D	; 109
    1b1c:	09 f0       	breq	.+2      	; 0x1b20 <calculadora+0x106>
    1b1e:	e9 c4       	rjmp	.+2514   	; 0x24f2 <calculadora+0xad8>
    1b20:	1b c0       	rjmp	.+54     	; 0x1b58 <calculadora+0x13e>
				case 'p': N1 = pi;              estado = 3; mostrar(0); mostrar(1); break;
    1b22:	80 ed       	ldi	r24, 0xD0	; 208
    1b24:	9f e0       	ldi	r25, 0x0F	; 15
    1b26:	a9 e4       	ldi	r26, 0x49	; 73
    1b28:	b0 e4       	ldi	r27, 0x40	; 64
    1b2a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N1>
    1b2e:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <N1+0x1>
    1b32:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <N1+0x2>
    1b36:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <N1+0x3>
    1b3a:	83 e0       	ldi	r24, 0x03	; 3
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1b42:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1b56:	cd c4       	rjmp	.+2458   	; 0x24f2 <calculadora+0xad8>
				case 'm': N1 = M; N2 = 0;       estado = 3; mostrar(0); mostrar(1); break;
    1b58:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <M>
    1b5c:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <M+0x1>
    1b60:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <M+0x2>
    1b64:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <M+0x3>
    1b68:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N1>
    1b6c:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <N1+0x1>
    1b70:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <N1+0x2>
    1b74:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <N1+0x3>
    1b78:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1b7c:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1b80:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1b84:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    1b88:	83 e0       	ldi	r24, 0x03	; 3
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1b90:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1ba4:	a6 c4       	rjmp	.+2380   	; 0x24f2 <calculadora+0xad8>
				case 'd': M = M + N1; N1 = 0; N2 = 0; estado = 0; mostrar(0); break;
    1ba6:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    1baa:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    1bae:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    1bb2:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    1bb6:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <M>
    1bba:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <M+0x1>
    1bbe:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <M+0x2>
    1bc2:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <M+0x3>
    1bc6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    1bca:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <M>
    1bce:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <M+0x1>
    1bd2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <M+0x2>
    1bd6:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <M+0x3>
    1bda:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    1bde:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    1be2:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    1be6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    1bea:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1bee:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1bf2:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1bf6:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    1bfa:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    1bfe:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1c0a:	73 c4       	rjmp	.+2278   	; 0x24f2 <calculadora+0xad8>
				case 'n': M = M - N1; N1 = 0; N2 = 0; estado = 0; mostrar(0); break;
    1c0c:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    1c10:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    1c14:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    1c18:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    1c1c:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <M>
    1c20:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <M+0x1>
    1c24:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <M+0x2>
    1c28:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <M+0x3>
    1c2c:	0e 94 77 16 	call	0x2cee	; 0x2cee <__subsf3>
    1c30:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <M>
    1c34:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <M+0x1>
    1c38:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <M+0x2>
    1c3c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <M+0x3>
    1c40:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    1c44:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    1c48:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    1c4c:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    1c50:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1c54:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1c58:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1c5c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    1c60:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    1c64:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1c70:	40 c4       	rjmp	.+2176   	; 0x24f2 <calculadora+0xad8>
				case 'a': M = 0;  N1 = 0; N2 = 0;     estado = 0; mostrar(0); break;
    1c72:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <M>
    1c76:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <M+0x1>
    1c7a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <M+0x2>
    1c7e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <M+0x3>
    1c82:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    1c86:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    1c8a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    1c8e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    1c92:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1c96:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1c9a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1c9e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    1ca2:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    1ca6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1cb2:	1f c4       	rjmp	.+2110   	; 0x24f2 <calculadora+0xad8>
				case 'f': mostrar(5); estado = 4; break;
    1cb4:	85 e0       	ldi	r24, 0x05	; 5
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1cbc:	84 e0       	ldi	r24, 0x04	; 4
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1cc4:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1cc8:	14 c4       	rjmp	.+2088   	; 0x24f2 <calculadora+0xad8>
			}
		}break;
		
		case 1: //estado 1
		punto = 0;
    1cca:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <punto+0x1>
    1cce:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <punto>
		contadorPunto = 0;
    1cd2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <contadorPunto+0x1>
    1cd6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <contadorPunto>
		if((entrada == '0')||
    1cda:	80 ed       	ldi	r24, 0xD0	; 208
    1cdc:	8c 0f       	add	r24, r28
    1cde:	8a 30       	cpi	r24, 0x0A	; 10
    1ce0:	10 f0       	brcs	.+4      	; 0x1ce6 <calculadora+0x2cc>
		(entrada == '4')||
		(entrada == '5')||
		(entrada == '6')||
		(entrada == '7')||
		(entrada == '8')||
		(entrada == '9')||
    1ce2:	ce 32       	cpi	r28, 0x2E	; 46
    1ce4:	a1 f4       	brne	.+40     	; 0x1d0e <calculadora+0x2f4>
		(entrada == '.')) { N2 = 0; actualizarNumero(2,entrada); estado = 2;}
    1ce6:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1cea:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1cee:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1cf2:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    1cf6:	6c 2f       	mov	r22, r28
    1cf8:	82 e0       	ldi	r24, 0x02	; 2
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 92 05 	call	0xb24	; 0xb24 <actualizarNumero>
    1d00:	82 e0       	ldi	r24, 0x02	; 2
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1d08:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1d0c:	f2 c3       	rjmp	.+2020   	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == '+')||
    1d0e:	8c 2f       	mov	r24, r28
    1d10:	8d 7f       	andi	r24, 0xFD	; 253
    1d12:	8d 32       	cpi	r24, 0x2D	; 45
    1d14:	31 f0       	breq	.+12     	; 0x1d22 <calculadora+0x308>
		(entrada == '-')||
    1d16:	86 ed       	ldi	r24, 0xD6	; 214
    1d18:	8c 0f       	add	r24, r28
    1d1a:	82 30       	cpi	r24, 0x02	; 2
    1d1c:	10 f0       	brcs	.+4      	; 0x1d22 <calculadora+0x308>
		(entrada == '*')||
		(entrada == '/')||
    1d1e:	ce 35       	cpi	r28, 0x5E	; 94
    1d20:	69 f4       	brne	.+26     	; 0x1d3c <calculadora+0x322>
		(entrada == '^')) {operador = entrada; estado = 1; mostrar(3);}
    1d22:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <operador>
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1d2e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1d3a:	db c3       	rjmp	.+1974   	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == 'q')||
    1d3c:	c1 37       	cpi	r28, 0x71	; 113
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <calculadora+0x346>
    1d40:	84 e9       	ldi	r24, 0x94	; 148
    1d42:	8c 0f       	add	r24, r28
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	60 f0       	brcs	.+24     	; 0x1d60 <calculadora+0x346>
		(entrada == 'l')||
		(entrada == 'e')||
    1d48:	8d e8       	ldi	r24, 0x8D	; 141
    1d4a:	8c 0f       	add	r24, r28
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	40 f0       	brcs	.+16     	; 0x1d60 <calculadora+0x346>
		(entrada == 's')||
    1d50:	8d e9       	ldi	r24, 0x9D	; 157
    1d52:	8c 0f       	add	r24, r28
    1d54:	83 30       	cpi	r24, 0x03	; 3
    1d56:	20 f0       	brcs	.+8      	; 0x1d60 <calculadora+0x346>
		(entrada == 'c')||
		(entrada == 't')||
    1d58:	c7 36       	cpi	r28, 0x67	; 103
    1d5a:	11 f0       	breq	.+4      	; 0x1d60 <calculadora+0x346>
		(entrada == 'g')||
    1d5c:	c8 37       	cpi	r28, 0x78	; 120
    1d5e:	79 f4       	brne	.+30     	; 0x1d7e <calculadora+0x364>
		(entrada == 'x')||
		(entrada == 'm')||
		(entrada == 'd')||
		(entrada == 'n')) { estado = 4; mostrar(0); mostrar(6);} //error
    1d60:	84 e0       	ldi	r24, 0x04	; 4
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1d68:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1d74:	86 e0       	ldi	r24, 0x06	; 6
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1d7c:	ba c3       	rjmp	.+1908   	; 0x24f2 <calculadora+0xad8>
		else{
			switch (entrada){
    1d7e:	c1 36       	cpi	r28, 0x61	; 97
    1d80:	91 f1       	breq	.+100    	; 0x1de6 <calculadora+0x3cc>
    1d82:	20 f4       	brcc	.+8      	; 0x1d8c <calculadora+0x372>
    1d84:	cd 33       	cpi	r28, 0x3D	; 61
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <calculadora+0x370>
    1d88:	4f c0       	rjmp	.+158    	; 0x1e28 <calculadora+0x40e>
    1d8a:	b3 c3       	rjmp	.+1894   	; 0x24f2 <calculadora+0xad8>
    1d8c:	c6 36       	cpi	r28, 0x66	; 102
    1d8e:	09 f4       	brne	.+2      	; 0x1d92 <calculadora+0x378>
    1d90:	5e c0       	rjmp	.+188    	; 0x1e4e <calculadora+0x434>
    1d92:	c0 37       	cpi	r28, 0x70	; 112
    1d94:	09 f0       	breq	.+2      	; 0x1d98 <calculadora+0x37e>
    1d96:	ad c3       	rjmp	.+1882   	; 0x24f2 <calculadora+0xad8>
				case 'p': N2 = pi;  calcular2(N1,N2,operador);  estado = 3; mostrar(2); break;
    1d98:	80 ed       	ldi	r24, 0xD0	; 208
    1d9a:	9f e0       	ldi	r25, 0x0F	; 15
    1d9c:	a9 e4       	ldi	r26, 0x49	; 73
    1d9e:	b0 e4       	ldi	r27, 0x40	; 64
    1da0:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <N2>
    1da4:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <N2+0x1>
    1da8:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <N2+0x2>
    1dac:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <N2+0x3>
    1db0:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1db4:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1db8:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1dbc:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1dc0:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    1dc4:	20 ed       	ldi	r18, 0xD0	; 208
    1dc6:	3f e0       	ldi	r19, 0x0F	; 15
    1dc8:	49 e4       	ldi	r20, 0x49	; 73
    1dca:	50 e4       	ldi	r21, 0x40	; 64
    1dcc:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1dd8:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1de4:	86 c3       	rjmp	.+1804   	; 0x24f2 <calculadora+0xad8>
				case 'a': M = 0;  N1 = 0; N2 = 0; punto = 0;    contadorPunto = 0; estado = 0; mostrar(0);   break;
    1de6:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <M>
    1dea:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <M+0x1>
    1dee:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <M+0x2>
    1df2:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <M+0x3>
    1df6:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    1dfa:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    1dfe:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    1e02:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    1e06:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1e0a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1e0e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1e12:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    1e16:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    1e1a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1e26:	65 c3       	rjmp	.+1738   	; 0x24f2 <calculadora+0xad8>
				case '=': calcular2(N1,N1,operador);    estado = 0; break;
    1e28:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1e2c:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1e30:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1e34:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1e38:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    1e3c:	9b 01       	movw	r18, r22
    1e3e:	ac 01       	movw	r20, r24
    1e40:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    1e44:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    1e48:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    1e4c:	52 c3       	rjmp	.+1700   	; 0x24f2 <calculadora+0xad8>
				case 'f': mostrar(5); estado = 4; break;
    1e4e:	85 e0       	ldi	r24, 0x05	; 5
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1e56:	84 e0       	ldi	r24, 0x04	; 4
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1e5e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1e62:	47 c3       	rjmp	.+1678   	; 0x24f2 <calculadora+0xad8>
			}
		}
		break;
		
		case 2: //estado 2
		if((entrada == '0')||
    1e64:	80 ed       	ldi	r24, 0xD0	; 208
    1e66:	8c 0f       	add	r24, r28
    1e68:	8a 30       	cpi	r24, 0x0A	; 10
    1e6a:	10 f0       	brcs	.+4      	; 0x1e70 <calculadora+0x456>
		(entrada == '4')||
		(entrada == '5')||
		(entrada == '6')||
		(entrada == '7')||
		(entrada == '8')||
		(entrada == '9')||
    1e6c:	ce 32       	cpi	r28, 0x2E	; 46
    1e6e:	61 f4       	brne	.+24     	; 0x1e88 <calculadora+0x46e>
		(entrada == '.')) { actualizarNumero(2,entrada); estado = 2;}
    1e70:	6c 2f       	mov	r22, r28
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	0e 94 92 05 	call	0xb24	; 0xb24 <actualizarNumero>
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1e82:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1e86:	35 c3       	rjmp	.+1642   	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == '+')||
    1e88:	8c 2f       	mov	r24, r28
    1e8a:	8d 7f       	andi	r24, 0xFD	; 253
    1e8c:	8d 32       	cpi	r24, 0x2D	; 45
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <calculadora+0x482>
		(entrada == '-')||
    1e90:	86 ed       	ldi	r24, 0xD6	; 214
    1e92:	8c 0f       	add	r24, r28
    1e94:	82 30       	cpi	r24, 0x02	; 2
    1e96:	10 f0       	brcs	.+4      	; 0x1e9c <calculadora+0x482>
		(entrada == '*')||
		(entrada == '/')||
    1e98:	ce 35       	cpi	r28, 0x5E	; 94
    1e9a:	49 f5       	brne	.+82     	; 0x1eee <calculadora+0x4d4>
		(entrada == '^')) { calcular2(N1,N2,operador); estado = 1;  operador = entrada; mostrar(0); mostrar(1); mostrar(3); }
    1e9c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1ea0:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1ea4:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    1ea8:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    1eac:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1eb0:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1eb4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1eb8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1ebc:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    1ec0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1ecc:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1ed0:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <operador>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1eec:	02 c3       	rjmp	.+1540   	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == 'q')||
    1eee:	c1 37       	cpi	r28, 0x71	; 113
    1ef0:	71 f0       	breq	.+28     	; 0x1f0e <calculadora+0x4f4>
    1ef2:	cc 36       	cpi	r28, 0x6C	; 108
    1ef4:	61 f0       	breq	.+24     	; 0x1f0e <calculadora+0x4f4>
		(entrada == 'l')||
    1ef6:	c5 36       	cpi	r28, 0x65	; 101
    1ef8:	51 f0       	breq	.+20     	; 0x1f0e <calculadora+0x4f4>
		(entrada == 'e')||
    1efa:	8d e8       	ldi	r24, 0x8D	; 141
    1efc:	8c 0f       	add	r24, r28
    1efe:	82 30       	cpi	r24, 0x02	; 2
    1f00:	30 f0       	brcs	.+12     	; 0x1f0e <calculadora+0x4f4>
		(entrada == 's')||
    1f02:	8c 2f       	mov	r24, r28
    1f04:	8b 7f       	andi	r24, 0xFB	; 251
    1f06:	83 36       	cpi	r24, 0x63	; 99
    1f08:	11 f0       	breq	.+4      	; 0x1f0e <calculadora+0x4f4>
		(entrada == 'c')||
		(entrada == 't')||
		(entrada == 'g')||
    1f0a:	c8 37       	cpi	r28, 0x78	; 120
    1f0c:	31 f5       	brne	.+76     	; 0x1f5a <calculadora+0x540>
		(entrada == 'x')) {calcular2(N1,N2,operador); calcular1(N1,entrada); estado = 3;}
    1f0e:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    1f12:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    1f16:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    1f1a:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    1f1e:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1f22:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1f26:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1f2a:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1f2e:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    1f32:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    1f36:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1f3a:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1f3e:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1f42:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1f46:	4c 2f       	mov	r20, r28
    1f48:	0e 94 aa 0b 	call	0x1754	; 0x1754 <calcular1>
    1f4c:	83 e0       	ldi	r24, 0x03	; 3
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1f54:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1f58:	cc c2       	rjmp	.+1432   	; 0x24f2 <calculadora+0xad8>
		else{
			switch (entrada){
    1f5a:	8c 2f       	mov	r24, r28
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	fc 01       	movw	r30, r24
    1f60:	fd 97       	sbiw	r30, 0x3d	; 61
    1f62:	e4 33       	cpi	r30, 0x34	; 52
    1f64:	f1 05       	cpc	r31, r1
    1f66:	08 f0       	brcs	.+2      	; 0x1f6a <calculadora+0x550>
    1f68:	c4 c2       	rjmp	.+1416   	; 0x24f2 <calculadora+0xad8>
    1f6a:	ef 57       	subi	r30, 0x7F	; 127
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	0c 94 de 1a 	jmp	0x35bc	; 0x35bc <__tablejump2__>
				case 'p': N2 = pi;  calcular2(N1,N2,operador);  estado = 3; mostrar(2); break;
    1f72:	80 ed       	ldi	r24, 0xD0	; 208
    1f74:	9f e0       	ldi	r25, 0x0F	; 15
    1f76:	a9 e4       	ldi	r26, 0x49	; 73
    1f78:	b0 e4       	ldi	r27, 0x40	; 64
    1f7a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <N2>
    1f7e:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <N2+0x1>
    1f82:	a0 93 9c 01 	sts	0x019C, r26	; 0x80019c <N2+0x2>
    1f86:	b0 93 9d 01 	sts	0x019D, r27	; 0x80019d <N2+0x3>
    1f8a:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    1f8e:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    1f92:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    1f96:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    1f9a:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    1f9e:	20 ed       	ldi	r18, 0xD0	; 208
    1fa0:	3f e0       	ldi	r19, 0x0F	; 15
    1fa2:	49 e4       	ldi	r20, 0x49	; 73
    1fa4:	50 e4       	ldi	r21, 0x40	; 64
    1fa6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    1faa:	83 e0       	ldi	r24, 0x03	; 3
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    1fb2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    1fbe:	99 c2       	rjmp	.+1330   	; 0x24f2 <calculadora+0xad8>
				case 'a': M = 0;  N1 = 0; N2 = 0; punto = 0;  contadorPunto = 0; estado = 0; mostrar(0);  break;
    1fc0:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <M>
    1fc4:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <M+0x1>
    1fc8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <M+0x2>
    1fcc:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <M+0x3>
    1fd0:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    1fd4:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    1fd8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    1fdc:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    1fe0:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    1fe4:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    1fe8:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    1fec:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    1ff0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <punto+0x1>
    1ff4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <punto>
    1ff8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <contadorPunto+0x1>
    1ffc:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <contadorPunto>
    2000:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    2004:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2010:	70 c2       	rjmp	.+1248   	; 0x24f2 <calculadora+0xad8>
				case '=': calcular2(N1,N2,operador);  estado = 3; mostrar(2);   break;
    2012:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    2016:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    201a:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    201e:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    2022:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    2026:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    202a:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    202e:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    2032:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    2036:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    203a:	83 e0       	ldi	r24, 0x03	; 3
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    2042:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    2046:	82 e0       	ldi	r24, 0x02	; 2
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    204e:	51 c2       	rjmp	.+1186   	; 0x24f2 <calculadora+0xad8>
				case 'm': N1 = M; N2 = 0;      estado = 3;  mostrar(0); mostrar(1);     break;
    2050:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <M>
    2054:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <M+0x1>
    2058:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <M+0x2>
    205c:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <M+0x3>
    2060:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N1>
    2064:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <N1+0x1>
    2068:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <N1+0x2>
    206c:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <N1+0x3>
    2070:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    2074:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    2078:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    207c:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    2088:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    209c:	2a c2       	rjmp	.+1108   	; 0x24f2 <calculadora+0xad8>
				case 'd': calcular2(N1,N2,operador); M = M + N1; N1 = 0; N2 = 0;  estado = 0; mostrar(0);  break;
    209e:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    20a2:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    20a6:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    20aa:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    20ae:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    20b2:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    20b6:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    20ba:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    20be:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    20c2:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    20c6:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    20ca:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    20ce:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    20d2:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    20d6:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <M>
    20da:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <M+0x1>
    20de:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <M+0x2>
    20e2:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <M+0x3>
    20e6:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    20ea:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <M>
    20ee:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <M+0x1>
    20f2:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <M+0x2>
    20f6:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <M+0x3>
    20fa:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    20fe:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    2102:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    2106:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    210a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    210e:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    2112:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    2116:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    211a:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    211e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    212a:	e3 c1       	rjmp	.+966    	; 0x24f2 <calculadora+0xad8>
				case 'n': calcular2(N1,N2,operador); M = M - N1; N1 = 0; N2 = 0;  estado = 0; mostrar(0);  break;
    212c:	20 91 9a 01 	lds	r18, 0x019A	; 0x80019a <N2>
    2130:	30 91 9b 01 	lds	r19, 0x019B	; 0x80019b <N2+0x1>
    2134:	40 91 9c 01 	lds	r20, 0x019C	; 0x80019c <N2+0x2>
    2138:	50 91 9d 01 	lds	r21, 0x019D	; 0x80019d <N2+0x3>
    213c:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    2140:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    2144:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    2148:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    214c:	00 91 03 01 	lds	r16, 0x0103	; 0x800103 <operador>
    2150:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <calcular2>
    2154:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    2158:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    215c:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    2160:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    2164:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <M>
    2168:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <M+0x1>
    216c:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <M+0x2>
    2170:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <M+0x3>
    2174:	0e 94 77 16 	call	0x2cee	; 0x2cee <__subsf3>
    2178:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <M>
    217c:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <M+0x1>
    2180:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <M+0x2>
    2184:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <M+0x3>
    2188:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    218c:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    2190:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    2194:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    2198:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    219c:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    21a0:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    21a4:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    21a8:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    21ac:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    21b8:	9c c1       	rjmp	.+824    	; 0x24f2 <calculadora+0xad8>
				case 'f': mostrar(5); estado = 4; break;
    21ba:	85 e0       	ldi	r24, 0x05	; 5
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    21c2:	84 e0       	ldi	r24, 0x04	; 4
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    21ca:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    21ce:	91 c1       	rjmp	.+802    	; 0x24f2 <calculadora+0xad8>
			}
		}
		break;
		
		case 3: //estado 3
		punto = 0;
    21d0:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <punto+0x1>
    21d4:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <punto>
		contadorPunto = 0;
    21d8:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <contadorPunto+0x1>
    21dc:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <contadorPunto>
		if((entrada == '0')||
    21e0:	80 ed       	ldi	r24, 0xD0	; 208
    21e2:	8c 0f       	add	r24, r28
    21e4:	8a 30       	cpi	r24, 0x0A	; 10
    21e6:	10 f0       	brcs	.+4      	; 0x21ec <calculadora+0x7d2>
		(entrada == '4')||
		(entrada == '5')||
		(entrada == '6')||
		(entrada == '7')||
		(entrada == '8')||
		(entrada == '9')||
    21e8:	ce 32       	cpi	r28, 0x2E	; 46
    21ea:	91 f4       	brne	.+36     	; 0x2210 <calculadora+0x7f6>
		(entrada == '.')) { N1 = 0; actualizarNumero(1,entrada); estado = 0;}
    21ec:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    21f0:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    21f4:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    21f8:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    21fc:	6c 2f       	mov	r22, r28
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	0e 94 92 05 	call	0xb24	; 0xb24 <actualizarNumero>
    2206:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    220a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    220e:	71 c1       	rjmp	.+738    	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == '+')||
    2210:	8c 2f       	mov	r24, r28
    2212:	8d 7f       	andi	r24, 0xFD	; 253
    2214:	8d 32       	cpi	r24, 0x2D	; 45
    2216:	31 f0       	breq	.+12     	; 0x2224 <calculadora+0x80a>
		(entrada == '-')||
    2218:	86 ed       	ldi	r24, 0xD6	; 214
    221a:	8c 0f       	add	r24, r28
    221c:	82 30       	cpi	r24, 0x02	; 2
    221e:	10 f0       	brcs	.+4      	; 0x2224 <calculadora+0x80a>
		(entrada == '*')||
		(entrada == '/')||
    2220:	ce 35       	cpi	r28, 0x5E	; 94
    2222:	99 f4       	brne	.+38     	; 0x224a <calculadora+0x830>
		(entrada == '^')) {operador = entrada; mostrar(0); estado = 1; mostrar(1); mostrar(3);  }
    2224:	c0 93 03 01 	sts	0x0103, r28	; 0x800103 <operador>
    2228:	80 e0       	ldi	r24, 0x00	; 0
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    2238:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    223c:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2248:	54 c1       	rjmp	.+680    	; 0x24f2 <calculadora+0xad8>
		else if ((entrada == 'q')||
    224a:	c1 37       	cpi	r28, 0x71	; 113
    224c:	71 f0       	breq	.+28     	; 0x226a <calculadora+0x850>
    224e:	cc 36       	cpi	r28, 0x6C	; 108
    2250:	61 f0       	breq	.+24     	; 0x226a <calculadora+0x850>
		(entrada == 'l')||
    2252:	c5 36       	cpi	r28, 0x65	; 101
    2254:	51 f0       	breq	.+20     	; 0x226a <calculadora+0x850>
		(entrada == 'e')||
    2256:	8d e8       	ldi	r24, 0x8D	; 141
    2258:	8c 0f       	add	r24, r28
    225a:	82 30       	cpi	r24, 0x02	; 2
    225c:	30 f0       	brcs	.+12     	; 0x226a <calculadora+0x850>
		(entrada == 's')||
    225e:	8c 2f       	mov	r24, r28
    2260:	8b 7f       	andi	r24, 0xFB	; 251
    2262:	83 36       	cpi	r24, 0x63	; 99
    2264:	11 f0       	breq	.+4      	; 0x226a <calculadora+0x850>
		(entrada == 'c')||
		(entrada == 't')||
		(entrada == 'g')||
    2266:	c8 37       	cpi	r28, 0x78	; 120
    2268:	91 f4       	brne	.+36     	; 0x228e <calculadora+0x874>
		(entrada == 'x')) {calcular1(N1,entrada);   estado = 3;}
    226a:	60 91 9e 01 	lds	r22, 0x019E	; 0x80019e <N1>
    226e:	70 91 9f 01 	lds	r23, 0x019F	; 0x80019f <N1+0x1>
    2272:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <N1+0x2>
    2276:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <N1+0x3>
    227a:	4c 2f       	mov	r20, r28
    227c:	0e 94 aa 0b 	call	0x1754	; 0x1754 <calcular1>
    2280:	83 e0       	ldi	r24, 0x03	; 3
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    2288:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    228c:	32 c1       	rjmp	.+612    	; 0x24f2 <calculadora+0xad8>
		else{
			switch (entrada){
    228e:	c6 36       	cpi	r28, 0x66	; 102
    2290:	09 f4       	brne	.+2      	; 0x2294 <calculadora+0x87a>
    2292:	da c0       	rjmp	.+436    	; 0x2448 <calculadora+0xa2e>
    2294:	38 f4       	brcc	.+14     	; 0x22a4 <calculadora+0x88a>
    2296:	c1 36       	cpi	r28, 0x61	; 97
    2298:	09 f4       	brne	.+2      	; 0x229c <calculadora+0x882>
    229a:	b5 c0       	rjmp	.+362    	; 0x2406 <calculadora+0x9ec>
    229c:	c4 36       	cpi	r28, 0x64	; 100
    229e:	09 f4       	brne	.+2      	; 0x22a2 <calculadora+0x888>
    22a0:	4c c0       	rjmp	.+152    	; 0x233a <calculadora+0x920>
    22a2:	27 c1       	rjmp	.+590    	; 0x24f2 <calculadora+0xad8>
    22a4:	ce 36       	cpi	r28, 0x6E	; 110
    22a6:	09 f4       	brne	.+2      	; 0x22aa <calculadora+0x890>
    22a8:	7b c0       	rjmp	.+246    	; 0x23a0 <calculadora+0x986>
    22aa:	c0 37       	cpi	r28, 0x70	; 112
    22ac:	21 f0       	breq	.+8      	; 0x22b6 <calculadora+0x89c>
    22ae:	cd 36       	cpi	r28, 0x6D	; 109
    22b0:	09 f0       	breq	.+2      	; 0x22b4 <calculadora+0x89a>
    22b2:	1f c1       	rjmp	.+574    	; 0x24f2 <calculadora+0xad8>
    22b4:	1b c0       	rjmp	.+54     	; 0x22ec <calculadora+0x8d2>
				case 'p': N1 = pi;              estado = 3; mostrar(0); mostrar(1); break;
    22b6:	80 ed       	ldi	r24, 0xD0	; 208
    22b8:	9f e0       	ldi	r25, 0x0F	; 15
    22ba:	a9 e4       	ldi	r26, 0x49	; 73
    22bc:	b0 e4       	ldi	r27, 0x40	; 64
    22be:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N1>
    22c2:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <N1+0x1>
    22c6:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <N1+0x2>
    22ca:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <N1+0x3>
    22ce:	83 e0       	ldi	r24, 0x03	; 3
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    22d6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    22ea:	03 c1       	rjmp	.+518    	; 0x24f2 <calculadora+0xad8>
				case 'm': N1 = M; N2 = 0;       estado = 3; mostrar(0); mostrar(1); break;
    22ec:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <M>
    22f0:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <M+0x1>
    22f4:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <M+0x2>
    22f8:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <M+0x3>
    22fc:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <N1>
    2300:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <N1+0x1>
    2304:	a0 93 a0 01 	sts	0x01A0, r26	; 0x8001a0 <N1+0x2>
    2308:	b0 93 a1 01 	sts	0x01A1, r27	; 0x8001a1 <N1+0x3>
    230c:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    2310:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    2314:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    2318:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    231c:	83 e0       	ldi	r24, 0x03	; 3
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    2324:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2338:	dc c0       	rjmp	.+440    	; 0x24f2 <calculadora+0xad8>
				case 'd': M = M + N1; N1 = 0; N2 = 0;   estado = 0; mostrar(0); break;
    233a:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    233e:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    2342:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    2346:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    234a:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <M>
    234e:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <M+0x1>
    2352:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <M+0x2>
    2356:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <M+0x3>
    235a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    235e:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <M>
    2362:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <M+0x1>
    2366:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <M+0x2>
    236a:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <M+0x3>
    236e:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    2372:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    2376:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    237a:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    237e:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    2382:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    2386:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    238a:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    238e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    2392:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    239e:	a9 c0       	rjmp	.+338    	; 0x24f2 <calculadora+0xad8>
				case 'n': M = M - N1; N1 = 0; N2 = 0;   estado = 0; mostrar(0); break;
    23a0:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <N1>
    23a4:	30 91 9f 01 	lds	r19, 0x019F	; 0x80019f <N1+0x1>
    23a8:	40 91 a0 01 	lds	r20, 0x01A0	; 0x8001a0 <N1+0x2>
    23ac:	50 91 a1 01 	lds	r21, 0x01A1	; 0x8001a1 <N1+0x3>
    23b0:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <M>
    23b4:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <M+0x1>
    23b8:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <M+0x2>
    23bc:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <M+0x3>
    23c0:	0e 94 77 16 	call	0x2cee	; 0x2cee <__subsf3>
    23c4:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <M>
    23c8:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <M+0x1>
    23cc:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <M+0x2>
    23d0:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <M+0x3>
    23d4:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    23d8:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    23dc:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    23e0:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    23e4:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    23e8:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    23ec:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    23f0:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    23f4:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    23f8:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2404:	76 c0       	rjmp	.+236    	; 0x24f2 <calculadora+0xad8>
				case 'a': M = 0;  N1 = 0; N2 = 0; punto = 0; contadorPunto = 0; estado = 0; mostrar(0); break;
    2406:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <M>
    240a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <M+0x1>
    240e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <M+0x2>
    2412:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <M+0x3>
    2416:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    241a:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    241e:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    2422:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    2426:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    242a:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    242e:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    2432:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    2436:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    243a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2446:	55 c0       	rjmp	.+170    	; 0x24f2 <calculadora+0xad8>
				case 'f': mostrar(5); estado = 4; break;
    2448:	85 e0       	ldi	r24, 0x05	; 5
    244a:	90 e0       	ldi	r25, 0x00	; 0
    244c:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    2450:	84 e0       	ldi	r24, 0x04	; 4
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    2458:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    245c:	4a c0       	rjmp	.+148    	; 0x24f2 <calculadora+0xad8>
			}
		}
		break;
		
		case 4: //estado 4
		if ((entrada == 'o'))
    245e:	cf 36       	cpi	r28, 0x6F	; 111
    2460:	69 f5       	brne	.+90     	; 0x24bc <calculadora+0xaa2>
		{
			M = 0;  N1 = 0; N2 = 0; estado = 0; punto = 0; contadorPunto = 0; mostrar(0); ovfe = 0;
    2462:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <M>
    2466:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <M+0x1>
    246a:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <M+0x2>
    246e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <M+0x3>
    2472:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <N1>
    2476:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <N1+0x1>
    247a:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <N1+0x2>
    247e:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <N1+0x3>
    2482:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <N2>
    2486:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <N2+0x1>
    248a:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <N2+0x2>
    248e:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <N2+0x3>
    2492:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <estado+0x1>
    2496:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <estado>
    249a:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <punto+0x1>
    249e:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <punto>
    24a2:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <contadorPunto+0x1>
    24a6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <contadorPunto>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    24b2:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <ovfe+0x1>
    24b6:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <ovfe>
    24ba:	1b c0       	rjmp	.+54     	; 0x24f2 <calculadora+0xad8>
			//prender pantalla
		}
		else if ((entrada == 'f'))
    24bc:	c6 36       	cpi	r28, 0x66	; 102
    24be:	59 f4       	brne	.+22     	; 0x24d6 <calculadora+0xabc>
		{
			mostrar(5); estado = 4;
    24c0:	85 e0       	ldi	r24, 0x05	; 5
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    24c8:	84 e0       	ldi	r24, 0x04	; 4
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    24d0:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
    24d4:	0e c0       	rjmp	.+28     	; 0x24f2 <calculadora+0xad8>
		}
		else{
			mostrar(0); mostrar(6); estado = 4; //error
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    24de:	86 e0       	ldi	r24, 0x06	; 6
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	0e 94 12 05 	call	0xa24	; 0xa24 <mostrar>
    24e6:	84 e0       	ldi	r24, 0x04	; 4
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <estado+0x1>
    24ee:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <estado>
		}
		break;
	}
}
    24f2:	cf 91       	pop	r28
    24f4:	0f 91       	pop	r16
    24f6:	08 95       	ret

000024f8 <teclado>:
}



void teclado(void) //interpretacion de seleccion, mapea input
{
    24f8:	ef 92       	push	r14
    24fa:	ff 92       	push	r15
    24fc:	1f 93       	push	r17
    24fe:	cf 93       	push	r28
    2500:	df 93       	push	r29
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	a2 97       	sbiw	r28, 0x22	; 34
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	f8 94       	cli
    250c:	de bf       	out	0x3e, r29	; 62
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	cd bf       	out	0x3d, r28	; 61
	//presionado es el input
	//mapear presionado con respectiva entrada en entradas
	//cambiar orden en este string segun se necesite
	char entradas[32] = "=396xtln/-*+apg^0174osqm.285fced";
    2512:	80 e2       	ldi	r24, 0x20	; 32
    2514:	e4 e0       	ldi	r30, 0x04	; 4
    2516:	f1 e0       	ldi	r31, 0x01	; 1
    2518:	de 01       	movw	r26, r28
    251a:	11 96       	adiw	r26, 0x01	; 1
    251c:	01 90       	ld	r0, Z+
    251e:	0d 92       	st	X+, r0
    2520:	8a 95       	dec	r24
    2522:	e1 f7       	brne	.-8      	; 0x251c <teclado+0x24>
	char ent = entradas[presionado];
    2524:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <presionado>
    2528:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <presionado+0x1>
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	8c 0f       	add	r24, r28
    2532:	9d 1f       	adc	r25, r29
    2534:	e8 0f       	add	r30, r24
    2536:	f9 1f       	adc	r31, r25
    2538:	10 81       	ld	r17, Z
	//calculadora(entrada); //le pasa la entrada a la calculadora
	
	//FIN OCUPADO
	//MOSTRAR PRESIONADO POR USART (por ahora)
	char str[2];
	calculadora(ent);
    253a:	81 2f       	mov	r24, r17
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <calculadora>
	if (ent == 'o'){
    2542:	1f 36       	cpi	r17, 0x6F	; 111
    2544:	29 f4       	brne	.+10     	; 0x2550 <teclado+0x58>
		ClearScreen(0xffff);
    2546:	8f ef       	ldi	r24, 0xFF	; 255
    2548:	9f ef       	ldi	r25, 0xFF	; 255
    254a:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ClearScreen>
    254e:	06 c0       	rjmp	.+12     	; 0x255c <teclado+0x64>
	}
	else if(ent == 'f') {
    2550:	16 36       	cpi	r17, 0x66	; 102
    2552:	21 f4       	brne	.+8      	; 0x255c <teclado+0x64>
		ClearScreen(0x0000);
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <ClearScreen>
	}
	sprintf(str, "%d", presionado);
    255c:	80 91 65 01 	lds	r24, 0x0165	; 0x800165 <presionado+0x1>
    2560:	8f 93       	push	r24
    2562:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <presionado>
    2566:	8f 93       	push	r24
    2568:	85 e5       	ldi	r24, 0x55	; 85
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	9f 93       	push	r25
    256e:	8f 93       	push	r24
    2570:	7e 01       	movw	r14, r28
    2572:	91 e2       	ldi	r25, 0x21	; 33
    2574:	e9 0e       	add	r14, r25
    2576:	f1 1c       	adc	r15, r1
    2578:	ff 92       	push	r15
    257a:	ef 92       	push	r14
    257c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <sprintf>
	USART_Transmit_String(str);
    2580:	c7 01       	movw	r24, r14
    2582:	0e 94 5d 16 	call	0x2cba	; 0x2cba <USART_Transmit_String>
	USART_Transmit_String(" -> ");
    2586:	88 e5       	ldi	r24, 0x58	; 88
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <USART_Transmit_String>
	USART_Transmit_char(ent);
    258e:	81 2f       	mov	r24, r17
    2590:	0e 94 55 16 	call	0x2caa	; 0x2caa <USART_Transmit_char>
	USART_Transmit_char('\n');
    2594:	8a e0       	ldi	r24, 0x0A	; 10
    2596:	0e 94 55 16 	call	0x2caa	; 0x2caa <USART_Transmit_char>
	}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	0f 90       	pop	r0
    25a6:	a2 96       	adiw	r28, 0x22	; 34
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	ff 90       	pop	r15
    25ba:	ef 90       	pop	r14
    25bc:	08 95       	ret

000025be <__vector_5>:
Change Interrupt Request 1 (PCI1) will trigger if any enabled PCINT[14:8] pin toggles. The Pin Change
Interrupt Request 0 (PCI0) will trigger if any enabled PCINT[7:0] pin toggles.
PC2,3,4,5 -> PCINIT10,11,12,13 -> PCI1
PD4,5,6,7 -> PCINIT20,21,22,23 -> PCI2*/
ISR(PCINT2_vect) //seccion2 D
{
    25be:	1f 92       	push	r1
    25c0:	0f 92       	push	r0
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	0f 92       	push	r0
    25c6:	11 24       	eor	r1, r1
    25c8:	2f 93       	push	r18
    25ca:	3f 93       	push	r19
    25cc:	4f 93       	push	r20
    25ce:	5f 93       	push	r21
    25d0:	6f 93       	push	r22
    25d2:	7f 93       	push	r23
    25d4:	8f 93       	push	r24
    25d6:	9f 93       	push	r25
    25d8:	af 93       	push	r26
    25da:	bf 93       	push	r27
    25dc:	ef 93       	push	r30
    25de:	ff 93       	push	r31
	if(!deb){
    25e0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <deb>
    25e4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <deb+0x1>
    25e8:	89 2b       	or	r24, r25
    25ea:	e9 f5       	brne	.+122    	; 0x2666 <__vector_5+0xa8>
		if      (!(PIND & (1<<PIND4))) { presionado = linea + 0; dx = 0;}
    25ec:	4c 99       	sbic	0x09, 4	; 9
    25ee:	09 c0       	rjmp	.+18     	; 0x2602 <__vector_5+0x44>
    25f0:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    25f4:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    25f8:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    25fc:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
    2600:	23 c0       	rjmp	.+70     	; 0x2648 <__vector_5+0x8a>
		else if (!(PIND & (1<<PIND5))) { presionado = linea + 1; dx = 1;}
    2602:	4d 99       	sbic	0x09, 5	; 9
    2604:	0a c0       	rjmp	.+20     	; 0x261a <__vector_5+0x5c>
    2606:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    260a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    2614:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
    2618:	17 c0       	rjmp	.+46     	; 0x2648 <__vector_5+0x8a>
		else if (!(PIND & (1<<PIND6))) { presionado = linea + 2; dx = 2;}
    261a:	4e 99       	sbic	0x09, 6	; 9
    261c:	0a c0       	rjmp	.+20     	; 0x2632 <__vector_5+0x74>
    261e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    2622:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    2626:	02 96       	adiw	r24, 0x02	; 2
    2628:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    262c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
    2630:	0b c0       	rjmp	.+22     	; 0x2648 <__vector_5+0x8a>
		else if (!(PIND & (1<<PIND7))) { presionado = linea + 3; dx = 3;}
    2632:	4f 99       	sbic	0x09, 7	; 9
    2634:	09 c0       	rjmp	.+18     	; 0x2648 <__vector_5+0x8a>
    2636:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    263a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    263e:	03 96       	adiw	r24, 0x03	; 3
    2640:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    2644:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
		deb = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <deb+0x1>
    2650:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <deb>
		tdeb = tref;
    2654:	82 e3       	ldi	r24, 0x32	; 50
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    265c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		teclado();
    2660:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <teclado>
    2664:	06 c0       	rjmp	.+12     	; 0x2672 <__vector_5+0xb4>
	}
	else{
		tdeb = tref;
    2666:	82 e3       	ldi	r24, 0x32	; 50
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    266e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
    2672:	ff 91       	pop	r31
    2674:	ef 91       	pop	r30
    2676:	bf 91       	pop	r27
    2678:	af 91       	pop	r26
    267a:	9f 91       	pop	r25
    267c:	8f 91       	pop	r24
    267e:	7f 91       	pop	r23
    2680:	6f 91       	pop	r22
    2682:	5f 91       	pop	r21
    2684:	4f 91       	pop	r20
    2686:	3f 91       	pop	r19
    2688:	2f 91       	pop	r18
    268a:	0f 90       	pop	r0
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	0f 90       	pop	r0
    2690:	1f 90       	pop	r1
    2692:	18 95       	reti

00002694 <__vector_4>:

ISR(PCINT1_vect) //seccion1 C
{
    2694:	1f 92       	push	r1
    2696:	0f 92       	push	r0
    2698:	0f b6       	in	r0, 0x3f	; 63
    269a:	0f 92       	push	r0
    269c:	11 24       	eor	r1, r1
    269e:	2f 93       	push	r18
    26a0:	3f 93       	push	r19
    26a2:	4f 93       	push	r20
    26a4:	5f 93       	push	r21
    26a6:	6f 93       	push	r22
    26a8:	7f 93       	push	r23
    26aa:	8f 93       	push	r24
    26ac:	9f 93       	push	r25
    26ae:	af 93       	push	r26
    26b0:	bf 93       	push	r27
    26b2:	ef 93       	push	r30
    26b4:	ff 93       	push	r31
	if(!deb){
    26b6:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <deb>
    26ba:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <deb+0x1>
    26be:	89 2b       	or	r24, r25
    26c0:	f1 f5       	brne	.+124    	; 0x273e <__vector_4+0xaa>
		if      (!(PINC & (1<<PINC2))) { presionado = linea + 4; dx = 4;}
    26c2:	32 99       	sbic	0x06, 2	; 6
    26c4:	0a c0       	rjmp	.+20     	; 0x26da <__vector_4+0x46>
    26c6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    26ca:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    26ce:	04 96       	adiw	r24, 0x04	; 4
    26d0:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    26d4:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
    26d8:	23 c0       	rjmp	.+70     	; 0x2720 <__vector_4+0x8c>
		else if (!(PINC & (1<<PINC3))) { presionado = linea + 5; dx = 5;}
    26da:	33 99       	sbic	0x06, 3	; 6
    26dc:	0a c0       	rjmp	.+20     	; 0x26f2 <__vector_4+0x5e>
    26de:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    26e2:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    26e6:	05 96       	adiw	r24, 0x05	; 5
    26e8:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    26ec:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
    26f0:	17 c0       	rjmp	.+46     	; 0x2720 <__vector_4+0x8c>
		else if (!(PINC & (1<<PINC4))) { presionado = linea + 6; dx = 6;}
    26f2:	34 99       	sbic	0x06, 4	; 6
    26f4:	0a c0       	rjmp	.+20     	; 0x270a <__vector_4+0x76>
    26f6:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    26fa:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    26fe:	06 96       	adiw	r24, 0x06	; 6
    2700:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    2704:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
    2708:	0b c0       	rjmp	.+22     	; 0x2720 <__vector_4+0x8c>
		else if (!(PINC & (1<<PINC5))) { presionado = linea + 7; dx = 7;}
    270a:	35 99       	sbic	0x06, 5	; 6
    270c:	09 c0       	rjmp	.+18     	; 0x2720 <__vector_4+0x8c>
    270e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <linea>
    2712:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <linea+0x1>
    2716:	07 96       	adiw	r24, 0x07	; 7
    2718:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <presionado+0x1>
    271c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <presionado>
		deb = 1;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <deb+0x1>
    2728:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <deb>
		tdeb = tref;
    272c:	82 e3       	ldi	r24, 0x32	; 50
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2734:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		teclado();
    2738:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <teclado>
    273c:	06 c0       	rjmp	.+12     	; 0x274a <__vector_4+0xb6>
	}
	else{
		tdeb = tref;
    273e:	82 e3       	ldi	r24, 0x32	; 50
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2746:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	}
}
    274a:	ff 91       	pop	r31
    274c:	ef 91       	pop	r30
    274e:	bf 91       	pop	r27
    2750:	af 91       	pop	r26
    2752:	9f 91       	pop	r25
    2754:	8f 91       	pop	r24
    2756:	7f 91       	pop	r23
    2758:	6f 91       	pop	r22
    275a:	5f 91       	pop	r21
    275c:	4f 91       	pop	r20
    275e:	3f 91       	pop	r19
    2760:	2f 91       	pop	r18
    2762:	0f 90       	pop	r0
    2764:	0f be       	out	0x3f, r0	; 63
    2766:	0f 90       	pop	r0
    2768:	1f 90       	pop	r1
    276a:	18 95       	reti

0000276c <HardwareReset>:
*/

void HardwareReset(void)
{
	// Actiavte pull-up register logical high on pin RST
	PORTB |= BIT0;
    276c:	28 9a       	sbi	0x05, 0	; 5
	// DDR as output
	DDRB  |= BIT0;
    276e:	20 9a       	sbi	0x04, 0	; 4
    2770:	8f e4       	ldi	r24, 0x4F	; 79
    2772:	93 ec       	ldi	r25, 0xC3	; 195
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <HardwareReset+0x8>
    2778:	00 c0       	rjmp	.+0      	; 0x277a <HardwareReset+0xe>
    277a:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset Low
	PORTB &= ~BIT0;
    277c:	28 98       	cbi	0x05, 0	; 5
    277e:	8f e4       	ldi	r24, 0x4F	; 79
    2780:	93 ec       	ldi	r25, 0xC3	; 195
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <HardwareReset+0x16>
    2786:	00 c0       	rjmp	.+0      	; 0x2788 <HardwareReset+0x1c>
    2788:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset High
	PORTB |= BIT0;
    278a:	28 9a       	sbi	0x05, 0	; 5
    278c:	08 95       	ret

0000278e <SpiInit>:

void SpiInit(void)
{

	// Output: SCK, MOSI, CS_LD, DC_LD
	DDRB  |= BIT5 | BIT3 | BIT2 | BIT1;
    278e:	84 b1       	in	r24, 0x04	; 4
    2790:	8e 62       	ori	r24, 0x2E	; 46
    2792:	84 b9       	out	0x04, r24	; 4
	DDRB  &= ~BIT4;
    2794:	24 98       	cbi	0x04, 4	; 4
	PORTB |= BIT2 | BIT4;
    2796:	85 b1       	in	r24, 0x05	; 5
    2798:	84 61       	ori	r24, 0x14	; 20
    279a:	85 b9       	out	0x05, r24	; 5
	SPCR  |= BIT6 | BIT4;// | BIT0 | BIT1;
    279c:	8c b5       	in	r24, 0x2c	; 44
    279e:	80 65       	ori	r24, 0x50	; 80
    27a0:	8c bd       	out	0x2c, r24	; 44
	// SPI2X - Prescaler fclk/2 = 8MHz
	SPSR |= (1 << SPI2X);
    27a2:	8d b5       	in	r24, 0x2d	; 45
    27a4:	81 60       	ori	r24, 0x01	; 1
    27a6:	8d bd       	out	0x2d, r24	; 45
    27a8:	08 95       	ret

000027aa <CommandSend>:
}

uint8_t CommandSend(uint8_t data)
{
	// chip enable - active low
	PORTB &= ~BIT2;
    27aa:	2a 98       	cbi	0x05, 2	; 5
	// command (active low)
	PORTB &= ~BIT1;
    27ac:	29 98       	cbi	0x05, 1	; 5
	// transmitting data
	SPDR = data;
    27ae:	8e bd       	out	0x2e, r24	; 46
	// wait till data transmit
	while (!(SPSR & (1 << SPIF)));
    27b0:	0d b4       	in	r0, 0x2d	; 45
    27b2:	07 fe       	sbrs	r0, 7
    27b4:	fd cf       	rjmp	.-6      	; 0x27b0 <CommandSend+0x6>
	// chip disable - idle high
	PORTB |= BIT2;
    27b6:	2a 9a       	sbi	0x05, 2	; 5
	// return received data
	return SPDR;
    27b8:	8e b5       	in	r24, 0x2e	; 46
}
    27ba:	08 95       	ret

000027bc <Data8BitsSend>:
  Data8BitsSend(eRow);
  // partial area on
  CommandSend(PTLON);
  // success
  return 1;
}
    27bc:	2a 98       	cbi	0x05, 2	; 5
    27be:	29 9a       	sbi	0x05, 1	; 5
    27c0:	8e bd       	out	0x2e, r24	; 46
    27c2:	0d b4       	in	r0, 0x2d	; 45
    27c4:	07 fe       	sbrs	r0, 7
    27c6:	fd cf       	rjmp	.-6      	; 0x27c2 <Data8BitsSend+0x6>
    27c8:	2a 9a       	sbi	0x05, 2	; 5
    27ca:	8e b5       	in	r24, 0x2e	; 46
    27cc:	08 95       	ret

000027ce <Data16BitsSend>:
    27ce:	2a 98       	cbi	0x05, 2	; 5
    27d0:	29 9a       	sbi	0x05, 1	; 5
    27d2:	9e bd       	out	0x2e, r25	; 46
    27d4:	0d b4       	in	r0, 0x2d	; 45
    27d6:	07 fe       	sbrs	r0, 7
    27d8:	fd cf       	rjmp	.-6      	; 0x27d4 <Data16BitsSend+0x6>
    27da:	8e bd       	out	0x2e, r24	; 46
    27dc:	0d b4       	in	r0, 0x2d	; 45
    27de:	07 fe       	sbrs	r0, 7
    27e0:	fd cf       	rjmp	.-6      	; 0x27dc <Data16BitsSend+0xe>
    27e2:	2a 9a       	sbi	0x05, 2	; 5
    27e4:	8e b5       	in	r24, 0x2e	; 46
    27e6:	08 95       	ret

000027e8 <SendColor565>:
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	8c 01       	movw	r16, r24
    27f2:	eb 01       	movw	r28, r22
    27f4:	8c e2       	ldi	r24, 0x2C	; 44
    27f6:	0e 94 d5 13 	call	0x27aa	; 0x27aa <CommandSend>
    27fa:	20 97       	sbiw	r28, 0x00	; 0
    27fc:	29 f0       	breq	.+10     	; 0x2808 <SendColor565+0x20>
    27fe:	c8 01       	movw	r24, r16
    2800:	0e 94 e7 13 	call	0x27ce	; 0x27ce <Data16BitsSend>
    2804:	21 97       	sbiw	r28, 0x01	; 1
    2806:	d9 f7       	brne	.-10     	; 0x27fe <SendColor565+0x16>
    2808:	df 91       	pop	r29
    280a:	cf 91       	pop	r28
    280c:	1f 91       	pop	r17
    280e:	0f 91       	pop	r16
    2810:	08 95       	ret

00002812 <SetWindow>:

uint8_t SetWindow(uint8_t x0, uint8_t x1, uint8_t y0, uint8_t y1)
{
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
  // check if coordinates is out of range
  if ((x0 > x1)     ||
    281a:	68 17       	cp	r22, r24
    281c:	50 f1       	brcs	.+84     	; 0x2872 <SetWindow+0x60>
    281e:	62 3a       	cpi	r22, 0xA2	; 162
    2820:	50 f5       	brcc	.+84     	; 0x2876 <SetWindow+0x64>
      (x1 > SIZE_X) ||
    2822:	24 17       	cp	r18, r20
    2824:	50 f1       	brcs	.+84     	; 0x287a <SetWindow+0x68>
      (y0 > y1)     ||
    2826:	24 38       	cpi	r18, 0x84	; 132
    2828:	50 f5       	brcc	.+84     	; 0x287e <SetWindow+0x6c>
    282a:	12 2f       	mov	r17, r18
    282c:	04 2f       	mov	r16, r20
    282e:	c6 2f       	mov	r28, r22
    2830:	d8 2f       	mov	r29, r24
      (y1 > SIZE_Y)) { 
    // out of range
    return 0;
  }  
  // column address set
  CommandSend(CASET);
    2832:	8a e2       	ldi	r24, 0x2A	; 42
    2834:	0e 94 d5 13 	call	0x27aa	; 0x27aa <CommandSend>
  // start x position
  Data8BitsSend(0x00);
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // start x position
  Data8BitsSend(x0);
    283e:	8d 2f       	mov	r24, r29
    2840:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // start x position
  Data8BitsSend(0x00);
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // end x position
  Data8BitsSend(x1);
    284a:	8c 2f       	mov	r24, r28
    284c:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // row address set
  CommandSend(RASET);
    2850:	8b e2       	ldi	r24, 0x2B	; 43
    2852:	0e 94 d5 13 	call	0x27aa	; 0x27aa <CommandSend>
  // start x position
  Data8BitsSend(0x00);
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // start y position
  Data8BitsSend(y0);
    285c:	80 2f       	mov	r24, r16
    285e:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // start x position
  Data8BitsSend(0x00);
    2862:	80 e0       	ldi	r24, 0x00	; 0
    2864:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // end y position
  Data8BitsSend(y1);
    2868:	81 2f       	mov	r24, r17
    286a:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
  // success
  return 1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	07 c0       	rjmp	.+14     	; 0x2880 <SetWindow+0x6e>
  if ((x0 > x1)     ||
      (x1 > SIZE_X) ||
      (y0 > y1)     ||
      (y1 > SIZE_Y)) { 
    // out of range
    return 0;
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	05 c0       	rjmp	.+10     	; 0x2880 <SetWindow+0x6e>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	03 c0       	rjmp	.+6      	; 0x2880 <SetWindow+0x6e>
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	01 c0       	rjmp	.+2      	; 0x2880 <SetWindow+0x6e>
    287e:	80 e0       	ldi	r24, 0x00	; 0
  Data8BitsSend(0x00);
  // end y position
  Data8BitsSend(y1);
  // success
  return 1;
}
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	08 95       	ret

0000288a <SetPosition>:
 * @return void
 */
char SetPosition(uint8_t x, uint8_t y)
{
  // check if coordinates is out of range
  if ((x > MAX_X - (CHARS_COLS_LEN + 1)) &&
    288a:	8d 39       	cpi	r24, 0x9D	; 157
    288c:	90 f0       	brcs	.+36     	; 0x28b2 <SetPosition+0x28>
    288e:	6d 37       	cpi	r22, 0x7D	; 125
    2890:	e0 f4       	brcc	.+56     	; 0x28ca <SetPosition+0x40>
    // out of range
    return 0;
  }
  // check if x coordinates is out of range
  // and y is not out of range go to next line
  if ((x > MAX_X - (CHARS_COLS_LEN + 1)) &&
    2892:	6c 37       	cpi	r22, 0x7C	; 124
    2894:	70 f4       	brcc	.+28     	; 0x28b2 <SetPosition+0x28>
      (y < MAX_Y - (CHARS_ROWS_LEN))) {
    // change position y
    cacheMemIndexRow = y + CHARS_ROWS_LEN;
    2896:	70 e0       	ldi	r23, 0x00	; 0
    2898:	68 5f       	subi	r22, 0xF8	; 248
    289a:	7f 4f       	sbci	r23, 0xFF	; 255
    289c:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <cacheMemIndexRow+0x1>
    28a0:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <cacheMemIndexRow>
    // change position x
    cacheMemIndexCol = x;
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <cacheMemIndexCol+0x1>
    28aa:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <cacheMemIndexCol>
    cacheMemIndexRow = y;
    // set position x
    cacheMemIndexCol = x;
  }
  // success
  return 1;
    28ae:	81 e0       	ldi	r24, 0x01	; 1
  if ((x > MAX_X - (CHARS_COLS_LEN + 1)) &&
      (y < MAX_Y - (CHARS_ROWS_LEN))) {
    // change position y
    cacheMemIndexRow = y + CHARS_ROWS_LEN;
    // change position x
    cacheMemIndexCol = x;
    28b0:	08 95       	ret
  } else {
    // set position y 
    cacheMemIndexRow = y;
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	70 93 a5 01 	sts	0x01A5, r23	; 0x8001a5 <cacheMemIndexRow+0x1>
    28b8:	60 93 a4 01 	sts	0x01A4, r22	; 0x8001a4 <cacheMemIndexRow>
    // set position x
    cacheMemIndexCol = x;
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <cacheMemIndexCol+0x1>
    28c2:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <cacheMemIndexCol>
  }
  // success
  return 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	08 95       	ret
{
  // check if coordinates is out of range
  if ((x > MAX_X - (CHARS_COLS_LEN + 1)) &&
      (y > MAX_Y - (CHARS_ROWS_LEN))) {
    // out of range
    return 0;
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    // set position x
    cacheMemIndexCol = x;
  }
  // success
  return 1;
}
    28cc:	08 95       	ret

000028ce <DrawPixel>:
 * @param uint8_t   y position / 0 <= rows <= MAX_Y-1
 * @param uint16_t  color
 * @return Null
 */
void DrawPixel(uint8_t x, uint8_t y, uint16_t color)
{
    28ce:	cf 93       	push	r28
    28d0:	df 93       	push	r29
    28d2:	ea 01       	movw	r28, r20
  // set window
  SetWindow(x, x, y, y);
    28d4:	26 2f       	mov	r18, r22
    28d6:	46 2f       	mov	r20, r22
    28d8:	68 2f       	mov	r22, r24
    28da:	0e 94 09 14 	call	0x2812	; 0x2812 <SetWindow>
  // draw pixel by 565 mode
  SendColor565(color, 1);
    28de:	61 e0       	ldi	r22, 0x01	; 1
    28e0:	70 e0       	ldi	r23, 0x00	; 0
    28e2:	ce 01       	movw	r24, r28
    28e4:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <SendColor565>
}
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <DrawChar>:
 * @param uint16_t  color
 * @param Esizes    see enum sizes in st7735.h
 * @return void
 */
char DrawChar(char character, uint16_t color, ESizes size)
{
    28ee:	4f 92       	push	r4
    28f0:	5f 92       	push	r5
    28f2:	7f 92       	push	r7
    28f4:	8f 92       	push	r8
    28f6:	9f 92       	push	r9
    28f8:	af 92       	push	r10
    28fa:	bf 92       	push	r11
    28fc:	cf 92       	push	r12
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	2b 01       	movw	r4, r22
  idxRow = CHARS_ROWS_LEN;

  // ----------------------------------------
  // SIZE X1 - normal font: 1x high, 1x wide
  // ----------------------------------------
  if (size == X1) {  
    290c:	41 11       	cpse	r20, r1
    290e:	34 c0       	rjmp	.+104    	; 0x2978 <DrawChar+0x8a>
    2910:	68 94       	set
    2912:	99 24       	eor	r9, r9
    2914:	92 f8       	bld	r9, 2
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
    2916:	c8 2f       	mov	r28, r24
    2918:	d0 e0       	ldi	r29, 0x00	; 0
    291a:	ce 01       	movw	r24, r28
    291c:	80 97       	sbiw	r24, 0x20	; 32
    291e:	ec 01       	movw	r28, r24
    2920:	cc 0f       	add	r28, r28
    2922:	dd 1f       	adc	r29, r29
    2924:	cc 0f       	add	r28, r28
    2926:	dd 1f       	adc	r29, r29
    2928:	c8 0f       	add	r28, r24
    292a:	d9 1f       	adc	r29, r25
      // loop through 8 bits
      while (idxRow--) {
        // check if bit set
        if ((letter & 0x80) == 0x80) {
          // draw pixel 
          DrawPixel(cacheMemIndexCol + idxCol, cacheMemIndexRow + idxRow, color);
    292c:	0f 2e       	mov	r0, r31
    292e:	f4 ea       	ldi	r31, 0xA4	; 164
    2930:	cf 2e       	mov	r12, r31
    2932:	f1 e0       	ldi	r31, 0x01	; 1
    2934:	df 2e       	mov	r13, r31
    2936:	f0 2d       	mov	r31, r0
    2938:	0f 2e       	mov	r0, r31
    293a:	f2 ea       	ldi	r31, 0xA2	; 162
    293c:	ef 2e       	mov	r14, r31
    293e:	f1 e0       	ldi	r31, 0x01	; 1
    2940:	ff 2e       	mov	r15, r31
    2942:	f0 2d       	mov	r31, r0
  // ----------------------------------------
  if (size == X1) {  
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
    2944:	fe 01       	movw	r30, r28
    2946:	e9 0d       	add	r30, r9
    2948:	f1 1d       	adc	r31, r1
    294a:	e8 5d       	subi	r30, 0xD8	; 216
    294c:	fc 4f       	sbci	r31, 0xFC	; 252
    294e:	b4 90       	lpm	r11, Z
      // loop through 8 bits
      while (idxRow--) {
    2950:	17 e0       	ldi	r17, 0x07	; 7
        // check if bit set
        if ((letter & 0x80) == 0x80) {
    2952:	bb 20       	and	r11, r11
    2954:	4c f4       	brge	.+18     	; 0x2968 <DrawChar+0x7a>
          // draw pixel 
          DrawPixel(cacheMemIndexCol + idxCol, cacheMemIndexRow + idxRow, color);
    2956:	f6 01       	movw	r30, r12
    2958:	60 81       	ld	r22, Z
    295a:	61 0f       	add	r22, r17
    295c:	f7 01       	movw	r30, r14
    295e:	80 81       	ld	r24, Z
    2960:	a2 01       	movw	r20, r4
    2962:	89 0d       	add	r24, r9
    2964:	0e 94 67 14 	call	0x28ce	; 0x28ce <DrawPixel>
        }
        // byte move to left / next bit
        letter = letter << 1;
    2968:	bb 0c       	add	r11, r11
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
      // loop through 8 bits
      while (idxRow--) {
    296a:	11 50       	subi	r17, 0x01	; 1
    296c:	90 f7       	brcc	.-28     	; 0x2952 <DrawChar+0x64>
  // ----------------------------------------
  // SIZE X1 - normal font: 1x high, 1x wide
  // ----------------------------------------
  if (size == X1) {  
    // loop through 5 bytes
    while (idxCol--) {
    296e:	9a 94       	dec	r9
    2970:	ff ef       	ldi	r31, 0xFF	; 255
    2972:	9f 12       	cpse	r9, r31
    2974:	e7 cf       	rjmp	.-50     	; 0x2944 <DrawChar+0x56>
    2976:	9c c0       	rjmp	.+312    	; 0x2ab0 <DrawChar+0x1c2>
      idxRow = CHARS_ROWS_LEN;
    }
  // -----------------------------------------
  // SIZE X2 - bigger font 2x higher, 1x wide
  // -----------------------------------------
  } else if (size == X2) {
    2978:	41 30       	cpi	r20, 0x01	; 1
    297a:	09 f0       	breq	.+2      	; 0x297e <DrawChar+0x90>
    297c:	40 c0       	rjmp	.+128    	; 0x29fe <DrawChar+0x110>
    297e:	68 94       	set
    2980:	99 24       	eor	r9, r9
    2982:	92 f8       	bld	r9, 2
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
    2984:	e8 2e       	mov	r14, r24
    2986:	f1 2c       	mov	r15, r1
    2988:	c7 01       	movw	r24, r14
    298a:	80 97       	sbiw	r24, 0x20	; 32
    298c:	7c 01       	movw	r14, r24
    298e:	ee 0c       	add	r14, r14
    2990:	ff 1c       	adc	r15, r15
    2992:	ee 0c       	add	r14, r14
    2994:	ff 1c       	adc	r15, r15
    2996:	e8 0e       	add	r14, r24
    2998:	f9 1e       	adc	r15, r25
      while (idxRow--) {
        // check if bit set
        if ((letter & 0x80) == 0x80) {
          // draw first up pixel; 
          // note: (idxRow << 1) - 2x multiplied 
          DrawPixel(cacheMemIndexCol + idxCol, cacheMemIndexRow + (idxRow << 1), color);
    299a:	0f 2e       	mov	r0, r31
    299c:	f4 ea       	ldi	r31, 0xA4	; 164
    299e:	af 2e       	mov	r10, r31
    29a0:	f1 e0       	ldi	r31, 0x01	; 1
    29a2:	bf 2e       	mov	r11, r31
    29a4:	f0 2d       	mov	r31, r0
    29a6:	0f 2e       	mov	r0, r31
    29a8:	f2 ea       	ldi	r31, 0xA2	; 162
    29aa:	cf 2e       	mov	r12, r31
    29ac:	f1 e0       	ldi	r31, 0x01	; 1
    29ae:	df 2e       	mov	r13, r31
    29b0:	f0 2d       	mov	r31, r0
  // -----------------------------------------
  } else if (size == X2) {
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
    29b2:	f7 01       	movw	r30, r14
    29b4:	e9 0d       	add	r30, r9
    29b6:	f1 1d       	adc	r31, r1
    29b8:	e8 5d       	subi	r30, 0xD8	; 216
    29ba:	fc 4f       	sbci	r31, 0xFC	; 252
    29bc:	84 90       	lpm	r8, Z
      // loop through 8 bits
      while (idxRow--) {
    29be:	c7 e0       	ldi	r28, 0x07	; 7
        // check if bit set
        if ((letter & 0x80) == 0x80) {
    29c0:	88 20       	and	r8, r8
    29c2:	ac f4       	brge	.+42     	; 0x29ee <DrawChar+0x100>
          // draw first up pixel; 
          // note: (idxRow << 1) - 2x multiplied 
          DrawPixel(cacheMemIndexCol + idxCol, cacheMemIndexRow + (idxRow << 1), color);
    29c4:	f5 01       	movw	r30, r10
    29c6:	60 81       	ld	r22, Z
    29c8:	dc 2f       	mov	r29, r28
    29ca:	dd 0f       	add	r29, r29
    29cc:	6d 0f       	add	r22, r29
    29ce:	f6 01       	movw	r30, r12
    29d0:	80 81       	ld	r24, Z
    29d2:	a2 01       	movw	r20, r4
    29d4:	89 0d       	add	r24, r9
    29d6:	0e 94 67 14 	call	0x28ce	; 0x28ce <DrawPixel>
          // draw second down pixel
          DrawPixel(cacheMemIndexCol + idxCol, cacheMemIndexRow + (idxRow << 1) + 1, color);
    29da:	f5 01       	movw	r30, r10
    29dc:	60 81       	ld	r22, Z
    29de:	6f 5f       	subi	r22, 0xFF	; 255
    29e0:	6d 0f       	add	r22, r29
    29e2:	f6 01       	movw	r30, r12
    29e4:	80 81       	ld	r24, Z
    29e6:	a2 01       	movw	r20, r4
    29e8:	89 0d       	add	r24, r9
    29ea:	0e 94 67 14 	call	0x28ce	; 0x28ce <DrawPixel>
        }
        // byte move to left / next bit
        letter = letter << 1;
    29ee:	88 0c       	add	r8, r8
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
      // loop through 8 bits
      while (idxRow--) {
    29f0:	c1 50       	subi	r28, 0x01	; 1
    29f2:	30 f7       	brcc	.-52     	; 0x29c0 <DrawChar+0xd2>
  // -----------------------------------------
  // SIZE X2 - bigger font 2x higher, 1x wide
  // -----------------------------------------
  } else if (size == X2) {
    // loop through 5 bytes
    while (idxCol--) {
    29f4:	9a 94       	dec	r9
    29f6:	ff ef       	ldi	r31, 0xFF	; 255
    29f8:	9f 12       	cpse	r9, r31
    29fa:	db cf       	rjmp	.-74     	; 0x29b2 <DrawChar+0xc4>
    29fc:	59 c0       	rjmp	.+178    	; 0x2ab0 <DrawChar+0x1c2>
      idxRow = CHARS_ROWS_LEN;
    }
  // ------------------------------------------------
  // SIZE X3 - the biggest font: 2x higher, 2x wider
  // ------------------------------------------------
  } else if (size == X3) {
    29fe:	4a 30       	cpi	r20, 0x0A	; 10
    2a00:	09 f0       	breq	.+2      	; 0x2a04 <DrawChar+0x116>
    2a02:	56 c0       	rjmp	.+172    	; 0x2ab0 <DrawChar+0x1c2>
    2a04:	68 94       	set
    2a06:	ee 24       	eor	r14, r14
    2a08:	e2 f8       	bld	r14, 2
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
    2a0a:	c8 2e       	mov	r12, r24
    2a0c:	d1 2c       	mov	r13, r1
    2a0e:	c6 01       	movw	r24, r12
    2a10:	80 97       	sbiw	r24, 0x20	; 32
    2a12:	6c 01       	movw	r12, r24
    2a14:	cc 0c       	add	r12, r12
    2a16:	dd 1c       	adc	r13, r13
    2a18:	cc 0c       	add	r12, r12
    2a1a:	dd 1c       	adc	r13, r13
    2a1c:	c8 0e       	add	r12, r24
    2a1e:	d9 1e       	adc	r13, r25
      while (idxRow--) {
        // check if bit set
        if ((letter & 0x80) == 0x80) {
          // draw first left up pixel; 
          // note: (idxRow << 1) - 2x multiplied 
          DrawPixel(cacheMemIndexCol + (idxCol << 1), cacheMemIndexRow + (idxRow << 1), color);
    2a20:	0f 2e       	mov	r0, r31
    2a22:	f4 ea       	ldi	r31, 0xA4	; 164
    2a24:	8f 2e       	mov	r8, r31
    2a26:	f1 e0       	ldi	r31, 0x01	; 1
    2a28:	9f 2e       	mov	r9, r31
    2a2a:	f0 2d       	mov	r31, r0
    2a2c:	0f 2e       	mov	r0, r31
    2a2e:	f2 ea       	ldi	r31, 0xA2	; 162
    2a30:	af 2e       	mov	r10, r31
    2a32:	f1 e0       	ldi	r31, 0x01	; 1
    2a34:	bf 2e       	mov	r11, r31
    2a36:	f0 2d       	mov	r31, r0
  // ------------------------------------------------
  } else if (size == X3) {
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
    2a38:	f6 01       	movw	r30, r12
    2a3a:	ee 0d       	add	r30, r14
    2a3c:	f1 1d       	adc	r31, r1
    2a3e:	e8 5d       	subi	r30, 0xD8	; 216
    2a40:	fc 4f       	sbci	r31, 0xFC	; 252
    2a42:	c4 91       	lpm	r28, Z
      while (idxRow--) {
        // check if bit set
        if ((letter & 0x80) == 0x80) {
          // draw first left up pixel; 
          // note: (idxRow << 1) - 2x multiplied 
          DrawPixel(cacheMemIndexCol + (idxCol << 1), cacheMemIndexRow + (idxRow << 1), color);
    2a44:	7e 2c       	mov	r7, r14
    2a46:	77 0c       	add	r7, r7
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
      // loop through 8 bits
      while (idxRow--) {
    2a48:	d7 e0       	ldi	r29, 0x07	; 7
        // check if bit set
        if ((letter & 0x80) == 0x80) {
    2a4a:	cc 23       	and	r28, r28
    2a4c:	54 f5       	brge	.+84     	; 0x2aa2 <DrawChar+0x1b4>
          // draw first left up pixel; 
          // note: (idxRow << 1) - 2x multiplied 
          DrawPixel(cacheMemIndexCol + (idxCol << 1), cacheMemIndexRow + (idxRow << 1), color);
    2a4e:	f4 01       	movw	r30, r8
    2a50:	60 81       	ld	r22, Z
    2a52:	fd 2e       	mov	r15, r29
    2a54:	ff 0c       	add	r15, r15
    2a56:	6f 0d       	add	r22, r15
    2a58:	f5 01       	movw	r30, r10
    2a5a:	80 81       	ld	r24, Z
    2a5c:	a2 01       	movw	r20, r4
    2a5e:	87 0d       	add	r24, r7
    2a60:	0e 94 67 14 	call	0x28ce	; 0x28ce <DrawPixel>
          // draw second left down pixel
          DrawPixel(cacheMemIndexCol + (idxCol << 1), cacheMemIndexRow + (idxRow << 1) + 1, color);
    2a64:	f4 01       	movw	r30, r8
    2a66:	60 81       	ld	r22, Z
    2a68:	6f 5f       	subi	r22, 0xFF	; 255
    2a6a:	6f 0d       	add	r22, r15
    2a6c:	f5 01       	movw	r30, r10
    2a6e:	80 81       	ld	r24, Z
    2a70:	a2 01       	movw	r20, r4
    2a72:	87 0d       	add	r24, r7
    2a74:	0e 94 67 14 	call	0x28ce	; 0x28ce <DrawPixel>
          // draw third right up pixel
          DrawPixel(cacheMemIndexCol + (idxCol << 1) + 1, cacheMemIndexRow + (idxRow << 1), color);
    2a78:	f4 01       	movw	r30, r8
    2a7a:	60 81       	ld	r22, Z
    2a7c:	6f 0d       	add	r22, r15
    2a7e:	f5 01       	movw	r30, r10
    2a80:	80 81       	ld	r24, Z
    2a82:	8f 5f       	subi	r24, 0xFF	; 255
    2a84:	a2 01       	movw	r20, r4
    2a86:	87 0d       	add	r24, r7
    2a88:	0e 94 67 14 	call	0x28ce	; 0x28ce <DrawPixel>
          // draw fourth right down pixel
          DrawPixel(cacheMemIndexCol + (idxCol << 1) + 1, cacheMemIndexRow + (idxRow << 1) + 1, color);
    2a8c:	f4 01       	movw	r30, r8
    2a8e:	60 81       	ld	r22, Z
    2a90:	6f 5f       	subi	r22, 0xFF	; 255
    2a92:	6f 0d       	add	r22, r15
    2a94:	f5 01       	movw	r30, r10
    2a96:	80 81       	ld	r24, Z
    2a98:	8f 5f       	subi	r24, 0xFF	; 255
    2a9a:	a2 01       	movw	r20, r4
    2a9c:	87 0d       	add	r24, r7
    2a9e:	0e 94 67 14 	call	0x28ce	; 0x28ce <DrawPixel>
        }
        // byte move to left / next bit
        letter = letter << 1;
    2aa2:	cc 0f       	add	r28, r28
    // loop through 5 bytes
    while (idxCol--) {
      // read from ROM memory 
      letter = pgm_read_byte(&CHARACTERS[character - 32][idxCol]);
      // loop through 8 bits
      while (idxRow--) {
    2aa4:	d1 50       	subi	r29, 0x01	; 1
    2aa6:	88 f6       	brcc	.-94     	; 0x2a4a <DrawChar+0x15c>
  // ------------------------------------------------
  // SIZE X3 - the biggest font: 2x higher, 2x wider
  // ------------------------------------------------
  } else if (size == X3) {
    // loop through 5 bytes
    while (idxCol--) {
    2aa8:	ea 94       	dec	r14
    2aaa:	ff ef       	ldi	r31, 0xFF	; 255
    2aac:	ef 12       	cpse	r14, r31
    2aae:	c4 cf       	rjmp	.-120    	; 0x2a38 <DrawChar+0x14a>
      idxRow = CHARS_ROWS_LEN;
    }
  }
  // return exit
  return 0;
}
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	df 91       	pop	r29
    2ab4:	cf 91       	pop	r28
    2ab6:	1f 91       	pop	r17
    2ab8:	ff 90       	pop	r15
    2aba:	ef 90       	pop	r14
    2abc:	df 90       	pop	r13
    2abe:	cf 90       	pop	r12
    2ac0:	bf 90       	pop	r11
    2ac2:	af 90       	pop	r10
    2ac4:	9f 90       	pop	r9
    2ac6:	8f 90       	pop	r8
    2ac8:	7f 90       	pop	r7
    2aca:	5f 90       	pop	r5
    2acc:	4f 90       	pop	r4
    2ace:	08 95       	ret

00002ad0 <DrawString>:
 * @param uint16_t  color
 * @param Esizes    see enum sizes in st7735.h
 * @return void
 */
void DrawString(char *str, uint16_t color, ESizes size)
{
    2ad0:	9f 92       	push	r9
    2ad2:	af 92       	push	r10
    2ad4:	bf 92       	push	r11
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	ec 01       	movw	r28, r24
  // variables
  uint8_t i = 0;
  // loop through character of string
  while (str[i] != '\0') {
    2ae8:	88 81       	ld	r24, Y
    2aea:	88 23       	and	r24, r24
    2aec:	21 f1       	breq	.+72     	; 0x2b36 <DrawString+0x66>
    2aee:	a4 2e       	mov	r10, r20
    2af0:	8b 01       	movw	r16, r22
    //read characters and increment index
    DrawChar(str[i++], color, size);
    // update position
    SetPosition(cacheMemIndexCol + (CHARS_COLS_LEN + 1) + (size >> 1), cacheMemIndexRow);
    2af2:	94 2e       	mov	r9, r20
    2af4:	96 94       	lsr	r9
    2af6:	b1 2c       	mov	r11, r1
    2af8:	0f 2e       	mov	r0, r31
    2afa:	f4 ea       	ldi	r31, 0xA4	; 164
    2afc:	cf 2e       	mov	r12, r31
    2afe:	f1 e0       	ldi	r31, 0x01	; 1
    2b00:	df 2e       	mov	r13, r31
    2b02:	f0 2d       	mov	r31, r0
    2b04:	0f 2e       	mov	r0, r31
    2b06:	f2 ea       	ldi	r31, 0xA2	; 162
    2b08:	ef 2e       	mov	r14, r31
    2b0a:	f1 e0       	ldi	r31, 0x01	; 1
    2b0c:	ff 2e       	mov	r15, r31
    2b0e:	f0 2d       	mov	r31, r0
  // variables
  uint8_t i = 0;
  // loop through character of string
  while (str[i] != '\0') {
    //read characters and increment index
    DrawChar(str[i++], color, size);
    2b10:	b3 94       	inc	r11
    2b12:	4a 2d       	mov	r20, r10
    2b14:	b8 01       	movw	r22, r16
    2b16:	0e 94 77 14 	call	0x28ee	; 0x28ee <DrawChar>
    // update position
    SetPosition(cacheMemIndexCol + (CHARS_COLS_LEN + 1) + (size >> 1), cacheMemIndexRow);
    2b1a:	f7 01       	movw	r30, r14
    2b1c:	80 81       	ld	r24, Z
    2b1e:	8a 5f       	subi	r24, 0xFA	; 250
    2b20:	f6 01       	movw	r30, r12
    2b22:	60 81       	ld	r22, Z
    2b24:	89 0d       	add	r24, r9
    2b26:	0e 94 45 14 	call	0x288a	; 0x288a <SetPosition>
void DrawString(char *str, uint16_t color, ESizes size)
{
  // variables
  uint8_t i = 0;
  // loop through character of string
  while (str[i] != '\0') {
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	eb 0d       	add	r30, r11
    2b2e:	f1 1d       	adc	r31, r1
    2b30:	80 81       	ld	r24, Z
    2b32:	81 11       	cpse	r24, r1
    2b34:	ed cf       	rjmp	.-38     	; 0x2b10 <DrawString+0x40>
    //read characters and increment index
    DrawChar(str[i++], color, size);
    // update position
    SetPosition(cacheMemIndexCol + (CHARS_COLS_LEN + 1) + (size >> 1), cacheMemIndexRow);
  }
}
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	1f 91       	pop	r17
    2b3c:	0f 91       	pop	r16
    2b3e:	ff 90       	pop	r15
    2b40:	ef 90       	pop	r14
    2b42:	df 90       	pop	r13
    2b44:	cf 90       	pop	r12
    2b46:	bf 90       	pop	r11
    2b48:	af 90       	pop	r10
    2b4a:	9f 90       	pop	r9
    2b4c:	08 95       	ret

00002b4e <ClearScreen>:


void ClearScreen(uint16_t color)
{
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	ec 01       	movw	r28, r24
  // set whole window
  SetWindow(0, SIZE_X, 0, SIZE_Y);
    2b54:	23 e8       	ldi	r18, 0x83	; 131
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	61 ea       	ldi	r22, 0xA1	; 161
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 09 14 	call	0x2812	; 0x2812 <SetWindow>
  // draw individual pixels 
  // CACHE_SIZE_MEM = SIZE_X * SIZE_Y
  SendColor565(color, CACHE_SIZE_MEM);
    2b60:	68 e8       	ldi	r22, 0x88	; 136
    2b62:	73 e5       	ldi	r23, 0x53	; 83
    2b64:	ce 01       	movw	r24, r28
    2b66:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <SendColor565>
}
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	08 95       	ret

00002b70 <UpdateScreen>:

void UpdateScreen(void)
{
  // display on
  CommandSend(DISPON);
    2b70:	89 e2       	ldi	r24, 0x29	; 41
    2b72:	0e 94 d5 13 	call	0x27aa	; 0x27aa <CommandSend>
    2b76:	08 95       	ret

00002b78 <DelayMs>:
}

void DelayMs(uint8_t time)
{
  // loop through real time
  while (time--) {
    2b78:	88 23       	and	r24, r24
    2b7a:	41 f0       	breq	.+16     	; 0x2b8c <DelayMs+0x14>
    2b7c:	ef e9       	ldi	r30, 0x9F	; 159
    2b7e:	ff e0       	ldi	r31, 0x0F	; 15
    2b80:	31 97       	sbiw	r30, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <DelayMs+0x8>
    2b84:	00 c0       	rjmp	.+0      	; 0x2b86 <DelayMs+0xe>
    2b86:	00 00       	nop
    2b88:	81 50       	subi	r24, 0x01	; 1
    2b8a:	c1 f7       	brne	.-16     	; 0x2b7c <DelayMs+0x4>
    2b8c:	08 95       	ret

00002b8e <St7735Commands>:
 *
 * @param const uint8_t *
 * @return void
 */
void St7735Commands(const uint8_t *commands)
{
    2b8e:	cf 92       	push	r12
    2b90:	df 92       	push	r13
    2b92:	ef 92       	push	r14
    2b94:	ff 92       	push	r15
    2b96:	0f 93       	push	r16
    2b98:	1f 93       	push	r17
    2b9a:	cf 93       	push	r28
    2b9c:	df 93       	push	r29
  uint8_t milliseconds;
  uint8_t numOfCommands;
  uint8_t numOfArguments;

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
    2b9e:	7c 01       	movw	r14, r24
    2ba0:	2f ef       	ldi	r18, 0xFF	; 255
    2ba2:	e2 1a       	sub	r14, r18
    2ba4:	f2 0a       	sbc	r15, r18
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	d4 90       	lpm	r13, Z
  
  // loop through whole command list
  while (numOfCommands--) {
    2baa:	2d c0       	rjmp	.+90     	; 0x2c06 <St7735Commands+0x78>
    // send command
    CommandSend(pgm_read_byte(commands++));
    2bac:	f7 01       	movw	r30, r14
    2bae:	84 91       	lpm	r24, Z
    2bb0:	0e 94 d5 13 	call	0x27aa	; 0x27aa <CommandSend>
    // read number of arguments
    numOfArguments = pgm_read_byte(commands++);
    2bb4:	f7 01       	movw	r30, r14
    2bb6:	31 96       	adiw	r30, 0x01	; 1
    2bb8:	e4 91       	lpm	r30, Z
    2bba:	f2 e0       	ldi	r31, 0x02	; 2
    2bbc:	ef 0e       	add	r14, r31
    2bbe:	f1 1c       	adc	r15, r1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
    2bc0:	2e 2f       	mov	r18, r30
    2bc2:	20 78       	andi	r18, 0x80	; 128
    2bc4:	c2 2e       	mov	r12, r18
    // remove delay flag
    numOfArguments &= ~DELAY;
    2bc6:	ef 77       	andi	r30, 0x7F	; 127
    // loop through number of arguments
    while (numOfArguments--) {
    2bc8:	8f ef       	ldi	r24, 0xFF	; 255
    2bca:	8e 0f       	add	r24, r30
    2bcc:	ee 23       	and	r30, r30
    2bce:	89 f0       	breq	.+34     	; 0x2bf2 <St7735Commands+0x64>
    2bd0:	3e 2d       	mov	r19, r14
    2bd2:	2f 2d       	mov	r18, r15
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	01 96       	adiw	r24, 0x01	; 1
    2bd8:	e8 0e       	add	r14, r24
    2bda:	f9 1e       	adc	r15, r25
    2bdc:	87 01       	movw	r16, r14
    2bde:	c3 2f       	mov	r28, r19
    2be0:	d2 2f       	mov	r29, r18
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
    2be2:	fe 01       	movw	r30, r28
    2be4:	84 91       	lpm	r24, Z
    2be6:	0e 94 de 13 	call	0x27bc	; 0x27bc <Data8BitsSend>
    2bea:	21 96       	adiw	r28, 0x01	; 1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
    // remove delay flag
    numOfArguments &= ~DELAY;
    // loop through number of arguments
    while (numOfArguments--) {
    2bec:	c0 17       	cp	r28, r16
    2bee:	d1 07       	cpc	r29, r17
    2bf0:	c1 f7       	brne	.-16     	; 0x2be2 <St7735Commands+0x54>
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
    2bf2:	cc 20       	and	r12, r12
    2bf4:	39 f0       	breq	.+14     	; 0x2c04 <St7735Commands+0x76>
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
    2bf6:	e7 01       	movw	r28, r14
    2bf8:	21 96       	adiw	r28, 0x01	; 1
    2bfa:	f7 01       	movw	r30, r14
    2bfc:	84 91       	lpm	r24, Z
      // delay
      DelayMs(milliseconds);
    2bfe:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <DelayMs>
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
    2c02:	7e 01       	movw	r14, r28
    2c04:	da 94       	dec	r13

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
  
  // loop through whole command list
  while (numOfCommands--) {
    2c06:	d1 10       	cpse	r13, r1
    2c08:	d1 cf       	rjmp	.-94     	; 0x2bac <St7735Commands+0x1e>
      milliseconds = pgm_read_byte(commands++);
      // delay
      DelayMs(milliseconds);
    }
  }
}
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	df 90       	pop	r13
    2c18:	cf 90       	pop	r12
    2c1a:	08 95       	ret

00002c1c <St7735Init>:


void St7735Init(void)
{
  // hardware reset
  HardwareReset();
    2c1c:	0e 94 b6 13 	call	0x276c	; 0x276c <HardwareReset>
  // init spi
  SpiInit();
    2c20:	0e 94 c7 13 	call	0x278e	; 0x278e <SpiInit>
  // load list of commands
  St7735Commands(INIT_ST7735B);
    2c24:	88 e0       	ldi	r24, 0x08	; 8
    2c26:	95 e0       	ldi	r25, 0x05	; 5
    2c28:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <St7735Commands>
    2c2c:	08 95       	ret

00002c2e <tecladoInit>:


void tecladoInit(void)
{
	//OUTPUTS
	DDRC |= (1 << DDC0) | (1 << DDC1);
    2c2e:	87 b1       	in	r24, 0x07	; 7
    2c30:	83 60       	ori	r24, 0x03	; 3
    2c32:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1 << DDD2) | (1 << DDD3);
    2c34:	8a b1       	in	r24, 0x0a	; 10
    2c36:	8c 60       	ori	r24, 0x0C	; 12
    2c38:	8a b9       	out	0x0a, r24	; 10
	
	//INPUTS
	DDRC &= ~((1 << DDC2) | (1 << DDC3) | (1 << DDC4) | (1 << DDC5));
    2c3a:	87 b1       	in	r24, 0x07	; 7
    2c3c:	83 7c       	andi	r24, 0xC3	; 195
    2c3e:	87 b9       	out	0x07, r24	; 7
	DDRD &= ~((1 << DDD4) | (1 << DDD5) | (1 << DDD6) | (1 << DDD7));
    2c40:	8a b1       	in	r24, 0x0a	; 10
    2c42:	8f 70       	andi	r24, 0x0F	; 15
    2c44:	8a b9       	out	0x0a, r24	; 10
	
	//PULL-UP
	PORTC |= (1 << PORTC2) | (1 << PORTC3) | (1 << PORTC4) | (1 << PORTC5);
    2c46:	88 b1       	in	r24, 0x08	; 8
    2c48:	8c 63       	ori	r24, 0x3C	; 60
    2c4a:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);
    2c4c:	8b b1       	in	r24, 0x0b	; 11
    2c4e:	80 6f       	ori	r24, 0xF0	; 240
    2c50:	8b b9       	out	0x0b, r24	; 11
	
	//OUTPUTS HIGH (neutro)
	PORTC |= (1 << PORTC0) | (1 << PORTC1);
    2c52:	88 b1       	in	r24, 0x08	; 8
    2c54:	83 60       	ori	r24, 0x03	; 3
    2c56:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1 << PORTD2) | (1 << PORTC3);
    2c58:	8b b1       	in	r24, 0x0b	; 11
    2c5a:	8c 60       	ori	r24, 0x0C	; 12
    2c5c:	8b b9       	out	0x0b, r24	; 11
	
	PCMSK1 |= 0x3C; //PC2,3,4,5
    2c5e:	ec e6       	ldi	r30, 0x6C	; 108
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	80 81       	ld	r24, Z
    2c64:	8c 63       	ori	r24, 0x3C	; 60
    2c66:	80 83       	st	Z, r24
	PCMSK2 |= 0xF0; //PD4,5,6,7
    2c68:	ed e6       	ldi	r30, 0x6D	; 109
    2c6a:	f0 e0       	ldi	r31, 0x00	; 0
    2c6c:	80 81       	ld	r24, Z
    2c6e:	80 6f       	ori	r24, 0xF0	; 240
    2c70:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE1) | (1<<PCIE2);   //interrupts de cambio habilitados
    2c72:	e8 e6       	ldi	r30, 0x68	; 104
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	86 60       	ori	r24, 0x06	; 6
    2c7a:	80 83       	st	Z, r24
	
	//seteoTimmer2
	
	TCCR2A = 0;
    2c7c:	a0 eb       	ldi	r26, 0xB0	; 176
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	1c 92       	st	X, r1
	TCCR2B = 0;
    2c82:	e1 eb       	ldi	r30, 0xB1	; 177
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	10 82       	st	Z, r1
	TCNT2 = 0;
    2c88:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

	// 1000 Hz (16000000/((124+1)*128))
	OCR2A = 124;
    2c8c:	8c e7       	ldi	r24, 0x7C	; 124
    2c8e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	// CTC
	TCCR2A |= (1 << WGM21);
    2c92:	8c 91       	ld	r24, X
    2c94:	82 60       	ori	r24, 0x02	; 2
    2c96:	8c 93       	st	X, r24
	// Prescaler 128
	TCCR2B |= (1 << CS22) | (1 << CS20);
    2c98:	80 81       	ld	r24, Z
    2c9a:	85 60       	ori	r24, 0x05	; 5
    2c9c:	80 83       	st	Z, r24
	// Output Compare Match A Interrupt Enable
	TIMSK2 |= (1 << OCIE2A);
    2c9e:	e0 e7       	ldi	r30, 0x70	; 112
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	82 60       	ori	r24, 0x02	; 2
    2ca6:	80 83       	st	Z, r24
    2ca8:	08 95       	ret

00002caa <USART_Transmit_char>:


void USART_Transmit_char( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    2caa:	e0 ec       	ldi	r30, 0xC0	; 192
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	90 81       	ld	r25, Z
    2cb0:	95 ff       	sbrs	r25, 5
    2cb2:	fd cf       	rjmp	.-6      	; 0x2cae <USART_Transmit_char+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
    2cb4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    2cb8:	08 95       	ret

00002cba <USART_Transmit_String>:
}

void USART_Transmit_String(char* StringPtr)
{
    2cba:	cf 93       	push	r28
    2cbc:	df 93       	push	r29
    2cbe:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){
    2cc0:	88 81       	ld	r24, Y
    2cc2:	88 23       	and	r24, r24
    2cc4:	31 f0       	breq	.+12     	; 0x2cd2 <USART_Transmit_String+0x18>
    2cc6:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_char(*StringPtr);
    2cc8:	0e 94 55 16 	call	0x2caa	; 0x2caa <USART_Transmit_char>
	UDR0 = data;
}

void USART_Transmit_String(char* StringPtr)
{
	while(*StringPtr != 0x00){
    2ccc:	89 91       	ld	r24, Y+
    2cce:	81 11       	cpse	r24, r1
    2cd0:	fb cf       	rjmp	.-10     	; 0x2cc8 <USART_Transmit_String+0xe>
		USART_Transmit_char(*StringPtr);
		StringPtr++;
	}
}
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	08 95       	ret

00002cd8 <USART_Init>:

void USART_Init( unsigned int ubrr)
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
    2cd8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
    2cdc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);			//habilitamos tx y rx
    2ce0:	88 e1       	ldi	r24, 0x18	; 24
    2ce2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);					//decimos cuantos stopbit queremos y que data -> 8bits, 1stpobit
    2ce6:	86 e0       	ldi	r24, 0x06	; 6
    2ce8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2cec:	08 95       	ret

00002cee <__subsf3>:
    2cee:	50 58       	subi	r21, 0x80	; 128

00002cf0 <__addsf3>:
    2cf0:	bb 27       	eor	r27, r27
    2cf2:	aa 27       	eor	r26, r26
    2cf4:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__addsf3x>
    2cf8:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__fp_round>
    2cfc:	0e 94 2b 18 	call	0x3056	; 0x3056 <__fp_pscA>
    2d00:	38 f0       	brcs	.+14     	; 0x2d10 <__addsf3+0x20>
    2d02:	0e 94 32 18 	call	0x3064	; 0x3064 <__fp_pscB>
    2d06:	20 f0       	brcs	.+8      	; 0x2d10 <__addsf3+0x20>
    2d08:	39 f4       	brne	.+14     	; 0x2d18 <__addsf3+0x28>
    2d0a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d0c:	19 f4       	brne	.+6      	; 0x2d14 <__addsf3+0x24>
    2d0e:	26 f4       	brtc	.+8      	; 0x2d18 <__addsf3+0x28>
    2d10:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>
    2d14:	0e f4       	brtc	.+2      	; 0x2d18 <__addsf3+0x28>
    2d16:	e0 95       	com	r30
    2d18:	e7 fb       	bst	r30, 7
    2d1a:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>

00002d1e <__addsf3x>:
    2d1e:	e9 2f       	mov	r30, r25
    2d20:	0e 94 89 18 	call	0x3112	; 0x3112 <__fp_split3>
    2d24:	58 f3       	brcs	.-42     	; 0x2cfc <__addsf3+0xc>
    2d26:	ba 17       	cp	r27, r26
    2d28:	62 07       	cpc	r22, r18
    2d2a:	73 07       	cpc	r23, r19
    2d2c:	84 07       	cpc	r24, r20
    2d2e:	95 07       	cpc	r25, r21
    2d30:	20 f0       	brcs	.+8      	; 0x2d3a <__addsf3x+0x1c>
    2d32:	79 f4       	brne	.+30     	; 0x2d52 <__addsf3x+0x34>
    2d34:	a6 f5       	brtc	.+104    	; 0x2d9e <__addsf3x+0x80>
    2d36:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__fp_zero>
    2d3a:	0e f4       	brtc	.+2      	; 0x2d3e <__addsf3x+0x20>
    2d3c:	e0 95       	com	r30
    2d3e:	0b 2e       	mov	r0, r27
    2d40:	ba 2f       	mov	r27, r26
    2d42:	a0 2d       	mov	r26, r0
    2d44:	0b 01       	movw	r0, r22
    2d46:	b9 01       	movw	r22, r18
    2d48:	90 01       	movw	r18, r0
    2d4a:	0c 01       	movw	r0, r24
    2d4c:	ca 01       	movw	r24, r20
    2d4e:	a0 01       	movw	r20, r0
    2d50:	11 24       	eor	r1, r1
    2d52:	ff 27       	eor	r31, r31
    2d54:	59 1b       	sub	r21, r25
    2d56:	99 f0       	breq	.+38     	; 0x2d7e <__addsf3x+0x60>
    2d58:	59 3f       	cpi	r21, 0xF9	; 249
    2d5a:	50 f4       	brcc	.+20     	; 0x2d70 <__addsf3x+0x52>
    2d5c:	50 3e       	cpi	r21, 0xE0	; 224
    2d5e:	68 f1       	brcs	.+90     	; 0x2dba <__addsf3x+0x9c>
    2d60:	1a 16       	cp	r1, r26
    2d62:	f0 40       	sbci	r31, 0x00	; 0
    2d64:	a2 2f       	mov	r26, r18
    2d66:	23 2f       	mov	r18, r19
    2d68:	34 2f       	mov	r19, r20
    2d6a:	44 27       	eor	r20, r20
    2d6c:	58 5f       	subi	r21, 0xF8	; 248
    2d6e:	f3 cf       	rjmp	.-26     	; 0x2d56 <__addsf3x+0x38>
    2d70:	46 95       	lsr	r20
    2d72:	37 95       	ror	r19
    2d74:	27 95       	ror	r18
    2d76:	a7 95       	ror	r26
    2d78:	f0 40       	sbci	r31, 0x00	; 0
    2d7a:	53 95       	inc	r21
    2d7c:	c9 f7       	brne	.-14     	; 0x2d70 <__addsf3x+0x52>
    2d7e:	7e f4       	brtc	.+30     	; 0x2d9e <__addsf3x+0x80>
    2d80:	1f 16       	cp	r1, r31
    2d82:	ba 0b       	sbc	r27, r26
    2d84:	62 0b       	sbc	r22, r18
    2d86:	73 0b       	sbc	r23, r19
    2d88:	84 0b       	sbc	r24, r20
    2d8a:	ba f0       	brmi	.+46     	; 0x2dba <__addsf3x+0x9c>
    2d8c:	91 50       	subi	r25, 0x01	; 1
    2d8e:	a1 f0       	breq	.+40     	; 0x2db8 <__addsf3x+0x9a>
    2d90:	ff 0f       	add	r31, r31
    2d92:	bb 1f       	adc	r27, r27
    2d94:	66 1f       	adc	r22, r22
    2d96:	77 1f       	adc	r23, r23
    2d98:	88 1f       	adc	r24, r24
    2d9a:	c2 f7       	brpl	.-16     	; 0x2d8c <__addsf3x+0x6e>
    2d9c:	0e c0       	rjmp	.+28     	; 0x2dba <__addsf3x+0x9c>
    2d9e:	ba 0f       	add	r27, r26
    2da0:	62 1f       	adc	r22, r18
    2da2:	73 1f       	adc	r23, r19
    2da4:	84 1f       	adc	r24, r20
    2da6:	48 f4       	brcc	.+18     	; 0x2dba <__addsf3x+0x9c>
    2da8:	87 95       	ror	r24
    2daa:	77 95       	ror	r23
    2dac:	67 95       	ror	r22
    2dae:	b7 95       	ror	r27
    2db0:	f7 95       	ror	r31
    2db2:	9e 3f       	cpi	r25, 0xFE	; 254
    2db4:	08 f0       	brcs	.+2      	; 0x2db8 <__addsf3x+0x9a>
    2db6:	b0 cf       	rjmp	.-160    	; 0x2d18 <__addsf3+0x28>
    2db8:	93 95       	inc	r25
    2dba:	88 0f       	add	r24, r24
    2dbc:	08 f0       	brcs	.+2      	; 0x2dc0 <__addsf3x+0xa2>
    2dbe:	99 27       	eor	r25, r25
    2dc0:	ee 0f       	add	r30, r30
    2dc2:	97 95       	ror	r25
    2dc4:	87 95       	ror	r24
    2dc6:	08 95       	ret

00002dc8 <__cmpsf2>:
    2dc8:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__fp_cmp>
    2dcc:	08 f4       	brcc	.+2      	; 0x2dd0 <__cmpsf2+0x8>
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	08 95       	ret

00002dd2 <cos>:
    2dd2:	0e 94 3b 18 	call	0x3076	; 0x3076 <__fp_rempio2>
    2dd6:	e3 95       	inc	r30
    2dd8:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__fp_sinus>

00002ddc <__divsf3>:
    2ddc:	0e 94 02 17 	call	0x2e04	; 0x2e04 <__divsf3x>
    2de0:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__fp_round>
    2de4:	0e 94 32 18 	call	0x3064	; 0x3064 <__fp_pscB>
    2de8:	58 f0       	brcs	.+22     	; 0x2e00 <__divsf3+0x24>
    2dea:	0e 94 2b 18 	call	0x3056	; 0x3056 <__fp_pscA>
    2dee:	40 f0       	brcs	.+16     	; 0x2e00 <__divsf3+0x24>
    2df0:	29 f4       	brne	.+10     	; 0x2dfc <__divsf3+0x20>
    2df2:	5f 3f       	cpi	r21, 0xFF	; 255
    2df4:	29 f0       	breq	.+10     	; 0x2e00 <__divsf3+0x24>
    2df6:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>
    2dfa:	51 11       	cpse	r21, r1
    2dfc:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_szero>
    2e00:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>

00002e04 <__divsf3x>:
    2e04:	0e 94 89 18 	call	0x3112	; 0x3112 <__fp_split3>
    2e08:	68 f3       	brcs	.-38     	; 0x2de4 <__divsf3+0x8>

00002e0a <__divsf3_pse>:
    2e0a:	99 23       	and	r25, r25
    2e0c:	b1 f3       	breq	.-20     	; 0x2dfa <__divsf3+0x1e>
    2e0e:	55 23       	and	r21, r21
    2e10:	91 f3       	breq	.-28     	; 0x2df6 <__divsf3+0x1a>
    2e12:	95 1b       	sub	r25, r21
    2e14:	55 0b       	sbc	r21, r21
    2e16:	bb 27       	eor	r27, r27
    2e18:	aa 27       	eor	r26, r26
    2e1a:	62 17       	cp	r22, r18
    2e1c:	73 07       	cpc	r23, r19
    2e1e:	84 07       	cpc	r24, r20
    2e20:	38 f0       	brcs	.+14     	; 0x2e30 <__divsf3_pse+0x26>
    2e22:	9f 5f       	subi	r25, 0xFF	; 255
    2e24:	5f 4f       	sbci	r21, 0xFF	; 255
    2e26:	22 0f       	add	r18, r18
    2e28:	33 1f       	adc	r19, r19
    2e2a:	44 1f       	adc	r20, r20
    2e2c:	aa 1f       	adc	r26, r26
    2e2e:	a9 f3       	breq	.-22     	; 0x2e1a <__divsf3_pse+0x10>
    2e30:	35 d0       	rcall	.+106    	; 0x2e9c <__divsf3_pse+0x92>
    2e32:	0e 2e       	mov	r0, r30
    2e34:	3a f0       	brmi	.+14     	; 0x2e44 <__divsf3_pse+0x3a>
    2e36:	e0 e8       	ldi	r30, 0x80	; 128
    2e38:	32 d0       	rcall	.+100    	; 0x2e9e <__divsf3_pse+0x94>
    2e3a:	91 50       	subi	r25, 0x01	; 1
    2e3c:	50 40       	sbci	r21, 0x00	; 0
    2e3e:	e6 95       	lsr	r30
    2e40:	00 1c       	adc	r0, r0
    2e42:	ca f7       	brpl	.-14     	; 0x2e36 <__divsf3_pse+0x2c>
    2e44:	2b d0       	rcall	.+86     	; 0x2e9c <__divsf3_pse+0x92>
    2e46:	fe 2f       	mov	r31, r30
    2e48:	29 d0       	rcall	.+82     	; 0x2e9c <__divsf3_pse+0x92>
    2e4a:	66 0f       	add	r22, r22
    2e4c:	77 1f       	adc	r23, r23
    2e4e:	88 1f       	adc	r24, r24
    2e50:	bb 1f       	adc	r27, r27
    2e52:	26 17       	cp	r18, r22
    2e54:	37 07       	cpc	r19, r23
    2e56:	48 07       	cpc	r20, r24
    2e58:	ab 07       	cpc	r26, r27
    2e5a:	b0 e8       	ldi	r27, 0x80	; 128
    2e5c:	09 f0       	breq	.+2      	; 0x2e60 <__divsf3_pse+0x56>
    2e5e:	bb 0b       	sbc	r27, r27
    2e60:	80 2d       	mov	r24, r0
    2e62:	bf 01       	movw	r22, r30
    2e64:	ff 27       	eor	r31, r31
    2e66:	93 58       	subi	r25, 0x83	; 131
    2e68:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6a:	3a f0       	brmi	.+14     	; 0x2e7a <__divsf3_pse+0x70>
    2e6c:	9e 3f       	cpi	r25, 0xFE	; 254
    2e6e:	51 05       	cpc	r21, r1
    2e70:	78 f0       	brcs	.+30     	; 0x2e90 <__divsf3_pse+0x86>
    2e72:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>
    2e76:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_szero>
    2e7a:	5f 3f       	cpi	r21, 0xFF	; 255
    2e7c:	e4 f3       	brlt	.-8      	; 0x2e76 <__divsf3_pse+0x6c>
    2e7e:	98 3e       	cpi	r25, 0xE8	; 232
    2e80:	d4 f3       	brlt	.-12     	; 0x2e76 <__divsf3_pse+0x6c>
    2e82:	86 95       	lsr	r24
    2e84:	77 95       	ror	r23
    2e86:	67 95       	ror	r22
    2e88:	b7 95       	ror	r27
    2e8a:	f7 95       	ror	r31
    2e8c:	9f 5f       	subi	r25, 0xFF	; 255
    2e8e:	c9 f7       	brne	.-14     	; 0x2e82 <__divsf3_pse+0x78>
    2e90:	88 0f       	add	r24, r24
    2e92:	91 1d       	adc	r25, r1
    2e94:	96 95       	lsr	r25
    2e96:	87 95       	ror	r24
    2e98:	97 f9       	bld	r25, 7
    2e9a:	08 95       	ret
    2e9c:	e1 e0       	ldi	r30, 0x01	; 1
    2e9e:	66 0f       	add	r22, r22
    2ea0:	77 1f       	adc	r23, r23
    2ea2:	88 1f       	adc	r24, r24
    2ea4:	bb 1f       	adc	r27, r27
    2ea6:	62 17       	cp	r22, r18
    2ea8:	73 07       	cpc	r23, r19
    2eaa:	84 07       	cpc	r24, r20
    2eac:	ba 07       	cpc	r27, r26
    2eae:	20 f0       	brcs	.+8      	; 0x2eb8 <__divsf3_pse+0xae>
    2eb0:	62 1b       	sub	r22, r18
    2eb2:	73 0b       	sbc	r23, r19
    2eb4:	84 0b       	sbc	r24, r20
    2eb6:	ba 0b       	sbc	r27, r26
    2eb8:	ee 1f       	adc	r30, r30
    2eba:	88 f7       	brcc	.-30     	; 0x2e9e <__divsf3_pse+0x94>
    2ebc:	e0 95       	com	r30
    2ebe:	08 95       	ret
    2ec0:	29 f4       	brne	.+10     	; 0x2ecc <__divsf3_pse+0xc2>
    2ec2:	16 f0       	brts	.+4      	; 0x2ec8 <__divsf3_pse+0xbe>
    2ec4:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>
    2ec8:	0c 94 ab 18 	jmp	0x3156	; 0x3156 <__fp_zero>
    2ecc:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>

00002ed0 <exp>:
    2ed0:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_splitA>
    2ed4:	a8 f3       	brcs	.-22     	; 0x2ec0 <__divsf3_pse+0xb6>
    2ed6:	96 38       	cpi	r25, 0x86	; 134
    2ed8:	a0 f7       	brcc	.-24     	; 0x2ec2 <__divsf3_pse+0xb8>
    2eda:	07 f8       	bld	r0, 7
    2edc:	0f 92       	push	r0
    2ede:	e8 94       	clt
    2ee0:	2b e3       	ldi	r18, 0x3B	; 59
    2ee2:	3a ea       	ldi	r19, 0xAA	; 170
    2ee4:	48 eb       	ldi	r20, 0xB8	; 184
    2ee6:	5f e7       	ldi	r21, 0x7F	; 127
    2ee8:	0e 94 9b 19 	call	0x3336	; 0x3336 <__mulsf3_pse>
    2eec:	0f 92       	push	r0
    2eee:	0f 92       	push	r0
    2ef0:	0f 92       	push	r0
    2ef2:	4d b7       	in	r20, 0x3d	; 61
    2ef4:	5e b7       	in	r21, 0x3e	; 62
    2ef6:	0f 92       	push	r0
    2ef8:	0e 94 51 19 	call	0x32a2	; 0x32a2 <modf>
    2efc:	ea e6       	ldi	r30, 0x6A	; 106
    2efe:	f1 e0       	ldi	r31, 0x01	; 1
    2f00:	0e 94 04 18 	call	0x3008	; 0x3008 <__fp_powser>
    2f04:	4f 91       	pop	r20
    2f06:	5f 91       	pop	r21
    2f08:	ef 91       	pop	r30
    2f0a:	ff 91       	pop	r31
    2f0c:	e5 95       	asr	r30
    2f0e:	ee 1f       	adc	r30, r30
    2f10:	ff 1f       	adc	r31, r31
    2f12:	49 f0       	breq	.+18     	; 0x2f26 <exp+0x56>
    2f14:	fe 57       	subi	r31, 0x7E	; 126
    2f16:	e0 68       	ori	r30, 0x80	; 128
    2f18:	44 27       	eor	r20, r20
    2f1a:	ee 0f       	add	r30, r30
    2f1c:	44 1f       	adc	r20, r20
    2f1e:	fa 95       	dec	r31
    2f20:	e1 f7       	brne	.-8      	; 0x2f1a <exp+0x4a>
    2f22:	41 95       	neg	r20
    2f24:	55 0b       	sbc	r21, r21
    2f26:	0e 94 c3 18 	call	0x3186	; 0x3186 <ldexp>
    2f2a:	0f 90       	pop	r0
    2f2c:	07 fe       	sbrs	r0, 7
    2f2e:	0c 94 b7 18 	jmp	0x316e	; 0x316e <inverse>
    2f32:	08 95       	ret

00002f34 <__floatunsisf>:
    2f34:	e8 94       	clt
    2f36:	09 c0       	rjmp	.+18     	; 0x2f4a <__floatsisf+0x12>

00002f38 <__floatsisf>:
    2f38:	97 fb       	bst	r25, 7
    2f3a:	3e f4       	brtc	.+14     	; 0x2f4a <__floatsisf+0x12>
    2f3c:	90 95       	com	r25
    2f3e:	80 95       	com	r24
    2f40:	70 95       	com	r23
    2f42:	61 95       	neg	r22
    2f44:	7f 4f       	sbci	r23, 0xFF	; 255
    2f46:	8f 4f       	sbci	r24, 0xFF	; 255
    2f48:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4a:	99 23       	and	r25, r25
    2f4c:	a9 f0       	breq	.+42     	; 0x2f78 <__floatsisf+0x40>
    2f4e:	f9 2f       	mov	r31, r25
    2f50:	96 e9       	ldi	r25, 0x96	; 150
    2f52:	bb 27       	eor	r27, r27
    2f54:	93 95       	inc	r25
    2f56:	f6 95       	lsr	r31
    2f58:	87 95       	ror	r24
    2f5a:	77 95       	ror	r23
    2f5c:	67 95       	ror	r22
    2f5e:	b7 95       	ror	r27
    2f60:	f1 11       	cpse	r31, r1
    2f62:	f8 cf       	rjmp	.-16     	; 0x2f54 <__floatsisf+0x1c>
    2f64:	fa f4       	brpl	.+62     	; 0x2fa4 <__floatsisf+0x6c>
    2f66:	bb 0f       	add	r27, r27
    2f68:	11 f4       	brne	.+4      	; 0x2f6e <__floatsisf+0x36>
    2f6a:	60 ff       	sbrs	r22, 0
    2f6c:	1b c0       	rjmp	.+54     	; 0x2fa4 <__floatsisf+0x6c>
    2f6e:	6f 5f       	subi	r22, 0xFF	; 255
    2f70:	7f 4f       	sbci	r23, 0xFF	; 255
    2f72:	8f 4f       	sbci	r24, 0xFF	; 255
    2f74:	9f 4f       	sbci	r25, 0xFF	; 255
    2f76:	16 c0       	rjmp	.+44     	; 0x2fa4 <__floatsisf+0x6c>
    2f78:	88 23       	and	r24, r24
    2f7a:	11 f0       	breq	.+4      	; 0x2f80 <__floatsisf+0x48>
    2f7c:	96 e9       	ldi	r25, 0x96	; 150
    2f7e:	11 c0       	rjmp	.+34     	; 0x2fa2 <__floatsisf+0x6a>
    2f80:	77 23       	and	r23, r23
    2f82:	21 f0       	breq	.+8      	; 0x2f8c <__floatsisf+0x54>
    2f84:	9e e8       	ldi	r25, 0x8E	; 142
    2f86:	87 2f       	mov	r24, r23
    2f88:	76 2f       	mov	r23, r22
    2f8a:	05 c0       	rjmp	.+10     	; 0x2f96 <__floatsisf+0x5e>
    2f8c:	66 23       	and	r22, r22
    2f8e:	71 f0       	breq	.+28     	; 0x2fac <__floatsisf+0x74>
    2f90:	96 e8       	ldi	r25, 0x86	; 134
    2f92:	86 2f       	mov	r24, r22
    2f94:	70 e0       	ldi	r23, 0x00	; 0
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	2a f0       	brmi	.+10     	; 0x2fa4 <__floatsisf+0x6c>
    2f9a:	9a 95       	dec	r25
    2f9c:	66 0f       	add	r22, r22
    2f9e:	77 1f       	adc	r23, r23
    2fa0:	88 1f       	adc	r24, r24
    2fa2:	da f7       	brpl	.-10     	; 0x2f9a <__floatsisf+0x62>
    2fa4:	88 0f       	add	r24, r24
    2fa6:	96 95       	lsr	r25
    2fa8:	87 95       	ror	r24
    2faa:	97 f9       	bld	r25, 7
    2fac:	08 95       	ret

00002fae <__fp_cmp>:
    2fae:	99 0f       	add	r25, r25
    2fb0:	00 08       	sbc	r0, r0
    2fb2:	55 0f       	add	r21, r21
    2fb4:	aa 0b       	sbc	r26, r26
    2fb6:	e0 e8       	ldi	r30, 0x80	; 128
    2fb8:	fe ef       	ldi	r31, 0xFE	; 254
    2fba:	16 16       	cp	r1, r22
    2fbc:	17 06       	cpc	r1, r23
    2fbe:	e8 07       	cpc	r30, r24
    2fc0:	f9 07       	cpc	r31, r25
    2fc2:	c0 f0       	brcs	.+48     	; 0x2ff4 <__fp_cmp+0x46>
    2fc4:	12 16       	cp	r1, r18
    2fc6:	13 06       	cpc	r1, r19
    2fc8:	e4 07       	cpc	r30, r20
    2fca:	f5 07       	cpc	r31, r21
    2fcc:	98 f0       	brcs	.+38     	; 0x2ff4 <__fp_cmp+0x46>
    2fce:	62 1b       	sub	r22, r18
    2fd0:	73 0b       	sbc	r23, r19
    2fd2:	84 0b       	sbc	r24, r20
    2fd4:	95 0b       	sbc	r25, r21
    2fd6:	39 f4       	brne	.+14     	; 0x2fe6 <__fp_cmp+0x38>
    2fd8:	0a 26       	eor	r0, r26
    2fda:	61 f0       	breq	.+24     	; 0x2ff4 <__fp_cmp+0x46>
    2fdc:	23 2b       	or	r18, r19
    2fde:	24 2b       	or	r18, r20
    2fe0:	25 2b       	or	r18, r21
    2fe2:	21 f4       	brne	.+8      	; 0x2fec <__fp_cmp+0x3e>
    2fe4:	08 95       	ret
    2fe6:	0a 26       	eor	r0, r26
    2fe8:	09 f4       	brne	.+2      	; 0x2fec <__fp_cmp+0x3e>
    2fea:	a1 40       	sbci	r26, 0x01	; 1
    2fec:	a6 95       	lsr	r26
    2fee:	8f ef       	ldi	r24, 0xFF	; 255
    2ff0:	81 1d       	adc	r24, r1
    2ff2:	81 1d       	adc	r24, r1
    2ff4:	08 95       	ret

00002ff6 <__fp_inf>:
    2ff6:	97 f9       	bld	r25, 7
    2ff8:	9f 67       	ori	r25, 0x7F	; 127
    2ffa:	80 e8       	ldi	r24, 0x80	; 128
    2ffc:	70 e0       	ldi	r23, 0x00	; 0
    2ffe:	60 e0       	ldi	r22, 0x00	; 0
    3000:	08 95       	ret

00003002 <__fp_nan>:
    3002:	9f ef       	ldi	r25, 0xFF	; 255
    3004:	80 ec       	ldi	r24, 0xC0	; 192
    3006:	08 95       	ret

00003008 <__fp_powser>:
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	1f 93       	push	r17
    300e:	0f 93       	push	r16
    3010:	ff 92       	push	r15
    3012:	ef 92       	push	r14
    3014:	df 92       	push	r13
    3016:	7b 01       	movw	r14, r22
    3018:	8c 01       	movw	r16, r24
    301a:	68 94       	set
    301c:	06 c0       	rjmp	.+12     	; 0x302a <__fp_powser+0x22>
    301e:	da 2e       	mov	r13, r26
    3020:	ef 01       	movw	r28, r30
    3022:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3x>
    3026:	fe 01       	movw	r30, r28
    3028:	e8 94       	clt
    302a:	a5 91       	lpm	r26, Z+
    302c:	25 91       	lpm	r18, Z+
    302e:	35 91       	lpm	r19, Z+
    3030:	45 91       	lpm	r20, Z+
    3032:	55 91       	lpm	r21, Z+
    3034:	a6 f3       	brts	.-24     	; 0x301e <__fp_powser+0x16>
    3036:	ef 01       	movw	r28, r30
    3038:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__addsf3x>
    303c:	fe 01       	movw	r30, r28
    303e:	97 01       	movw	r18, r14
    3040:	a8 01       	movw	r20, r16
    3042:	da 94       	dec	r13
    3044:	69 f7       	brne	.-38     	; 0x3020 <__fp_powser+0x18>
    3046:	df 90       	pop	r13
    3048:	ef 90       	pop	r14
    304a:	ff 90       	pop	r15
    304c:	0f 91       	pop	r16
    304e:	1f 91       	pop	r17
    3050:	cf 91       	pop	r28
    3052:	df 91       	pop	r29
    3054:	08 95       	ret

00003056 <__fp_pscA>:
    3056:	00 24       	eor	r0, r0
    3058:	0a 94       	dec	r0
    305a:	16 16       	cp	r1, r22
    305c:	17 06       	cpc	r1, r23
    305e:	18 06       	cpc	r1, r24
    3060:	09 06       	cpc	r0, r25
    3062:	08 95       	ret

00003064 <__fp_pscB>:
    3064:	00 24       	eor	r0, r0
    3066:	0a 94       	dec	r0
    3068:	12 16       	cp	r1, r18
    306a:	13 06       	cpc	r1, r19
    306c:	14 06       	cpc	r1, r20
    306e:	05 06       	cpc	r0, r21
    3070:	08 95       	ret
    3072:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>

00003076 <__fp_rempio2>:
    3076:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_splitA>
    307a:	d8 f3       	brcs	.-10     	; 0x3072 <__fp_pscB+0xe>
    307c:	e8 94       	clt
    307e:	e0 e0       	ldi	r30, 0x00	; 0
    3080:	bb 27       	eor	r27, r27
    3082:	9f 57       	subi	r25, 0x7F	; 127
    3084:	f0 f0       	brcs	.+60     	; 0x30c2 <__fp_rempio2+0x4c>
    3086:	2a ed       	ldi	r18, 0xDA	; 218
    3088:	3f e0       	ldi	r19, 0x0F	; 15
    308a:	49 ec       	ldi	r20, 0xC9	; 201
    308c:	06 c0       	rjmp	.+12     	; 0x309a <__fp_rempio2+0x24>
    308e:	ee 0f       	add	r30, r30
    3090:	bb 0f       	add	r27, r27
    3092:	66 1f       	adc	r22, r22
    3094:	77 1f       	adc	r23, r23
    3096:	88 1f       	adc	r24, r24
    3098:	28 f0       	brcs	.+10     	; 0x30a4 <__fp_rempio2+0x2e>
    309a:	b2 3a       	cpi	r27, 0xA2	; 162
    309c:	62 07       	cpc	r22, r18
    309e:	73 07       	cpc	r23, r19
    30a0:	84 07       	cpc	r24, r20
    30a2:	28 f0       	brcs	.+10     	; 0x30ae <__fp_rempio2+0x38>
    30a4:	b2 5a       	subi	r27, 0xA2	; 162
    30a6:	62 0b       	sbc	r22, r18
    30a8:	73 0b       	sbc	r23, r19
    30aa:	84 0b       	sbc	r24, r20
    30ac:	e3 95       	inc	r30
    30ae:	9a 95       	dec	r25
    30b0:	72 f7       	brpl	.-36     	; 0x308e <__fp_rempio2+0x18>
    30b2:	80 38       	cpi	r24, 0x80	; 128
    30b4:	30 f4       	brcc	.+12     	; 0x30c2 <__fp_rempio2+0x4c>
    30b6:	9a 95       	dec	r25
    30b8:	bb 0f       	add	r27, r27
    30ba:	66 1f       	adc	r22, r22
    30bc:	77 1f       	adc	r23, r23
    30be:	88 1f       	adc	r24, r24
    30c0:	d2 f7       	brpl	.-12     	; 0x30b6 <__fp_rempio2+0x40>
    30c2:	90 48       	sbci	r25, 0x80	; 128
    30c4:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__fp_mpack_finite>

000030c8 <__fp_round>:
    30c8:	09 2e       	mov	r0, r25
    30ca:	03 94       	inc	r0
    30cc:	00 0c       	add	r0, r0
    30ce:	11 f4       	brne	.+4      	; 0x30d4 <__fp_round+0xc>
    30d0:	88 23       	and	r24, r24
    30d2:	52 f0       	brmi	.+20     	; 0x30e8 <__fp_round+0x20>
    30d4:	bb 0f       	add	r27, r27
    30d6:	40 f4       	brcc	.+16     	; 0x30e8 <__fp_round+0x20>
    30d8:	bf 2b       	or	r27, r31
    30da:	11 f4       	brne	.+4      	; 0x30e0 <__fp_round+0x18>
    30dc:	60 ff       	sbrs	r22, 0
    30de:	04 c0       	rjmp	.+8      	; 0x30e8 <__fp_round+0x20>
    30e0:	6f 5f       	subi	r22, 0xFF	; 255
    30e2:	7f 4f       	sbci	r23, 0xFF	; 255
    30e4:	8f 4f       	sbci	r24, 0xFF	; 255
    30e6:	9f 4f       	sbci	r25, 0xFF	; 255
    30e8:	08 95       	ret

000030ea <__fp_sinus>:
    30ea:	ef 93       	push	r30
    30ec:	e0 ff       	sbrs	r30, 0
    30ee:	07 c0       	rjmp	.+14     	; 0x30fe <__fp_sinus+0x14>
    30f0:	a2 ea       	ldi	r26, 0xA2	; 162
    30f2:	2a ed       	ldi	r18, 0xDA	; 218
    30f4:	3f e0       	ldi	r19, 0x0F	; 15
    30f6:	49 ec       	ldi	r20, 0xC9	; 201
    30f8:	5f eb       	ldi	r21, 0xBF	; 191
    30fa:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__addsf3x>
    30fe:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__fp_round>
    3102:	0f 90       	pop	r0
    3104:	03 94       	inc	r0
    3106:	01 fc       	sbrc	r0, 1
    3108:	90 58       	subi	r25, 0x80	; 128
    310a:	e2 e9       	ldi	r30, 0x92	; 146
    310c:	f1 e0       	ldi	r31, 0x01	; 1
    310e:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <__fp_powsodd>

00003112 <__fp_split3>:
    3112:	57 fd       	sbrc	r21, 7
    3114:	90 58       	subi	r25, 0x80	; 128
    3116:	44 0f       	add	r20, r20
    3118:	55 1f       	adc	r21, r21
    311a:	59 f0       	breq	.+22     	; 0x3132 <__fp_splitA+0x10>
    311c:	5f 3f       	cpi	r21, 0xFF	; 255
    311e:	71 f0       	breq	.+28     	; 0x313c <__fp_splitA+0x1a>
    3120:	47 95       	ror	r20

00003122 <__fp_splitA>:
    3122:	88 0f       	add	r24, r24
    3124:	97 fb       	bst	r25, 7
    3126:	99 1f       	adc	r25, r25
    3128:	61 f0       	breq	.+24     	; 0x3142 <__fp_splitA+0x20>
    312a:	9f 3f       	cpi	r25, 0xFF	; 255
    312c:	79 f0       	breq	.+30     	; 0x314c <__fp_splitA+0x2a>
    312e:	87 95       	ror	r24
    3130:	08 95       	ret
    3132:	12 16       	cp	r1, r18
    3134:	13 06       	cpc	r1, r19
    3136:	14 06       	cpc	r1, r20
    3138:	55 1f       	adc	r21, r21
    313a:	f2 cf       	rjmp	.-28     	; 0x3120 <__fp_split3+0xe>
    313c:	46 95       	lsr	r20
    313e:	f1 df       	rcall	.-30     	; 0x3122 <__fp_splitA>
    3140:	08 c0       	rjmp	.+16     	; 0x3152 <__fp_splitA+0x30>
    3142:	16 16       	cp	r1, r22
    3144:	17 06       	cpc	r1, r23
    3146:	18 06       	cpc	r1, r24
    3148:	99 1f       	adc	r25, r25
    314a:	f1 cf       	rjmp	.-30     	; 0x312e <__fp_splitA+0xc>
    314c:	86 95       	lsr	r24
    314e:	71 05       	cpc	r23, r1
    3150:	61 05       	cpc	r22, r1
    3152:	08 94       	sec
    3154:	08 95       	ret

00003156 <__fp_zero>:
    3156:	e8 94       	clt

00003158 <__fp_szero>:
    3158:	bb 27       	eor	r27, r27
    315a:	66 27       	eor	r22, r22
    315c:	77 27       	eor	r23, r23
    315e:	cb 01       	movw	r24, r22
    3160:	97 f9       	bld	r25, 7
    3162:	08 95       	ret

00003164 <__gesf2>:
    3164:	0e 94 d7 17 	call	0x2fae	; 0x2fae <__fp_cmp>
    3168:	08 f4       	brcc	.+2      	; 0x316c <__gesf2+0x8>
    316a:	8f ef       	ldi	r24, 0xFF	; 255
    316c:	08 95       	ret

0000316e <inverse>:
    316e:	9b 01       	movw	r18, r22
    3170:	ac 01       	movw	r20, r24
    3172:	60 e0       	ldi	r22, 0x00	; 0
    3174:	70 e0       	ldi	r23, 0x00	; 0
    3176:	80 e8       	ldi	r24, 0x80	; 128
    3178:	9f e3       	ldi	r25, 0x3F	; 63
    317a:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__divsf3>
    317e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>
    3182:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__fp_mpack>

00003186 <ldexp>:
    3186:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_splitA>
    318a:	d8 f3       	brcs	.-10     	; 0x3182 <inverse+0x14>
    318c:	99 23       	and	r25, r25
    318e:	c9 f3       	breq	.-14     	; 0x3182 <inverse+0x14>
    3190:	94 0f       	add	r25, r20
    3192:	51 1d       	adc	r21, r1
    3194:	a3 f3       	brvs	.-24     	; 0x317e <inverse+0x10>
    3196:	91 50       	subi	r25, 0x01	; 1
    3198:	50 40       	sbci	r21, 0x00	; 0
    319a:	94 f0       	brlt	.+36     	; 0x31c0 <ldexp+0x3a>
    319c:	59 f0       	breq	.+22     	; 0x31b4 <ldexp+0x2e>
    319e:	88 23       	and	r24, r24
    31a0:	32 f0       	brmi	.+12     	; 0x31ae <ldexp+0x28>
    31a2:	66 0f       	add	r22, r22
    31a4:	77 1f       	adc	r23, r23
    31a6:	88 1f       	adc	r24, r24
    31a8:	91 50       	subi	r25, 0x01	; 1
    31aa:	50 40       	sbci	r21, 0x00	; 0
    31ac:	c1 f7       	brne	.-16     	; 0x319e <ldexp+0x18>
    31ae:	9e 3f       	cpi	r25, 0xFE	; 254
    31b0:	51 05       	cpc	r21, r1
    31b2:	2c f7       	brge	.-54     	; 0x317e <inverse+0x10>
    31b4:	88 0f       	add	r24, r24
    31b6:	91 1d       	adc	r25, r1
    31b8:	96 95       	lsr	r25
    31ba:	87 95       	ror	r24
    31bc:	97 f9       	bld	r25, 7
    31be:	08 95       	ret
    31c0:	5f 3f       	cpi	r21, 0xFF	; 255
    31c2:	ac f0       	brlt	.+42     	; 0x31ee <ldexp+0x68>
    31c4:	98 3e       	cpi	r25, 0xE8	; 232
    31c6:	9c f0       	brlt	.+38     	; 0x31ee <ldexp+0x68>
    31c8:	bb 27       	eor	r27, r27
    31ca:	86 95       	lsr	r24
    31cc:	77 95       	ror	r23
    31ce:	67 95       	ror	r22
    31d0:	b7 95       	ror	r27
    31d2:	08 f4       	brcc	.+2      	; 0x31d6 <ldexp+0x50>
    31d4:	b1 60       	ori	r27, 0x01	; 1
    31d6:	93 95       	inc	r25
    31d8:	c1 f7       	brne	.-16     	; 0x31ca <ldexp+0x44>
    31da:	bb 0f       	add	r27, r27
    31dc:	58 f7       	brcc	.-42     	; 0x31b4 <ldexp+0x2e>
    31de:	11 f4       	brne	.+4      	; 0x31e4 <ldexp+0x5e>
    31e0:	60 ff       	sbrs	r22, 0
    31e2:	e8 cf       	rjmp	.-48     	; 0x31b4 <ldexp+0x2e>
    31e4:	6f 5f       	subi	r22, 0xFF	; 255
    31e6:	7f 4f       	sbci	r23, 0xFF	; 255
    31e8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ea:	9f 4f       	sbci	r25, 0xFF	; 255
    31ec:	e3 cf       	rjmp	.-58     	; 0x31b4 <ldexp+0x2e>
    31ee:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_szero>

000031f2 <log10>:
    31f2:	0e 94 09 19 	call	0x3212	; 0x3212 <log>
    31f6:	29 ed       	ldi	r18, 0xD9	; 217
    31f8:	3b e5       	ldi	r19, 0x5B	; 91
    31fa:	4e ed       	ldi	r20, 0xDE	; 222
    31fc:	5e e3       	ldi	r21, 0x3E	; 62
    31fe:	0c 94 85 19 	jmp	0x330a	; 0x330a <__mulsf3>
    3202:	16 f0       	brts	.+4      	; 0x3208 <log10+0x16>
    3204:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__fp_mpack>
    3208:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>
    320c:	68 94       	set
    320e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>

00003212 <log>:
    3212:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_splitA>
    3216:	a8 f3       	brcs	.-22     	; 0x3202 <log10+0x10>
    3218:	99 23       	and	r25, r25
    321a:	c1 f3       	breq	.-16     	; 0x320c <log10+0x1a>
    321c:	ae f3       	brts	.-22     	; 0x3208 <log10+0x16>
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	1f 93       	push	r17
    3224:	0f 93       	push	r16
    3226:	ff 92       	push	r15
    3228:	c9 2f       	mov	r28, r25
    322a:	dd 27       	eor	r29, r29
    322c:	88 23       	and	r24, r24
    322e:	2a f0       	brmi	.+10     	; 0x323a <log+0x28>
    3230:	21 97       	sbiw	r28, 0x01	; 1
    3232:	66 0f       	add	r22, r22
    3234:	77 1f       	adc	r23, r23
    3236:	88 1f       	adc	r24, r24
    3238:	da f7       	brpl	.-10     	; 0x3230 <log+0x1e>
    323a:	20 e0       	ldi	r18, 0x00	; 0
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	40 e8       	ldi	r20, 0x80	; 128
    3240:	5f eb       	ldi	r21, 0xBF	; 191
    3242:	9f e3       	ldi	r25, 0x3F	; 63
    3244:	88 39       	cpi	r24, 0x98	; 152
    3246:	20 f0       	brcs	.+8      	; 0x3250 <log+0x3e>
    3248:	80 3e       	cpi	r24, 0xE0	; 224
    324a:	38 f0       	brcs	.+14     	; 0x325a <log+0x48>
    324c:	21 96       	adiw	r28, 0x01	; 1
    324e:	8f 77       	andi	r24, 0x7F	; 127
    3250:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    3254:	e0 eb       	ldi	r30, 0xB0	; 176
    3256:	f1 e0       	ldi	r31, 0x01	; 1
    3258:	04 c0       	rjmp	.+8      	; 0x3262 <log+0x50>
    325a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <__addsf3>
    325e:	ed ed       	ldi	r30, 0xDD	; 221
    3260:	f1 e0       	ldi	r31, 0x01	; 1
    3262:	0e 94 04 18 	call	0x3008	; 0x3008 <__fp_powser>
    3266:	8b 01       	movw	r16, r22
    3268:	be 01       	movw	r22, r28
    326a:	ec 01       	movw	r28, r24
    326c:	fb 2e       	mov	r15, r27
    326e:	6f 57       	subi	r22, 0x7F	; 127
    3270:	71 09       	sbc	r23, r1
    3272:	75 95       	asr	r23
    3274:	77 1f       	adc	r23, r23
    3276:	88 0b       	sbc	r24, r24
    3278:	99 0b       	sbc	r25, r25
    327a:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__floatsisf>
    327e:	28 e1       	ldi	r18, 0x18	; 24
    3280:	32 e7       	ldi	r19, 0x72	; 114
    3282:	41 e3       	ldi	r20, 0x31	; 49
    3284:	5f e3       	ldi	r21, 0x3F	; 63
    3286:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3x>
    328a:	af 2d       	mov	r26, r15
    328c:	98 01       	movw	r18, r16
    328e:	ae 01       	movw	r20, r28
    3290:	ff 90       	pop	r15
    3292:	0f 91       	pop	r16
    3294:	1f 91       	pop	r17
    3296:	cf 91       	pop	r28
    3298:	df 91       	pop	r29
    329a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__addsf3x>
    329e:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__fp_round>

000032a2 <modf>:
    32a2:	fa 01       	movw	r30, r20
    32a4:	dc 01       	movw	r26, r24
    32a6:	aa 0f       	add	r26, r26
    32a8:	bb 1f       	adc	r27, r27
    32aa:	9b 01       	movw	r18, r22
    32ac:	ac 01       	movw	r20, r24
    32ae:	bf 57       	subi	r27, 0x7F	; 127
    32b0:	28 f4       	brcc	.+10     	; 0x32bc <modf+0x1a>
    32b2:	22 27       	eor	r18, r18
    32b4:	33 27       	eor	r19, r19
    32b6:	44 27       	eor	r20, r20
    32b8:	50 78       	andi	r21, 0x80	; 128
    32ba:	20 c0       	rjmp	.+64     	; 0x32fc <modf+0x5a>
    32bc:	b7 51       	subi	r27, 0x17	; 23
    32be:	90 f4       	brcc	.+36     	; 0x32e4 <modf+0x42>
    32c0:	ab 2f       	mov	r26, r27
    32c2:	00 24       	eor	r0, r0
    32c4:	46 95       	lsr	r20
    32c6:	37 95       	ror	r19
    32c8:	27 95       	ror	r18
    32ca:	01 1c       	adc	r0, r1
    32cc:	a3 95       	inc	r26
    32ce:	d2 f3       	brmi	.-12     	; 0x32c4 <modf+0x22>
    32d0:	00 20       	and	r0, r0
    32d2:	71 f0       	breq	.+28     	; 0x32f0 <modf+0x4e>
    32d4:	22 0f       	add	r18, r18
    32d6:	33 1f       	adc	r19, r19
    32d8:	44 1f       	adc	r20, r20
    32da:	b3 95       	inc	r27
    32dc:	da f3       	brmi	.-10     	; 0x32d4 <modf+0x32>
    32de:	0e d0       	rcall	.+28     	; 0x32fc <modf+0x5a>
    32e0:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__subsf3>
    32e4:	61 30       	cpi	r22, 0x01	; 1
    32e6:	71 05       	cpc	r23, r1
    32e8:	a0 e8       	ldi	r26, 0x80	; 128
    32ea:	8a 07       	cpc	r24, r26
    32ec:	b9 46       	sbci	r27, 0x69	; 105
    32ee:	30 f4       	brcc	.+12     	; 0x32fc <modf+0x5a>
    32f0:	9b 01       	movw	r18, r22
    32f2:	ac 01       	movw	r20, r24
    32f4:	66 27       	eor	r22, r22
    32f6:	77 27       	eor	r23, r23
    32f8:	88 27       	eor	r24, r24
    32fa:	90 78       	andi	r25, 0x80	; 128
    32fc:	30 96       	adiw	r30, 0x00	; 0
    32fe:	21 f0       	breq	.+8      	; 0x3308 <modf+0x66>
    3300:	20 83       	st	Z, r18
    3302:	31 83       	std	Z+1, r19	; 0x01
    3304:	42 83       	std	Z+2, r20	; 0x02
    3306:	53 83       	std	Z+3, r21	; 0x03
    3308:	08 95       	ret

0000330a <__mulsf3>:
    330a:	0e 94 98 19 	call	0x3330	; 0x3330 <__mulsf3x>
    330e:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__fp_round>
    3312:	0e 94 2b 18 	call	0x3056	; 0x3056 <__fp_pscA>
    3316:	38 f0       	brcs	.+14     	; 0x3326 <__mulsf3+0x1c>
    3318:	0e 94 32 18 	call	0x3064	; 0x3064 <__fp_pscB>
    331c:	20 f0       	brcs	.+8      	; 0x3326 <__mulsf3+0x1c>
    331e:	95 23       	and	r25, r21
    3320:	11 f0       	breq	.+4      	; 0x3326 <__mulsf3+0x1c>
    3322:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>
    3326:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>
    332a:	11 24       	eor	r1, r1
    332c:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_szero>

00003330 <__mulsf3x>:
    3330:	0e 94 89 18 	call	0x3112	; 0x3112 <__fp_split3>
    3334:	70 f3       	brcs	.-36     	; 0x3312 <__mulsf3+0x8>

00003336 <__mulsf3_pse>:
    3336:	95 9f       	mul	r25, r21
    3338:	c1 f3       	breq	.-16     	; 0x332a <__mulsf3+0x20>
    333a:	95 0f       	add	r25, r21
    333c:	50 e0       	ldi	r21, 0x00	; 0
    333e:	55 1f       	adc	r21, r21
    3340:	62 9f       	mul	r22, r18
    3342:	f0 01       	movw	r30, r0
    3344:	72 9f       	mul	r23, r18
    3346:	bb 27       	eor	r27, r27
    3348:	f0 0d       	add	r31, r0
    334a:	b1 1d       	adc	r27, r1
    334c:	63 9f       	mul	r22, r19
    334e:	aa 27       	eor	r26, r26
    3350:	f0 0d       	add	r31, r0
    3352:	b1 1d       	adc	r27, r1
    3354:	aa 1f       	adc	r26, r26
    3356:	64 9f       	mul	r22, r20
    3358:	66 27       	eor	r22, r22
    335a:	b0 0d       	add	r27, r0
    335c:	a1 1d       	adc	r26, r1
    335e:	66 1f       	adc	r22, r22
    3360:	82 9f       	mul	r24, r18
    3362:	22 27       	eor	r18, r18
    3364:	b0 0d       	add	r27, r0
    3366:	a1 1d       	adc	r26, r1
    3368:	62 1f       	adc	r22, r18
    336a:	73 9f       	mul	r23, r19
    336c:	b0 0d       	add	r27, r0
    336e:	a1 1d       	adc	r26, r1
    3370:	62 1f       	adc	r22, r18
    3372:	83 9f       	mul	r24, r19
    3374:	a0 0d       	add	r26, r0
    3376:	61 1d       	adc	r22, r1
    3378:	22 1f       	adc	r18, r18
    337a:	74 9f       	mul	r23, r20
    337c:	33 27       	eor	r19, r19
    337e:	a0 0d       	add	r26, r0
    3380:	61 1d       	adc	r22, r1
    3382:	23 1f       	adc	r18, r19
    3384:	84 9f       	mul	r24, r20
    3386:	60 0d       	add	r22, r0
    3388:	21 1d       	adc	r18, r1
    338a:	82 2f       	mov	r24, r18
    338c:	76 2f       	mov	r23, r22
    338e:	6a 2f       	mov	r22, r26
    3390:	11 24       	eor	r1, r1
    3392:	9f 57       	subi	r25, 0x7F	; 127
    3394:	50 40       	sbci	r21, 0x00	; 0
    3396:	9a f0       	brmi	.+38     	; 0x33be <__mulsf3_pse+0x88>
    3398:	f1 f0       	breq	.+60     	; 0x33d6 <__mulsf3_pse+0xa0>
    339a:	88 23       	and	r24, r24
    339c:	4a f0       	brmi	.+18     	; 0x33b0 <__mulsf3_pse+0x7a>
    339e:	ee 0f       	add	r30, r30
    33a0:	ff 1f       	adc	r31, r31
    33a2:	bb 1f       	adc	r27, r27
    33a4:	66 1f       	adc	r22, r22
    33a6:	77 1f       	adc	r23, r23
    33a8:	88 1f       	adc	r24, r24
    33aa:	91 50       	subi	r25, 0x01	; 1
    33ac:	50 40       	sbci	r21, 0x00	; 0
    33ae:	a9 f7       	brne	.-22     	; 0x339a <__mulsf3_pse+0x64>
    33b0:	9e 3f       	cpi	r25, 0xFE	; 254
    33b2:	51 05       	cpc	r21, r1
    33b4:	80 f0       	brcs	.+32     	; 0x33d6 <__mulsf3_pse+0xa0>
    33b6:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__fp_inf>
    33ba:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__fp_szero>
    33be:	5f 3f       	cpi	r21, 0xFF	; 255
    33c0:	e4 f3       	brlt	.-8      	; 0x33ba <__mulsf3_pse+0x84>
    33c2:	98 3e       	cpi	r25, 0xE8	; 232
    33c4:	d4 f3       	brlt	.-12     	; 0x33ba <__mulsf3_pse+0x84>
    33c6:	86 95       	lsr	r24
    33c8:	77 95       	ror	r23
    33ca:	67 95       	ror	r22
    33cc:	b7 95       	ror	r27
    33ce:	f7 95       	ror	r31
    33d0:	e7 95       	ror	r30
    33d2:	9f 5f       	subi	r25, 0xFF	; 255
    33d4:	c1 f7       	brne	.-16     	; 0x33c6 <__mulsf3_pse+0x90>
    33d6:	fe 2b       	or	r31, r30
    33d8:	88 0f       	add	r24, r24
    33da:	91 1d       	adc	r25, r1
    33dc:	96 95       	lsr	r25
    33de:	87 95       	ror	r24
    33e0:	97 f9       	bld	r25, 7
    33e2:	08 95       	ret

000033e4 <pow>:
    33e4:	fa 01       	movw	r30, r20
    33e6:	ee 0f       	add	r30, r30
    33e8:	ff 1f       	adc	r31, r31
    33ea:	30 96       	adiw	r30, 0x00	; 0
    33ec:	21 05       	cpc	r18, r1
    33ee:	31 05       	cpc	r19, r1
    33f0:	a1 f1       	breq	.+104    	; 0x345a <pow+0x76>
    33f2:	61 15       	cp	r22, r1
    33f4:	71 05       	cpc	r23, r1
    33f6:	61 f4       	brne	.+24     	; 0x3410 <pow+0x2c>
    33f8:	80 38       	cpi	r24, 0x80	; 128
    33fa:	bf e3       	ldi	r27, 0x3F	; 63
    33fc:	9b 07       	cpc	r25, r27
    33fe:	49 f1       	breq	.+82     	; 0x3452 <pow+0x6e>
    3400:	68 94       	set
    3402:	90 38       	cpi	r25, 0x80	; 128
    3404:	81 05       	cpc	r24, r1
    3406:	61 f0       	breq	.+24     	; 0x3420 <pow+0x3c>
    3408:	80 38       	cpi	r24, 0x80	; 128
    340a:	bf ef       	ldi	r27, 0xFF	; 255
    340c:	9b 07       	cpc	r25, r27
    340e:	41 f0       	breq	.+16     	; 0x3420 <pow+0x3c>
    3410:	99 23       	and	r25, r25
    3412:	4a f5       	brpl	.+82     	; 0x3466 <pow+0x82>
    3414:	ff 3f       	cpi	r31, 0xFF	; 255
    3416:	e1 05       	cpc	r30, r1
    3418:	31 05       	cpc	r19, r1
    341a:	21 05       	cpc	r18, r1
    341c:	19 f1       	breq	.+70     	; 0x3464 <pow+0x80>
    341e:	e8 94       	clt
    3420:	08 94       	sec
    3422:	e7 95       	ror	r30
    3424:	d9 01       	movw	r26, r18
    3426:	aa 23       	and	r26, r26
    3428:	29 f4       	brne	.+10     	; 0x3434 <pow+0x50>
    342a:	ab 2f       	mov	r26, r27
    342c:	be 2f       	mov	r27, r30
    342e:	f8 5f       	subi	r31, 0xF8	; 248
    3430:	d0 f3       	brcs	.-12     	; 0x3426 <pow+0x42>
    3432:	10 c0       	rjmp	.+32     	; 0x3454 <pow+0x70>
    3434:	ff 5f       	subi	r31, 0xFF	; 255
    3436:	70 f4       	brcc	.+28     	; 0x3454 <pow+0x70>
    3438:	a6 95       	lsr	r26
    343a:	e0 f7       	brcc	.-8      	; 0x3434 <pow+0x50>
    343c:	f7 39       	cpi	r31, 0x97	; 151
    343e:	50 f0       	brcs	.+20     	; 0x3454 <pow+0x70>
    3440:	19 f0       	breq	.+6      	; 0x3448 <pow+0x64>
    3442:	ff 3a       	cpi	r31, 0xAF	; 175
    3444:	38 f4       	brcc	.+14     	; 0x3454 <pow+0x70>
    3446:	9f 77       	andi	r25, 0x7F	; 127
    3448:	9f 93       	push	r25
    344a:	0d d0       	rcall	.+26     	; 0x3466 <pow+0x82>
    344c:	0f 90       	pop	r0
    344e:	07 fc       	sbrc	r0, 7
    3450:	90 58       	subi	r25, 0x80	; 128
    3452:	08 95       	ret
    3454:	46 f0       	brts	.+16     	; 0x3466 <pow+0x82>
    3456:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	70 e0       	ldi	r23, 0x00	; 0
    345e:	80 e8       	ldi	r24, 0x80	; 128
    3460:	9f e3       	ldi	r25, 0x3F	; 63
    3462:	08 95       	ret
    3464:	4f e7       	ldi	r20, 0x7F	; 127
    3466:	9f 77       	andi	r25, 0x7F	; 127
    3468:	5f 93       	push	r21
    346a:	4f 93       	push	r20
    346c:	3f 93       	push	r19
    346e:	2f 93       	push	r18
    3470:	0e 94 09 19 	call	0x3212	; 0x3212 <log>
    3474:	2f 91       	pop	r18
    3476:	3f 91       	pop	r19
    3478:	4f 91       	pop	r20
    347a:	5f 91       	pop	r21
    347c:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    3480:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <exp>

00003484 <sin>:
    3484:	9f 93       	push	r25
    3486:	0e 94 3b 18 	call	0x3076	; 0x3076 <__fp_rempio2>
    348a:	0f 90       	pop	r0
    348c:	07 fc       	sbrc	r0, 7
    348e:	ee 5f       	subi	r30, 0xFE	; 254
    3490:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__fp_sinus>
    3494:	19 f4       	brne	.+6      	; 0x349c <sin+0x18>
    3496:	16 f4       	brtc	.+4      	; 0x349c <sin+0x18>
    3498:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__fp_nan>
    349c:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__fp_mpack>

000034a0 <sqrt>:
    34a0:	0e 94 91 18 	call	0x3122	; 0x3122 <__fp_splitA>
    34a4:	b8 f3       	brcs	.-18     	; 0x3494 <sin+0x10>
    34a6:	99 23       	and	r25, r25
    34a8:	c9 f3       	breq	.-14     	; 0x349c <sin+0x18>
    34aa:	b6 f3       	brts	.-20     	; 0x3498 <sin+0x14>
    34ac:	9f 57       	subi	r25, 0x7F	; 127
    34ae:	55 0b       	sbc	r21, r21
    34b0:	87 ff       	sbrs	r24, 7
    34b2:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__fp_norm2>
    34b6:	00 24       	eor	r0, r0
    34b8:	a0 e6       	ldi	r26, 0x60	; 96
    34ba:	40 ea       	ldi	r20, 0xA0	; 160
    34bc:	90 01       	movw	r18, r0
    34be:	80 58       	subi	r24, 0x80	; 128
    34c0:	56 95       	lsr	r21
    34c2:	97 95       	ror	r25
    34c4:	28 f4       	brcc	.+10     	; 0x34d0 <sqrt+0x30>
    34c6:	80 5c       	subi	r24, 0xC0	; 192
    34c8:	66 0f       	add	r22, r22
    34ca:	77 1f       	adc	r23, r23
    34cc:	88 1f       	adc	r24, r24
    34ce:	20 f0       	brcs	.+8      	; 0x34d8 <sqrt+0x38>
    34d0:	26 17       	cp	r18, r22
    34d2:	37 07       	cpc	r19, r23
    34d4:	48 07       	cpc	r20, r24
    34d6:	30 f4       	brcc	.+12     	; 0x34e4 <sqrt+0x44>
    34d8:	62 1b       	sub	r22, r18
    34da:	73 0b       	sbc	r23, r19
    34dc:	84 0b       	sbc	r24, r20
    34de:	20 29       	or	r18, r0
    34e0:	31 29       	or	r19, r1
    34e2:	4a 2b       	or	r20, r26
    34e4:	a6 95       	lsr	r26
    34e6:	17 94       	ror	r1
    34e8:	07 94       	ror	r0
    34ea:	20 25       	eor	r18, r0
    34ec:	31 25       	eor	r19, r1
    34ee:	4a 27       	eor	r20, r26
    34f0:	58 f7       	brcc	.-42     	; 0x34c8 <sqrt+0x28>
    34f2:	66 0f       	add	r22, r22
    34f4:	77 1f       	adc	r23, r23
    34f6:	88 1f       	adc	r24, r24
    34f8:	20 f0       	brcs	.+8      	; 0x3502 <sqrt+0x62>
    34fa:	26 17       	cp	r18, r22
    34fc:	37 07       	cpc	r19, r23
    34fe:	48 07       	cpc	r20, r24
    3500:	30 f4       	brcc	.+12     	; 0x350e <sqrt+0x6e>
    3502:	62 0b       	sbc	r22, r18
    3504:	73 0b       	sbc	r23, r19
    3506:	84 0b       	sbc	r24, r20
    3508:	20 0d       	add	r18, r0
    350a:	31 1d       	adc	r19, r1
    350c:	41 1d       	adc	r20, r1
    350e:	a0 95       	com	r26
    3510:	81 f7       	brne	.-32     	; 0x34f2 <sqrt+0x52>
    3512:	b9 01       	movw	r22, r18
    3514:	84 2f       	mov	r24, r20
    3516:	91 58       	subi	r25, 0x81	; 129
    3518:	88 0f       	add	r24, r24
    351a:	96 95       	lsr	r25
    351c:	87 95       	ror	r24
    351e:	08 95       	ret

00003520 <tan>:
    3520:	df 93       	push	r29
    3522:	d9 2f       	mov	r29, r25
    3524:	0e 94 3b 18 	call	0x3076	; 0x3076 <__fp_rempio2>
    3528:	e6 95       	lsr	r30
    352a:	d7 95       	ror	r29
    352c:	2a ed       	ldi	r18, 0xDA	; 218
    352e:	3f e0       	ldi	r19, 0x0F	; 15
    3530:	49 e4       	ldi	r20, 0x49	; 73
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	b3 3a       	cpi	r27, 0xA3	; 163
    3536:	62 07       	cpc	r22, r18
    3538:	73 07       	cpc	r23, r19
    353a:	84 07       	cpc	r24, r20
    353c:	95 07       	cpc	r25, r21
    353e:	d7 95       	ror	r29
    3540:	3a f0       	brmi	.+14     	; 0x3550 <tan+0x30>
    3542:	a2 ea       	ldi	r26, 0xA2	; 162
    3544:	49 ec       	ldi	r20, 0xC9	; 201
    3546:	90 68       	ori	r25, 0x80	; 128
    3548:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <__addsf3x>
    354c:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__fp_round>
    3550:	ea e0       	ldi	r30, 0x0A	; 10
    3552:	f2 e0       	ldi	r31, 0x02	; 2
    3554:	0e 94 ca 1a 	call	0x3594	; 0x3594 <__fp_powsodd>
    3558:	dd 0f       	add	r29, r29
    355a:	13 f0       	brvs	.+4      	; 0x3560 <tan+0x40>
    355c:	0e 94 b7 18 	call	0x316e	; 0x316e <inverse>
    3560:	dd 0f       	add	r29, r29
    3562:	0b f4       	brvc	.+2      	; 0x3566 <tan+0x46>
    3564:	90 58       	subi	r25, 0x80	; 128
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <__fp_mpack>:
    356a:	9f 3f       	cpi	r25, 0xFF	; 255
    356c:	31 f0       	breq	.+12     	; 0x357a <__fp_mpack_finite+0xc>

0000356e <__fp_mpack_finite>:
    356e:	91 50       	subi	r25, 0x01	; 1
    3570:	20 f4       	brcc	.+8      	; 0x357a <__fp_mpack_finite+0xc>
    3572:	87 95       	ror	r24
    3574:	77 95       	ror	r23
    3576:	67 95       	ror	r22
    3578:	b7 95       	ror	r27
    357a:	88 0f       	add	r24, r24
    357c:	91 1d       	adc	r25, r1
    357e:	96 95       	lsr	r25
    3580:	87 95       	ror	r24
    3582:	97 f9       	bld	r25, 7
    3584:	08 95       	ret

00003586 <__fp_norm2>:
    3586:	91 50       	subi	r25, 0x01	; 1
    3588:	50 40       	sbci	r21, 0x00	; 0
    358a:	66 0f       	add	r22, r22
    358c:	77 1f       	adc	r23, r23
    358e:	88 1f       	adc	r24, r24
    3590:	d2 f7       	brpl	.-12     	; 0x3586 <__fp_norm2>
    3592:	08 95       	ret

00003594 <__fp_powsodd>:
    3594:	9f 93       	push	r25
    3596:	8f 93       	push	r24
    3598:	7f 93       	push	r23
    359a:	6f 93       	push	r22
    359c:	ff 93       	push	r31
    359e:	ef 93       	push	r30
    35a0:	9b 01       	movw	r18, r22
    35a2:	ac 01       	movw	r20, r24
    35a4:	0e 94 85 19 	call	0x330a	; 0x330a <__mulsf3>
    35a8:	ef 91       	pop	r30
    35aa:	ff 91       	pop	r31
    35ac:	0e 94 04 18 	call	0x3008	; 0x3008 <__fp_powser>
    35b0:	2f 91       	pop	r18
    35b2:	3f 91       	pop	r19
    35b4:	4f 91       	pop	r20
    35b6:	5f 91       	pop	r21
    35b8:	0c 94 85 19 	jmp	0x330a	; 0x330a <__mulsf3>

000035bc <__tablejump2__>:
    35bc:	ee 0f       	add	r30, r30
    35be:	ff 1f       	adc	r31, r31
    35c0:	05 90       	lpm	r0, Z+
    35c2:	f4 91       	lpm	r31, Z
    35c4:	e0 2d       	mov	r30, r0
    35c6:	09 94       	ijmp

000035c8 <dtostrf>:
    35c8:	ef 92       	push	r14
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	e8 01       	movw	r28, r16
    35d4:	47 fd       	sbrc	r20, 7
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <dtostrf+0x14>
    35d8:	34 e0       	ldi	r19, 0x04	; 4
    35da:	01 c0       	rjmp	.+2      	; 0x35de <dtostrf+0x16>
    35dc:	34 e1       	ldi	r19, 0x14	; 20
    35de:	04 2e       	mov	r0, r20
    35e0:	00 0c       	add	r0, r0
    35e2:	55 0b       	sbc	r21, r21
    35e4:	57 ff       	sbrs	r21, 7
    35e6:	03 c0       	rjmp	.+6      	; 0x35ee <dtostrf+0x26>
    35e8:	51 95       	neg	r21
    35ea:	41 95       	neg	r20
    35ec:	51 09       	sbc	r21, r1
    35ee:	e3 2e       	mov	r14, r19
    35f0:	02 2f       	mov	r16, r18
    35f2:	24 2f       	mov	r18, r20
    35f4:	ae 01       	movw	r20, r28
    35f6:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <dtoa_prf>
    35fa:	ce 01       	movw	r24, r28
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	ef 90       	pop	r14
    3606:	08 95       	ret

00003608 <strcpy>:
    3608:	fb 01       	movw	r30, r22
    360a:	dc 01       	movw	r26, r24
    360c:	01 90       	ld	r0, Z+
    360e:	0d 92       	st	X+, r0
    3610:	00 20       	and	r0, r0
    3612:	e1 f7       	brne	.-8      	; 0x360c <strcpy+0x4>
    3614:	08 95       	ret

00003616 <sprintf>:
    3616:	ae e0       	ldi	r26, 0x0E	; 14
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	e1 e1       	ldi	r30, 0x11	; 17
    361c:	fb e1       	ldi	r31, 0x1B	; 27
    361e:	0c 94 fe 1f 	jmp	0x3ffc	; 0x3ffc <__prologue_saves__+0x1c>
    3622:	0d 89       	ldd	r16, Y+21	; 0x15
    3624:	1e 89       	ldd	r17, Y+22	; 0x16
    3626:	86 e0       	ldi	r24, 0x06	; 6
    3628:	8c 83       	std	Y+4, r24	; 0x04
    362a:	1a 83       	std	Y+2, r17	; 0x02
    362c:	09 83       	std	Y+1, r16	; 0x01
    362e:	8f ef       	ldi	r24, 0xFF	; 255
    3630:	9f e7       	ldi	r25, 0x7F	; 127
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	ae 01       	movw	r20, r28
    3638:	47 5e       	subi	r20, 0xE7	; 231
    363a:	5f 4f       	sbci	r21, 0xFF	; 255
    363c:	6f 89       	ldd	r22, Y+23	; 0x17
    363e:	78 8d       	ldd	r23, Y+24	; 0x18
    3640:	ce 01       	movw	r24, r28
    3642:	01 96       	adiw	r24, 0x01	; 1
    3644:	0e 94 2d 1b 	call	0x365a	; 0x365a <vfprintf>
    3648:	ef 81       	ldd	r30, Y+7	; 0x07
    364a:	f8 85       	ldd	r31, Y+8	; 0x08
    364c:	e0 0f       	add	r30, r16
    364e:	f1 1f       	adc	r31, r17
    3650:	10 82       	st	Z, r1
    3652:	2e 96       	adiw	r28, 0x0e	; 14
    3654:	e4 e0       	ldi	r30, 0x04	; 4
    3656:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <__epilogue_restores__+0x1c>

0000365a <vfprintf>:
    365a:	ab e0       	ldi	r26, 0x0B	; 11
    365c:	b0 e0       	ldi	r27, 0x00	; 0
    365e:	e3 e3       	ldi	r30, 0x33	; 51
    3660:	fb e1       	ldi	r31, 0x1B	; 27
    3662:	0c 94 f0 1f 	jmp	0x3fe0	; 0x3fe0 <__prologue_saves__>
    3666:	6c 01       	movw	r12, r24
    3668:	7b 01       	movw	r14, r22
    366a:	8a 01       	movw	r16, r20
    366c:	fc 01       	movw	r30, r24
    366e:	17 82       	std	Z+7, r1	; 0x07
    3670:	16 82       	std	Z+6, r1	; 0x06
    3672:	83 81       	ldd	r24, Z+3	; 0x03
    3674:	81 ff       	sbrs	r24, 1
    3676:	cc c1       	rjmp	.+920    	; 0x3a10 <vfprintf+0x3b6>
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	3c 01       	movw	r6, r24
    367e:	f6 01       	movw	r30, r12
    3680:	93 81       	ldd	r25, Z+3	; 0x03
    3682:	f7 01       	movw	r30, r14
    3684:	93 fd       	sbrc	r25, 3
    3686:	85 91       	lpm	r24, Z+
    3688:	93 ff       	sbrs	r25, 3
    368a:	81 91       	ld	r24, Z+
    368c:	7f 01       	movw	r14, r30
    368e:	88 23       	and	r24, r24
    3690:	09 f4       	brne	.+2      	; 0x3694 <vfprintf+0x3a>
    3692:	ba c1       	rjmp	.+884    	; 0x3a08 <vfprintf+0x3ae>
    3694:	85 32       	cpi	r24, 0x25	; 37
    3696:	39 f4       	brne	.+14     	; 0x36a6 <vfprintf+0x4c>
    3698:	93 fd       	sbrc	r25, 3
    369a:	85 91       	lpm	r24, Z+
    369c:	93 ff       	sbrs	r25, 3
    369e:	81 91       	ld	r24, Z+
    36a0:	7f 01       	movw	r14, r30
    36a2:	85 32       	cpi	r24, 0x25	; 37
    36a4:	29 f4       	brne	.+10     	; 0x36b0 <vfprintf+0x56>
    36a6:	b6 01       	movw	r22, r12
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    36ae:	e7 cf       	rjmp	.-50     	; 0x367e <vfprintf+0x24>
    36b0:	91 2c       	mov	r9, r1
    36b2:	21 2c       	mov	r2, r1
    36b4:	31 2c       	mov	r3, r1
    36b6:	ff e1       	ldi	r31, 0x1F	; 31
    36b8:	f3 15       	cp	r31, r3
    36ba:	d8 f0       	brcs	.+54     	; 0x36f2 <vfprintf+0x98>
    36bc:	8b 32       	cpi	r24, 0x2B	; 43
    36be:	79 f0       	breq	.+30     	; 0x36de <vfprintf+0x84>
    36c0:	38 f4       	brcc	.+14     	; 0x36d0 <vfprintf+0x76>
    36c2:	80 32       	cpi	r24, 0x20	; 32
    36c4:	79 f0       	breq	.+30     	; 0x36e4 <vfprintf+0x8a>
    36c6:	83 32       	cpi	r24, 0x23	; 35
    36c8:	a1 f4       	brne	.+40     	; 0x36f2 <vfprintf+0x98>
    36ca:	23 2d       	mov	r18, r3
    36cc:	20 61       	ori	r18, 0x10	; 16
    36ce:	1d c0       	rjmp	.+58     	; 0x370a <vfprintf+0xb0>
    36d0:	8d 32       	cpi	r24, 0x2D	; 45
    36d2:	61 f0       	breq	.+24     	; 0x36ec <vfprintf+0x92>
    36d4:	80 33       	cpi	r24, 0x30	; 48
    36d6:	69 f4       	brne	.+26     	; 0x36f2 <vfprintf+0x98>
    36d8:	23 2d       	mov	r18, r3
    36da:	21 60       	ori	r18, 0x01	; 1
    36dc:	16 c0       	rjmp	.+44     	; 0x370a <vfprintf+0xb0>
    36de:	83 2d       	mov	r24, r3
    36e0:	82 60       	ori	r24, 0x02	; 2
    36e2:	38 2e       	mov	r3, r24
    36e4:	e3 2d       	mov	r30, r3
    36e6:	e4 60       	ori	r30, 0x04	; 4
    36e8:	3e 2e       	mov	r3, r30
    36ea:	2a c0       	rjmp	.+84     	; 0x3740 <vfprintf+0xe6>
    36ec:	f3 2d       	mov	r31, r3
    36ee:	f8 60       	ori	r31, 0x08	; 8
    36f0:	1d c0       	rjmp	.+58     	; 0x372c <vfprintf+0xd2>
    36f2:	37 fc       	sbrc	r3, 7
    36f4:	2d c0       	rjmp	.+90     	; 0x3750 <vfprintf+0xf6>
    36f6:	20 ed       	ldi	r18, 0xD0	; 208
    36f8:	28 0f       	add	r18, r24
    36fa:	2a 30       	cpi	r18, 0x0A	; 10
    36fc:	40 f0       	brcs	.+16     	; 0x370e <vfprintf+0xb4>
    36fe:	8e 32       	cpi	r24, 0x2E	; 46
    3700:	b9 f4       	brne	.+46     	; 0x3730 <vfprintf+0xd6>
    3702:	36 fc       	sbrc	r3, 6
    3704:	81 c1       	rjmp	.+770    	; 0x3a08 <vfprintf+0x3ae>
    3706:	23 2d       	mov	r18, r3
    3708:	20 64       	ori	r18, 0x40	; 64
    370a:	32 2e       	mov	r3, r18
    370c:	19 c0       	rjmp	.+50     	; 0x3740 <vfprintf+0xe6>
    370e:	36 fe       	sbrs	r3, 6
    3710:	06 c0       	rjmp	.+12     	; 0x371e <vfprintf+0xc4>
    3712:	8a e0       	ldi	r24, 0x0A	; 10
    3714:	98 9e       	mul	r9, r24
    3716:	20 0d       	add	r18, r0
    3718:	11 24       	eor	r1, r1
    371a:	92 2e       	mov	r9, r18
    371c:	11 c0       	rjmp	.+34     	; 0x3740 <vfprintf+0xe6>
    371e:	ea e0       	ldi	r30, 0x0A	; 10
    3720:	2e 9e       	mul	r2, r30
    3722:	20 0d       	add	r18, r0
    3724:	11 24       	eor	r1, r1
    3726:	22 2e       	mov	r2, r18
    3728:	f3 2d       	mov	r31, r3
    372a:	f0 62       	ori	r31, 0x20	; 32
    372c:	3f 2e       	mov	r3, r31
    372e:	08 c0       	rjmp	.+16     	; 0x3740 <vfprintf+0xe6>
    3730:	8c 36       	cpi	r24, 0x6C	; 108
    3732:	21 f4       	brne	.+8      	; 0x373c <vfprintf+0xe2>
    3734:	83 2d       	mov	r24, r3
    3736:	80 68       	ori	r24, 0x80	; 128
    3738:	38 2e       	mov	r3, r24
    373a:	02 c0       	rjmp	.+4      	; 0x3740 <vfprintf+0xe6>
    373c:	88 36       	cpi	r24, 0x68	; 104
    373e:	41 f4       	brne	.+16     	; 0x3750 <vfprintf+0xf6>
    3740:	f7 01       	movw	r30, r14
    3742:	93 fd       	sbrc	r25, 3
    3744:	85 91       	lpm	r24, Z+
    3746:	93 ff       	sbrs	r25, 3
    3748:	81 91       	ld	r24, Z+
    374a:	7f 01       	movw	r14, r30
    374c:	81 11       	cpse	r24, r1
    374e:	b3 cf       	rjmp	.-154    	; 0x36b6 <vfprintf+0x5c>
    3750:	98 2f       	mov	r25, r24
    3752:	9f 7d       	andi	r25, 0xDF	; 223
    3754:	95 54       	subi	r25, 0x45	; 69
    3756:	93 30       	cpi	r25, 0x03	; 3
    3758:	28 f4       	brcc	.+10     	; 0x3764 <vfprintf+0x10a>
    375a:	0c 5f       	subi	r16, 0xFC	; 252
    375c:	1f 4f       	sbci	r17, 0xFF	; 255
    375e:	9f e3       	ldi	r25, 0x3F	; 63
    3760:	99 83       	std	Y+1, r25	; 0x01
    3762:	0d c0       	rjmp	.+26     	; 0x377e <vfprintf+0x124>
    3764:	83 36       	cpi	r24, 0x63	; 99
    3766:	31 f0       	breq	.+12     	; 0x3774 <vfprintf+0x11a>
    3768:	83 37       	cpi	r24, 0x73	; 115
    376a:	71 f0       	breq	.+28     	; 0x3788 <vfprintf+0x12e>
    376c:	83 35       	cpi	r24, 0x53	; 83
    376e:	09 f0       	breq	.+2      	; 0x3772 <vfprintf+0x118>
    3770:	59 c0       	rjmp	.+178    	; 0x3824 <vfprintf+0x1ca>
    3772:	21 c0       	rjmp	.+66     	; 0x37b6 <vfprintf+0x15c>
    3774:	f8 01       	movw	r30, r16
    3776:	80 81       	ld	r24, Z
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	0e 5f       	subi	r16, 0xFE	; 254
    377c:	1f 4f       	sbci	r17, 0xFF	; 255
    377e:	88 24       	eor	r8, r8
    3780:	83 94       	inc	r8
    3782:	91 2c       	mov	r9, r1
    3784:	53 01       	movw	r10, r6
    3786:	13 c0       	rjmp	.+38     	; 0x37ae <vfprintf+0x154>
    3788:	28 01       	movw	r4, r16
    378a:	f2 e0       	ldi	r31, 0x02	; 2
    378c:	4f 0e       	add	r4, r31
    378e:	51 1c       	adc	r5, r1
    3790:	f8 01       	movw	r30, r16
    3792:	a0 80       	ld	r10, Z
    3794:	b1 80       	ldd	r11, Z+1	; 0x01
    3796:	36 fe       	sbrs	r3, 6
    3798:	03 c0       	rjmp	.+6      	; 0x37a0 <vfprintf+0x146>
    379a:	69 2d       	mov	r22, r9
    379c:	70 e0       	ldi	r23, 0x00	; 0
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <vfprintf+0x14a>
    37a0:	6f ef       	ldi	r22, 0xFF	; 255
    37a2:	7f ef       	ldi	r23, 0xFF	; 255
    37a4:	c5 01       	movw	r24, r10
    37a6:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <strnlen>
    37aa:	4c 01       	movw	r8, r24
    37ac:	82 01       	movw	r16, r4
    37ae:	f3 2d       	mov	r31, r3
    37b0:	ff 77       	andi	r31, 0x7F	; 127
    37b2:	3f 2e       	mov	r3, r31
    37b4:	16 c0       	rjmp	.+44     	; 0x37e2 <vfprintf+0x188>
    37b6:	28 01       	movw	r4, r16
    37b8:	22 e0       	ldi	r18, 0x02	; 2
    37ba:	42 0e       	add	r4, r18
    37bc:	51 1c       	adc	r5, r1
    37be:	f8 01       	movw	r30, r16
    37c0:	a0 80       	ld	r10, Z
    37c2:	b1 80       	ldd	r11, Z+1	; 0x01
    37c4:	36 fe       	sbrs	r3, 6
    37c6:	03 c0       	rjmp	.+6      	; 0x37ce <vfprintf+0x174>
    37c8:	69 2d       	mov	r22, r9
    37ca:	70 e0       	ldi	r23, 0x00	; 0
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <vfprintf+0x178>
    37ce:	6f ef       	ldi	r22, 0xFF	; 255
    37d0:	7f ef       	ldi	r23, 0xFF	; 255
    37d2:	c5 01       	movw	r24, r10
    37d4:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <strnlen_P>
    37d8:	4c 01       	movw	r8, r24
    37da:	f3 2d       	mov	r31, r3
    37dc:	f0 68       	ori	r31, 0x80	; 128
    37de:	3f 2e       	mov	r3, r31
    37e0:	82 01       	movw	r16, r4
    37e2:	33 fc       	sbrc	r3, 3
    37e4:	1b c0       	rjmp	.+54     	; 0x381c <vfprintf+0x1c2>
    37e6:	82 2d       	mov	r24, r2
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	88 16       	cp	r8, r24
    37ec:	99 06       	cpc	r9, r25
    37ee:	b0 f4       	brcc	.+44     	; 0x381c <vfprintf+0x1c2>
    37f0:	b6 01       	movw	r22, r12
    37f2:	80 e2       	ldi	r24, 0x20	; 32
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    37fa:	2a 94       	dec	r2
    37fc:	f4 cf       	rjmp	.-24     	; 0x37e6 <vfprintf+0x18c>
    37fe:	f5 01       	movw	r30, r10
    3800:	37 fc       	sbrc	r3, 7
    3802:	85 91       	lpm	r24, Z+
    3804:	37 fe       	sbrs	r3, 7
    3806:	81 91       	ld	r24, Z+
    3808:	5f 01       	movw	r10, r30
    380a:	b6 01       	movw	r22, r12
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    3812:	21 10       	cpse	r2, r1
    3814:	2a 94       	dec	r2
    3816:	21 e0       	ldi	r18, 0x01	; 1
    3818:	82 1a       	sub	r8, r18
    381a:	91 08       	sbc	r9, r1
    381c:	81 14       	cp	r8, r1
    381e:	91 04       	cpc	r9, r1
    3820:	71 f7       	brne	.-36     	; 0x37fe <vfprintf+0x1a4>
    3822:	e8 c0       	rjmp	.+464    	; 0x39f4 <vfprintf+0x39a>
    3824:	84 36       	cpi	r24, 0x64	; 100
    3826:	11 f0       	breq	.+4      	; 0x382c <vfprintf+0x1d2>
    3828:	89 36       	cpi	r24, 0x69	; 105
    382a:	41 f5       	brne	.+80     	; 0x387c <vfprintf+0x222>
    382c:	f8 01       	movw	r30, r16
    382e:	37 fe       	sbrs	r3, 7
    3830:	07 c0       	rjmp	.+14     	; 0x3840 <vfprintf+0x1e6>
    3832:	60 81       	ld	r22, Z
    3834:	71 81       	ldd	r23, Z+1	; 0x01
    3836:	82 81       	ldd	r24, Z+2	; 0x02
    3838:	93 81       	ldd	r25, Z+3	; 0x03
    383a:	0c 5f       	subi	r16, 0xFC	; 252
    383c:	1f 4f       	sbci	r17, 0xFF	; 255
    383e:	08 c0       	rjmp	.+16     	; 0x3850 <vfprintf+0x1f6>
    3840:	60 81       	ld	r22, Z
    3842:	71 81       	ldd	r23, Z+1	; 0x01
    3844:	07 2e       	mov	r0, r23
    3846:	00 0c       	add	r0, r0
    3848:	88 0b       	sbc	r24, r24
    384a:	99 0b       	sbc	r25, r25
    384c:	0e 5f       	subi	r16, 0xFE	; 254
    384e:	1f 4f       	sbci	r17, 0xFF	; 255
    3850:	f3 2d       	mov	r31, r3
    3852:	ff 76       	andi	r31, 0x6F	; 111
    3854:	3f 2e       	mov	r3, r31
    3856:	97 ff       	sbrs	r25, 7
    3858:	09 c0       	rjmp	.+18     	; 0x386c <vfprintf+0x212>
    385a:	90 95       	com	r25
    385c:	80 95       	com	r24
    385e:	70 95       	com	r23
    3860:	61 95       	neg	r22
    3862:	7f 4f       	sbci	r23, 0xFF	; 255
    3864:	8f 4f       	sbci	r24, 0xFF	; 255
    3866:	9f 4f       	sbci	r25, 0xFF	; 255
    3868:	f0 68       	ori	r31, 0x80	; 128
    386a:	3f 2e       	mov	r3, r31
    386c:	2a e0       	ldi	r18, 0x0A	; 10
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	a3 01       	movw	r20, r6
    3872:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__ultoa_invert>
    3876:	88 2e       	mov	r8, r24
    3878:	86 18       	sub	r8, r6
    387a:	45 c0       	rjmp	.+138    	; 0x3906 <vfprintf+0x2ac>
    387c:	85 37       	cpi	r24, 0x75	; 117
    387e:	31 f4       	brne	.+12     	; 0x388c <vfprintf+0x232>
    3880:	23 2d       	mov	r18, r3
    3882:	2f 7e       	andi	r18, 0xEF	; 239
    3884:	b2 2e       	mov	r11, r18
    3886:	2a e0       	ldi	r18, 0x0A	; 10
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	25 c0       	rjmp	.+74     	; 0x38d6 <vfprintf+0x27c>
    388c:	93 2d       	mov	r25, r3
    388e:	99 7f       	andi	r25, 0xF9	; 249
    3890:	b9 2e       	mov	r11, r25
    3892:	8f 36       	cpi	r24, 0x6F	; 111
    3894:	c1 f0       	breq	.+48     	; 0x38c6 <vfprintf+0x26c>
    3896:	18 f4       	brcc	.+6      	; 0x389e <vfprintf+0x244>
    3898:	88 35       	cpi	r24, 0x58	; 88
    389a:	79 f0       	breq	.+30     	; 0x38ba <vfprintf+0x260>
    389c:	b5 c0       	rjmp	.+362    	; 0x3a08 <vfprintf+0x3ae>
    389e:	80 37       	cpi	r24, 0x70	; 112
    38a0:	19 f0       	breq	.+6      	; 0x38a8 <vfprintf+0x24e>
    38a2:	88 37       	cpi	r24, 0x78	; 120
    38a4:	21 f0       	breq	.+8      	; 0x38ae <vfprintf+0x254>
    38a6:	b0 c0       	rjmp	.+352    	; 0x3a08 <vfprintf+0x3ae>
    38a8:	e9 2f       	mov	r30, r25
    38aa:	e0 61       	ori	r30, 0x10	; 16
    38ac:	be 2e       	mov	r11, r30
    38ae:	b4 fe       	sbrs	r11, 4
    38b0:	0d c0       	rjmp	.+26     	; 0x38cc <vfprintf+0x272>
    38b2:	fb 2d       	mov	r31, r11
    38b4:	f4 60       	ori	r31, 0x04	; 4
    38b6:	bf 2e       	mov	r11, r31
    38b8:	09 c0       	rjmp	.+18     	; 0x38cc <vfprintf+0x272>
    38ba:	34 fe       	sbrs	r3, 4
    38bc:	0a c0       	rjmp	.+20     	; 0x38d2 <vfprintf+0x278>
    38be:	29 2f       	mov	r18, r25
    38c0:	26 60       	ori	r18, 0x06	; 6
    38c2:	b2 2e       	mov	r11, r18
    38c4:	06 c0       	rjmp	.+12     	; 0x38d2 <vfprintf+0x278>
    38c6:	28 e0       	ldi	r18, 0x08	; 8
    38c8:	30 e0       	ldi	r19, 0x00	; 0
    38ca:	05 c0       	rjmp	.+10     	; 0x38d6 <vfprintf+0x27c>
    38cc:	20 e1       	ldi	r18, 0x10	; 16
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	02 c0       	rjmp	.+4      	; 0x38d6 <vfprintf+0x27c>
    38d2:	20 e1       	ldi	r18, 0x10	; 16
    38d4:	32 e0       	ldi	r19, 0x02	; 2
    38d6:	f8 01       	movw	r30, r16
    38d8:	b7 fe       	sbrs	r11, 7
    38da:	07 c0       	rjmp	.+14     	; 0x38ea <vfprintf+0x290>
    38dc:	60 81       	ld	r22, Z
    38de:	71 81       	ldd	r23, Z+1	; 0x01
    38e0:	82 81       	ldd	r24, Z+2	; 0x02
    38e2:	93 81       	ldd	r25, Z+3	; 0x03
    38e4:	0c 5f       	subi	r16, 0xFC	; 252
    38e6:	1f 4f       	sbci	r17, 0xFF	; 255
    38e8:	06 c0       	rjmp	.+12     	; 0x38f6 <vfprintf+0x29c>
    38ea:	60 81       	ld	r22, Z
    38ec:	71 81       	ldd	r23, Z+1	; 0x01
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	0e 5f       	subi	r16, 0xFE	; 254
    38f4:	1f 4f       	sbci	r17, 0xFF	; 255
    38f6:	a3 01       	movw	r20, r6
    38f8:	0e 94 92 1f 	call	0x3f24	; 0x3f24 <__ultoa_invert>
    38fc:	88 2e       	mov	r8, r24
    38fe:	86 18       	sub	r8, r6
    3900:	fb 2d       	mov	r31, r11
    3902:	ff 77       	andi	r31, 0x7F	; 127
    3904:	3f 2e       	mov	r3, r31
    3906:	36 fe       	sbrs	r3, 6
    3908:	0d c0       	rjmp	.+26     	; 0x3924 <vfprintf+0x2ca>
    390a:	23 2d       	mov	r18, r3
    390c:	2e 7f       	andi	r18, 0xFE	; 254
    390e:	a2 2e       	mov	r10, r18
    3910:	89 14       	cp	r8, r9
    3912:	58 f4       	brcc	.+22     	; 0x392a <vfprintf+0x2d0>
    3914:	34 fe       	sbrs	r3, 4
    3916:	0b c0       	rjmp	.+22     	; 0x392e <vfprintf+0x2d4>
    3918:	32 fc       	sbrc	r3, 2
    391a:	09 c0       	rjmp	.+18     	; 0x392e <vfprintf+0x2d4>
    391c:	83 2d       	mov	r24, r3
    391e:	8e 7e       	andi	r24, 0xEE	; 238
    3920:	a8 2e       	mov	r10, r24
    3922:	05 c0       	rjmp	.+10     	; 0x392e <vfprintf+0x2d4>
    3924:	b8 2c       	mov	r11, r8
    3926:	a3 2c       	mov	r10, r3
    3928:	03 c0       	rjmp	.+6      	; 0x3930 <vfprintf+0x2d6>
    392a:	b8 2c       	mov	r11, r8
    392c:	01 c0       	rjmp	.+2      	; 0x3930 <vfprintf+0x2d6>
    392e:	b9 2c       	mov	r11, r9
    3930:	a4 fe       	sbrs	r10, 4
    3932:	0f c0       	rjmp	.+30     	; 0x3952 <vfprintf+0x2f8>
    3934:	fe 01       	movw	r30, r28
    3936:	e8 0d       	add	r30, r8
    3938:	f1 1d       	adc	r31, r1
    393a:	80 81       	ld	r24, Z
    393c:	80 33       	cpi	r24, 0x30	; 48
    393e:	21 f4       	brne	.+8      	; 0x3948 <vfprintf+0x2ee>
    3940:	9a 2d       	mov	r25, r10
    3942:	99 7e       	andi	r25, 0xE9	; 233
    3944:	a9 2e       	mov	r10, r25
    3946:	09 c0       	rjmp	.+18     	; 0x395a <vfprintf+0x300>
    3948:	a2 fe       	sbrs	r10, 2
    394a:	06 c0       	rjmp	.+12     	; 0x3958 <vfprintf+0x2fe>
    394c:	b3 94       	inc	r11
    394e:	b3 94       	inc	r11
    3950:	04 c0       	rjmp	.+8      	; 0x395a <vfprintf+0x300>
    3952:	8a 2d       	mov	r24, r10
    3954:	86 78       	andi	r24, 0x86	; 134
    3956:	09 f0       	breq	.+2      	; 0x395a <vfprintf+0x300>
    3958:	b3 94       	inc	r11
    395a:	a3 fc       	sbrc	r10, 3
    395c:	11 c0       	rjmp	.+34     	; 0x3980 <vfprintf+0x326>
    395e:	a0 fe       	sbrs	r10, 0
    3960:	06 c0       	rjmp	.+12     	; 0x396e <vfprintf+0x314>
    3962:	b2 14       	cp	r11, r2
    3964:	88 f4       	brcc	.+34     	; 0x3988 <vfprintf+0x32e>
    3966:	28 0c       	add	r2, r8
    3968:	92 2c       	mov	r9, r2
    396a:	9b 18       	sub	r9, r11
    396c:	0e c0       	rjmp	.+28     	; 0x398a <vfprintf+0x330>
    396e:	b2 14       	cp	r11, r2
    3970:	60 f4       	brcc	.+24     	; 0x398a <vfprintf+0x330>
    3972:	b6 01       	movw	r22, r12
    3974:	80 e2       	ldi	r24, 0x20	; 32
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    397c:	b3 94       	inc	r11
    397e:	f7 cf       	rjmp	.-18     	; 0x396e <vfprintf+0x314>
    3980:	b2 14       	cp	r11, r2
    3982:	18 f4       	brcc	.+6      	; 0x398a <vfprintf+0x330>
    3984:	2b 18       	sub	r2, r11
    3986:	02 c0       	rjmp	.+4      	; 0x398c <vfprintf+0x332>
    3988:	98 2c       	mov	r9, r8
    398a:	21 2c       	mov	r2, r1
    398c:	a4 fe       	sbrs	r10, 4
    398e:	10 c0       	rjmp	.+32     	; 0x39b0 <vfprintf+0x356>
    3990:	b6 01       	movw	r22, r12
    3992:	80 e3       	ldi	r24, 0x30	; 48
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    399a:	a2 fe       	sbrs	r10, 2
    399c:	17 c0       	rjmp	.+46     	; 0x39cc <vfprintf+0x372>
    399e:	a1 fc       	sbrc	r10, 1
    39a0:	03 c0       	rjmp	.+6      	; 0x39a8 <vfprintf+0x34e>
    39a2:	88 e7       	ldi	r24, 0x78	; 120
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	02 c0       	rjmp	.+4      	; 0x39ac <vfprintf+0x352>
    39a8:	88 e5       	ldi	r24, 0x58	; 88
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	b6 01       	movw	r22, r12
    39ae:	0c c0       	rjmp	.+24     	; 0x39c8 <vfprintf+0x36e>
    39b0:	8a 2d       	mov	r24, r10
    39b2:	86 78       	andi	r24, 0x86	; 134
    39b4:	59 f0       	breq	.+22     	; 0x39cc <vfprintf+0x372>
    39b6:	a1 fe       	sbrs	r10, 1
    39b8:	02 c0       	rjmp	.+4      	; 0x39be <vfprintf+0x364>
    39ba:	8b e2       	ldi	r24, 0x2B	; 43
    39bc:	01 c0       	rjmp	.+2      	; 0x39c0 <vfprintf+0x366>
    39be:	80 e2       	ldi	r24, 0x20	; 32
    39c0:	a7 fc       	sbrc	r10, 7
    39c2:	8d e2       	ldi	r24, 0x2D	; 45
    39c4:	b6 01       	movw	r22, r12
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    39cc:	89 14       	cp	r8, r9
    39ce:	38 f4       	brcc	.+14     	; 0x39de <vfprintf+0x384>
    39d0:	b6 01       	movw	r22, r12
    39d2:	80 e3       	ldi	r24, 0x30	; 48
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    39da:	9a 94       	dec	r9
    39dc:	f7 cf       	rjmp	.-18     	; 0x39cc <vfprintf+0x372>
    39de:	8a 94       	dec	r8
    39e0:	f3 01       	movw	r30, r6
    39e2:	e8 0d       	add	r30, r8
    39e4:	f1 1d       	adc	r31, r1
    39e6:	80 81       	ld	r24, Z
    39e8:	b6 01       	movw	r22, r12
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    39f0:	81 10       	cpse	r8, r1
    39f2:	f5 cf       	rjmp	.-22     	; 0x39de <vfprintf+0x384>
    39f4:	22 20       	and	r2, r2
    39f6:	09 f4       	brne	.+2      	; 0x39fa <vfprintf+0x3a0>
    39f8:	42 ce       	rjmp	.-892    	; 0x367e <vfprintf+0x24>
    39fa:	b6 01       	movw	r22, r12
    39fc:	80 e2       	ldi	r24, 0x20	; 32
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	0e 94 56 1f 	call	0x3eac	; 0x3eac <fputc>
    3a04:	2a 94       	dec	r2
    3a06:	f6 cf       	rjmp	.-20     	; 0x39f4 <vfprintf+0x39a>
    3a08:	f6 01       	movw	r30, r12
    3a0a:	86 81       	ldd	r24, Z+6	; 0x06
    3a0c:	97 81       	ldd	r25, Z+7	; 0x07
    3a0e:	02 c0       	rjmp	.+4      	; 0x3a14 <vfprintf+0x3ba>
    3a10:	8f ef       	ldi	r24, 0xFF	; 255
    3a12:	9f ef       	ldi	r25, 0xFF	; 255
    3a14:	2b 96       	adiw	r28, 0x0b	; 11
    3a16:	e2 e1       	ldi	r30, 0x12	; 18
    3a18:	0c 94 0c 20 	jmp	0x4018	; 0x4018 <__epilogue_restores__>

00003a1c <dtoa_prf>:
    3a1c:	a9 e0       	ldi	r26, 0x09	; 9
    3a1e:	b0 e0       	ldi	r27, 0x00	; 0
    3a20:	e4 e1       	ldi	r30, 0x14	; 20
    3a22:	fd e1       	ldi	r31, 0x1D	; 29
    3a24:	0c 94 f6 1f 	jmp	0x3fec	; 0x3fec <__prologue_saves__+0xc>
    3a28:	6a 01       	movw	r12, r20
    3a2a:	12 2f       	mov	r17, r18
    3a2c:	b0 2e       	mov	r11, r16
    3a2e:	2b e3       	ldi	r18, 0x3B	; 59
    3a30:	20 17       	cp	r18, r16
    3a32:	20 f0       	brcs	.+8      	; 0x3a3c <dtoa_prf+0x20>
    3a34:	ff 24       	eor	r15, r15
    3a36:	f3 94       	inc	r15
    3a38:	f0 0e       	add	r15, r16
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <dtoa_prf+0x24>
    3a3c:	2c e3       	ldi	r18, 0x3C	; 60
    3a3e:	f2 2e       	mov	r15, r18
    3a40:	0f 2d       	mov	r16, r15
    3a42:	27 e0       	ldi	r18, 0x07	; 7
    3a44:	ae 01       	movw	r20, r28
    3a46:	4f 5f       	subi	r20, 0xFF	; 255
    3a48:	5f 4f       	sbci	r21, 0xFF	; 255
    3a4a:	0e 94 68 1e 	call	0x3cd0	; 0x3cd0 <__ftoa_engine>
    3a4e:	bc 01       	movw	r22, r24
    3a50:	49 81       	ldd	r20, Y+1	; 0x01
    3a52:	84 2f       	mov	r24, r20
    3a54:	89 70       	andi	r24, 0x09	; 9
    3a56:	81 30       	cpi	r24, 0x01	; 1
    3a58:	31 f0       	breq	.+12     	; 0x3a66 <dtoa_prf+0x4a>
    3a5a:	e1 fc       	sbrc	r14, 1
    3a5c:	06 c0       	rjmp	.+12     	; 0x3a6a <dtoa_prf+0x4e>
    3a5e:	e0 fe       	sbrs	r14, 0
    3a60:	06 c0       	rjmp	.+12     	; 0x3a6e <dtoa_prf+0x52>
    3a62:	90 e2       	ldi	r25, 0x20	; 32
    3a64:	05 c0       	rjmp	.+10     	; 0x3a70 <dtoa_prf+0x54>
    3a66:	9d e2       	ldi	r25, 0x2D	; 45
    3a68:	03 c0       	rjmp	.+6      	; 0x3a70 <dtoa_prf+0x54>
    3a6a:	9b e2       	ldi	r25, 0x2B	; 43
    3a6c:	01 c0       	rjmp	.+2      	; 0x3a70 <dtoa_prf+0x54>
    3a6e:	90 e0       	ldi	r25, 0x00	; 0
    3a70:	5e 2d       	mov	r21, r14
    3a72:	50 71       	andi	r21, 0x10	; 16
    3a74:	43 ff       	sbrs	r20, 3
    3a76:	3c c0       	rjmp	.+120    	; 0x3af0 <dtoa_prf+0xd4>
    3a78:	91 11       	cpse	r25, r1
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <dtoa_prf+0x64>
    3a7c:	83 e0       	ldi	r24, 0x03	; 3
    3a7e:	01 c0       	rjmp	.+2      	; 0x3a82 <dtoa_prf+0x66>
    3a80:	84 e0       	ldi	r24, 0x04	; 4
    3a82:	81 17       	cp	r24, r17
    3a84:	18 f4       	brcc	.+6      	; 0x3a8c <dtoa_prf+0x70>
    3a86:	21 2f       	mov	r18, r17
    3a88:	28 1b       	sub	r18, r24
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <dtoa_prf+0x72>
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	51 11       	cpse	r21, r1
    3a90:	0b c0       	rjmp	.+22     	; 0x3aa8 <dtoa_prf+0x8c>
    3a92:	f6 01       	movw	r30, r12
    3a94:	82 2f       	mov	r24, r18
    3a96:	30 e2       	ldi	r19, 0x20	; 32
    3a98:	88 23       	and	r24, r24
    3a9a:	19 f0       	breq	.+6      	; 0x3aa2 <dtoa_prf+0x86>
    3a9c:	31 93       	st	Z+, r19
    3a9e:	81 50       	subi	r24, 0x01	; 1
    3aa0:	fb cf       	rjmp	.-10     	; 0x3a98 <dtoa_prf+0x7c>
    3aa2:	c2 0e       	add	r12, r18
    3aa4:	d1 1c       	adc	r13, r1
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	99 23       	and	r25, r25
    3aaa:	29 f0       	breq	.+10     	; 0x3ab6 <dtoa_prf+0x9a>
    3aac:	d6 01       	movw	r26, r12
    3aae:	9c 93       	st	X, r25
    3ab0:	f6 01       	movw	r30, r12
    3ab2:	31 96       	adiw	r30, 0x01	; 1
    3ab4:	6f 01       	movw	r12, r30
    3ab6:	c6 01       	movw	r24, r12
    3ab8:	03 96       	adiw	r24, 0x03	; 3
    3aba:	e2 fe       	sbrs	r14, 2
    3abc:	0a c0       	rjmp	.+20     	; 0x3ad2 <dtoa_prf+0xb6>
    3abe:	3e e4       	ldi	r19, 0x4E	; 78
    3ac0:	d6 01       	movw	r26, r12
    3ac2:	3c 93       	st	X, r19
    3ac4:	41 e4       	ldi	r20, 0x41	; 65
    3ac6:	11 96       	adiw	r26, 0x01	; 1
    3ac8:	4c 93       	st	X, r20
    3aca:	11 97       	sbiw	r26, 0x01	; 1
    3acc:	12 96       	adiw	r26, 0x02	; 2
    3ace:	3c 93       	st	X, r19
    3ad0:	06 c0       	rjmp	.+12     	; 0x3ade <dtoa_prf+0xc2>
    3ad2:	3e e6       	ldi	r19, 0x6E	; 110
    3ad4:	f6 01       	movw	r30, r12
    3ad6:	30 83       	st	Z, r19
    3ad8:	41 e6       	ldi	r20, 0x61	; 97
    3ada:	41 83       	std	Z+1, r20	; 0x01
    3adc:	32 83       	std	Z+2, r19	; 0x02
    3ade:	fc 01       	movw	r30, r24
    3ae0:	32 2f       	mov	r19, r18
    3ae2:	40 e2       	ldi	r20, 0x20	; 32
    3ae4:	33 23       	and	r19, r19
    3ae6:	09 f4       	brne	.+2      	; 0x3aea <dtoa_prf+0xce>
    3ae8:	42 c0       	rjmp	.+132    	; 0x3b6e <dtoa_prf+0x152>
    3aea:	41 93       	st	Z+, r20
    3aec:	31 50       	subi	r19, 0x01	; 1
    3aee:	fa cf       	rjmp	.-12     	; 0x3ae4 <dtoa_prf+0xc8>
    3af0:	42 ff       	sbrs	r20, 2
    3af2:	44 c0       	rjmp	.+136    	; 0x3b7c <dtoa_prf+0x160>
    3af4:	91 11       	cpse	r25, r1
    3af6:	02 c0       	rjmp	.+4      	; 0x3afc <dtoa_prf+0xe0>
    3af8:	83 e0       	ldi	r24, 0x03	; 3
    3afa:	01 c0       	rjmp	.+2      	; 0x3afe <dtoa_prf+0xe2>
    3afc:	84 e0       	ldi	r24, 0x04	; 4
    3afe:	81 17       	cp	r24, r17
    3b00:	18 f4       	brcc	.+6      	; 0x3b08 <dtoa_prf+0xec>
    3b02:	21 2f       	mov	r18, r17
    3b04:	28 1b       	sub	r18, r24
    3b06:	01 c0       	rjmp	.+2      	; 0x3b0a <dtoa_prf+0xee>
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	51 11       	cpse	r21, r1
    3b0c:	0b c0       	rjmp	.+22     	; 0x3b24 <dtoa_prf+0x108>
    3b0e:	f6 01       	movw	r30, r12
    3b10:	82 2f       	mov	r24, r18
    3b12:	30 e2       	ldi	r19, 0x20	; 32
    3b14:	88 23       	and	r24, r24
    3b16:	19 f0       	breq	.+6      	; 0x3b1e <dtoa_prf+0x102>
    3b18:	31 93       	st	Z+, r19
    3b1a:	81 50       	subi	r24, 0x01	; 1
    3b1c:	fb cf       	rjmp	.-10     	; 0x3b14 <dtoa_prf+0xf8>
    3b1e:	c2 0e       	add	r12, r18
    3b20:	d1 1c       	adc	r13, r1
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	99 23       	and	r25, r25
    3b26:	29 f0       	breq	.+10     	; 0x3b32 <dtoa_prf+0x116>
    3b28:	d6 01       	movw	r26, r12
    3b2a:	9c 93       	st	X, r25
    3b2c:	f6 01       	movw	r30, r12
    3b2e:	31 96       	adiw	r30, 0x01	; 1
    3b30:	6f 01       	movw	r12, r30
    3b32:	c6 01       	movw	r24, r12
    3b34:	03 96       	adiw	r24, 0x03	; 3
    3b36:	e2 fe       	sbrs	r14, 2
    3b38:	0b c0       	rjmp	.+22     	; 0x3b50 <dtoa_prf+0x134>
    3b3a:	39 e4       	ldi	r19, 0x49	; 73
    3b3c:	d6 01       	movw	r26, r12
    3b3e:	3c 93       	st	X, r19
    3b40:	3e e4       	ldi	r19, 0x4E	; 78
    3b42:	11 96       	adiw	r26, 0x01	; 1
    3b44:	3c 93       	st	X, r19
    3b46:	11 97       	sbiw	r26, 0x01	; 1
    3b48:	36 e4       	ldi	r19, 0x46	; 70
    3b4a:	12 96       	adiw	r26, 0x02	; 2
    3b4c:	3c 93       	st	X, r19
    3b4e:	07 c0       	rjmp	.+14     	; 0x3b5e <dtoa_prf+0x142>
    3b50:	39 e6       	ldi	r19, 0x69	; 105
    3b52:	f6 01       	movw	r30, r12
    3b54:	30 83       	st	Z, r19
    3b56:	3e e6       	ldi	r19, 0x6E	; 110
    3b58:	31 83       	std	Z+1, r19	; 0x01
    3b5a:	36 e6       	ldi	r19, 0x66	; 102
    3b5c:	32 83       	std	Z+2, r19	; 0x02
    3b5e:	fc 01       	movw	r30, r24
    3b60:	32 2f       	mov	r19, r18
    3b62:	40 e2       	ldi	r20, 0x20	; 32
    3b64:	33 23       	and	r19, r19
    3b66:	19 f0       	breq	.+6      	; 0x3b6e <dtoa_prf+0x152>
    3b68:	41 93       	st	Z+, r20
    3b6a:	31 50       	subi	r19, 0x01	; 1
    3b6c:	fb cf       	rjmp	.-10     	; 0x3b64 <dtoa_prf+0x148>
    3b6e:	fc 01       	movw	r30, r24
    3b70:	e2 0f       	add	r30, r18
    3b72:	f1 1d       	adc	r31, r1
    3b74:	10 82       	st	Z, r1
    3b76:	8e ef       	ldi	r24, 0xFE	; 254
    3b78:	9f ef       	ldi	r25, 0xFF	; 255
    3b7a:	a6 c0       	rjmp	.+332    	; 0x3cc8 <dtoa_prf+0x2ac>
    3b7c:	21 e0       	ldi	r18, 0x01	; 1
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	91 11       	cpse	r25, r1
    3b82:	02 c0       	rjmp	.+4      	; 0x3b88 <dtoa_prf+0x16c>
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	16 16       	cp	r1, r22
    3b8a:	17 06       	cpc	r1, r23
    3b8c:	1c f4       	brge	.+6      	; 0x3b94 <dtoa_prf+0x178>
    3b8e:	fb 01       	movw	r30, r22
    3b90:	31 96       	adiw	r30, 0x01	; 1
    3b92:	02 c0       	rjmp	.+4      	; 0x3b98 <dtoa_prf+0x17c>
    3b94:	e1 e0       	ldi	r30, 0x01	; 1
    3b96:	f0 e0       	ldi	r31, 0x00	; 0
    3b98:	2e 0f       	add	r18, r30
    3b9a:	3f 1f       	adc	r19, r31
    3b9c:	bb 20       	and	r11, r11
    3b9e:	21 f0       	breq	.+8      	; 0x3ba8 <dtoa_prf+0x18c>
    3ba0:	eb 2d       	mov	r30, r11
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	31 96       	adiw	r30, 0x01	; 1
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <dtoa_prf+0x190>
    3ba8:	e0 e0       	ldi	r30, 0x00	; 0
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	2e 0f       	add	r18, r30
    3bae:	3f 1f       	adc	r19, r31
    3bb0:	e1 2f       	mov	r30, r17
    3bb2:	f0 e0       	ldi	r31, 0x00	; 0
    3bb4:	2e 17       	cp	r18, r30
    3bb6:	3f 07       	cpc	r19, r31
    3bb8:	1c f4       	brge	.+6      	; 0x3bc0 <dtoa_prf+0x1a4>
    3bba:	12 1b       	sub	r17, r18
    3bbc:	21 2f       	mov	r18, r17
    3bbe:	01 c0       	rjmp	.+2      	; 0x3bc2 <dtoa_prf+0x1a6>
    3bc0:	20 e0       	ldi	r18, 0x00	; 0
    3bc2:	8e 2d       	mov	r24, r14
    3bc4:	88 71       	andi	r24, 0x18	; 24
    3bc6:	59 f4       	brne	.+22     	; 0x3bde <dtoa_prf+0x1c2>
    3bc8:	f6 01       	movw	r30, r12
    3bca:	82 2f       	mov	r24, r18
    3bcc:	30 e2       	ldi	r19, 0x20	; 32
    3bce:	88 23       	and	r24, r24
    3bd0:	19 f0       	breq	.+6      	; 0x3bd8 <dtoa_prf+0x1bc>
    3bd2:	31 93       	st	Z+, r19
    3bd4:	81 50       	subi	r24, 0x01	; 1
    3bd6:	fb cf       	rjmp	.-10     	; 0x3bce <dtoa_prf+0x1b2>
    3bd8:	c2 0e       	add	r12, r18
    3bda:	d1 1c       	adc	r13, r1
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	99 23       	and	r25, r25
    3be0:	29 f0       	breq	.+10     	; 0x3bec <dtoa_prf+0x1d0>
    3be2:	d6 01       	movw	r26, r12
    3be4:	9c 93       	st	X, r25
    3be6:	f6 01       	movw	r30, r12
    3be8:	31 96       	adiw	r30, 0x01	; 1
    3bea:	6f 01       	movw	r12, r30
    3bec:	51 11       	cpse	r21, r1
    3bee:	0b c0       	rjmp	.+22     	; 0x3c06 <dtoa_prf+0x1ea>
    3bf0:	f6 01       	movw	r30, r12
    3bf2:	82 2f       	mov	r24, r18
    3bf4:	90 e3       	ldi	r25, 0x30	; 48
    3bf6:	88 23       	and	r24, r24
    3bf8:	19 f0       	breq	.+6      	; 0x3c00 <dtoa_prf+0x1e4>
    3bfa:	91 93       	st	Z+, r25
    3bfc:	81 50       	subi	r24, 0x01	; 1
    3bfe:	fb cf       	rjmp	.-10     	; 0x3bf6 <dtoa_prf+0x1da>
    3c00:	c2 0e       	add	r12, r18
    3c02:	d1 1c       	adc	r13, r1
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	0f 2d       	mov	r16, r15
    3c08:	06 0f       	add	r16, r22
    3c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0c:	34 2f       	mov	r19, r20
    3c0e:	30 71       	andi	r19, 0x10	; 16
    3c10:	44 ff       	sbrs	r20, 4
    3c12:	03 c0       	rjmp	.+6      	; 0x3c1a <dtoa_prf+0x1fe>
    3c14:	91 33       	cpi	r25, 0x31	; 49
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <dtoa_prf+0x1fe>
    3c18:	01 50       	subi	r16, 0x01	; 1
    3c1a:	10 16       	cp	r1, r16
    3c1c:	24 f4       	brge	.+8      	; 0x3c26 <dtoa_prf+0x20a>
    3c1e:	09 30       	cpi	r16, 0x09	; 9
    3c20:	18 f0       	brcs	.+6      	; 0x3c28 <dtoa_prf+0x20c>
    3c22:	08 e0       	ldi	r16, 0x08	; 8
    3c24:	01 c0       	rjmp	.+2      	; 0x3c28 <dtoa_prf+0x20c>
    3c26:	01 e0       	ldi	r16, 0x01	; 1
    3c28:	ab 01       	movw	r20, r22
    3c2a:	77 ff       	sbrs	r23, 7
    3c2c:	02 c0       	rjmp	.+4      	; 0x3c32 <dtoa_prf+0x216>
    3c2e:	40 e0       	ldi	r20, 0x00	; 0
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	fb 01       	movw	r30, r22
    3c34:	e4 1b       	sub	r30, r20
    3c36:	f5 0b       	sbc	r31, r21
    3c38:	a1 e0       	ldi	r26, 0x01	; 1
    3c3a:	b0 e0       	ldi	r27, 0x00	; 0
    3c3c:	ac 0f       	add	r26, r28
    3c3e:	bd 1f       	adc	r27, r29
    3c40:	ea 0f       	add	r30, r26
    3c42:	fb 1f       	adc	r31, r27
    3c44:	8e e2       	ldi	r24, 0x2E	; 46
    3c46:	a8 2e       	mov	r10, r24
    3c48:	4b 01       	movw	r8, r22
    3c4a:	80 1a       	sub	r8, r16
    3c4c:	91 08       	sbc	r9, r1
    3c4e:	0b 2d       	mov	r16, r11
    3c50:	10 e0       	ldi	r17, 0x00	; 0
    3c52:	11 95       	neg	r17
    3c54:	01 95       	neg	r16
    3c56:	11 09       	sbc	r17, r1
    3c58:	4f 3f       	cpi	r20, 0xFF	; 255
    3c5a:	bf ef       	ldi	r27, 0xFF	; 255
    3c5c:	5b 07       	cpc	r21, r27
    3c5e:	21 f4       	brne	.+8      	; 0x3c68 <dtoa_prf+0x24c>
    3c60:	d6 01       	movw	r26, r12
    3c62:	ac 92       	st	X, r10
    3c64:	11 96       	adiw	r26, 0x01	; 1
    3c66:	6d 01       	movw	r12, r26
    3c68:	64 17       	cp	r22, r20
    3c6a:	75 07       	cpc	r23, r21
    3c6c:	2c f0       	brlt	.+10     	; 0x3c78 <dtoa_prf+0x25c>
    3c6e:	84 16       	cp	r8, r20
    3c70:	95 06       	cpc	r9, r21
    3c72:	14 f4       	brge	.+4      	; 0x3c78 <dtoa_prf+0x25c>
    3c74:	81 81       	ldd	r24, Z+1	; 0x01
    3c76:	01 c0       	rjmp	.+2      	; 0x3c7a <dtoa_prf+0x25e>
    3c78:	80 e3       	ldi	r24, 0x30	; 48
    3c7a:	41 50       	subi	r20, 0x01	; 1
    3c7c:	51 09       	sbc	r21, r1
    3c7e:	31 96       	adiw	r30, 0x01	; 1
    3c80:	d6 01       	movw	r26, r12
    3c82:	11 96       	adiw	r26, 0x01	; 1
    3c84:	7d 01       	movw	r14, r26
    3c86:	40 17       	cp	r20, r16
    3c88:	51 07       	cpc	r21, r17
    3c8a:	24 f0       	brlt	.+8      	; 0x3c94 <dtoa_prf+0x278>
    3c8c:	d6 01       	movw	r26, r12
    3c8e:	8c 93       	st	X, r24
    3c90:	67 01       	movw	r12, r14
    3c92:	e2 cf       	rjmp	.-60     	; 0x3c58 <dtoa_prf+0x23c>
    3c94:	64 17       	cp	r22, r20
    3c96:	75 07       	cpc	r23, r21
    3c98:	39 f4       	brne	.+14     	; 0x3ca8 <dtoa_prf+0x28c>
    3c9a:	96 33       	cpi	r25, 0x36	; 54
    3c9c:	20 f4       	brcc	.+8      	; 0x3ca6 <dtoa_prf+0x28a>
    3c9e:	95 33       	cpi	r25, 0x35	; 53
    3ca0:	19 f4       	brne	.+6      	; 0x3ca8 <dtoa_prf+0x28c>
    3ca2:	31 11       	cpse	r19, r1
    3ca4:	01 c0       	rjmp	.+2      	; 0x3ca8 <dtoa_prf+0x28c>
    3ca6:	81 e3       	ldi	r24, 0x31	; 49
    3ca8:	f6 01       	movw	r30, r12
    3caa:	80 83       	st	Z, r24
    3cac:	f7 01       	movw	r30, r14
    3cae:	82 2f       	mov	r24, r18
    3cb0:	90 e2       	ldi	r25, 0x20	; 32
    3cb2:	88 23       	and	r24, r24
    3cb4:	19 f0       	breq	.+6      	; 0x3cbc <dtoa_prf+0x2a0>
    3cb6:	91 93       	st	Z+, r25
    3cb8:	81 50       	subi	r24, 0x01	; 1
    3cba:	fb cf       	rjmp	.-10     	; 0x3cb2 <dtoa_prf+0x296>
    3cbc:	f7 01       	movw	r30, r14
    3cbe:	e2 0f       	add	r30, r18
    3cc0:	f1 1d       	adc	r31, r1
    3cc2:	10 82       	st	Z, r1
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	29 96       	adiw	r28, 0x09	; 9
    3cca:	ec e0       	ldi	r30, 0x0C	; 12
    3ccc:	0c 94 12 20 	jmp	0x4024	; 0x4024 <__epilogue_restores__+0xc>

00003cd0 <__ftoa_engine>:
    3cd0:	28 30       	cpi	r18, 0x08	; 8
    3cd2:	08 f0       	brcs	.+2      	; 0x3cd6 <__ftoa_engine+0x6>
    3cd4:	27 e0       	ldi	r18, 0x07	; 7
    3cd6:	33 27       	eor	r19, r19
    3cd8:	da 01       	movw	r26, r20
    3cda:	99 0f       	add	r25, r25
    3cdc:	31 1d       	adc	r19, r1
    3cde:	87 fd       	sbrc	r24, 7
    3ce0:	91 60       	ori	r25, 0x01	; 1
    3ce2:	00 96       	adiw	r24, 0x00	; 0
    3ce4:	61 05       	cpc	r22, r1
    3ce6:	71 05       	cpc	r23, r1
    3ce8:	39 f4       	brne	.+14     	; 0x3cf8 <__ftoa_engine+0x28>
    3cea:	32 60       	ori	r19, 0x02	; 2
    3cec:	2e 5f       	subi	r18, 0xFE	; 254
    3cee:	3d 93       	st	X+, r19
    3cf0:	30 e3       	ldi	r19, 0x30	; 48
    3cf2:	2a 95       	dec	r18
    3cf4:	e1 f7       	brne	.-8      	; 0x3cee <__ftoa_engine+0x1e>
    3cf6:	08 95       	ret
    3cf8:	9f 3f       	cpi	r25, 0xFF	; 255
    3cfa:	30 f0       	brcs	.+12     	; 0x3d08 <__ftoa_engine+0x38>
    3cfc:	80 38       	cpi	r24, 0x80	; 128
    3cfe:	71 05       	cpc	r23, r1
    3d00:	61 05       	cpc	r22, r1
    3d02:	09 f0       	breq	.+2      	; 0x3d06 <__ftoa_engine+0x36>
    3d04:	3c 5f       	subi	r19, 0xFC	; 252
    3d06:	3c 5f       	subi	r19, 0xFC	; 252
    3d08:	3d 93       	st	X+, r19
    3d0a:	91 30       	cpi	r25, 0x01	; 1
    3d0c:	08 f0       	brcs	.+2      	; 0x3d10 <__ftoa_engine+0x40>
    3d0e:	80 68       	ori	r24, 0x80	; 128
    3d10:	91 1d       	adc	r25, r1
    3d12:	df 93       	push	r29
    3d14:	cf 93       	push	r28
    3d16:	1f 93       	push	r17
    3d18:	0f 93       	push	r16
    3d1a:	ff 92       	push	r15
    3d1c:	ef 92       	push	r14
    3d1e:	19 2f       	mov	r17, r25
    3d20:	98 7f       	andi	r25, 0xF8	; 248
    3d22:	96 95       	lsr	r25
    3d24:	e9 2f       	mov	r30, r25
    3d26:	96 95       	lsr	r25
    3d28:	96 95       	lsr	r25
    3d2a:	e9 0f       	add	r30, r25
    3d2c:	ff 27       	eor	r31, r31
    3d2e:	e8 57       	subi	r30, 0x78	; 120
    3d30:	fd 4f       	sbci	r31, 0xFD	; 253
    3d32:	99 27       	eor	r25, r25
    3d34:	33 27       	eor	r19, r19
    3d36:	ee 24       	eor	r14, r14
    3d38:	ff 24       	eor	r15, r15
    3d3a:	a7 01       	movw	r20, r14
    3d3c:	e7 01       	movw	r28, r14
    3d3e:	05 90       	lpm	r0, Z+
    3d40:	08 94       	sec
    3d42:	07 94       	ror	r0
    3d44:	28 f4       	brcc	.+10     	; 0x3d50 <__ftoa_engine+0x80>
    3d46:	36 0f       	add	r19, r22
    3d48:	e7 1e       	adc	r14, r23
    3d4a:	f8 1e       	adc	r15, r24
    3d4c:	49 1f       	adc	r20, r25
    3d4e:	51 1d       	adc	r21, r1
    3d50:	66 0f       	add	r22, r22
    3d52:	77 1f       	adc	r23, r23
    3d54:	88 1f       	adc	r24, r24
    3d56:	99 1f       	adc	r25, r25
    3d58:	06 94       	lsr	r0
    3d5a:	a1 f7       	brne	.-24     	; 0x3d44 <__ftoa_engine+0x74>
    3d5c:	05 90       	lpm	r0, Z+
    3d5e:	07 94       	ror	r0
    3d60:	28 f4       	brcc	.+10     	; 0x3d6c <__ftoa_engine+0x9c>
    3d62:	e7 0e       	add	r14, r23
    3d64:	f8 1e       	adc	r15, r24
    3d66:	49 1f       	adc	r20, r25
    3d68:	56 1f       	adc	r21, r22
    3d6a:	c1 1d       	adc	r28, r1
    3d6c:	77 0f       	add	r23, r23
    3d6e:	88 1f       	adc	r24, r24
    3d70:	99 1f       	adc	r25, r25
    3d72:	66 1f       	adc	r22, r22
    3d74:	06 94       	lsr	r0
    3d76:	a1 f7       	brne	.-24     	; 0x3d60 <__ftoa_engine+0x90>
    3d78:	05 90       	lpm	r0, Z+
    3d7a:	07 94       	ror	r0
    3d7c:	28 f4       	brcc	.+10     	; 0x3d88 <__ftoa_engine+0xb8>
    3d7e:	f8 0e       	add	r15, r24
    3d80:	49 1f       	adc	r20, r25
    3d82:	56 1f       	adc	r21, r22
    3d84:	c7 1f       	adc	r28, r23
    3d86:	d1 1d       	adc	r29, r1
    3d88:	88 0f       	add	r24, r24
    3d8a:	99 1f       	adc	r25, r25
    3d8c:	66 1f       	adc	r22, r22
    3d8e:	77 1f       	adc	r23, r23
    3d90:	06 94       	lsr	r0
    3d92:	a1 f7       	brne	.-24     	; 0x3d7c <__ftoa_engine+0xac>
    3d94:	05 90       	lpm	r0, Z+
    3d96:	07 94       	ror	r0
    3d98:	20 f4       	brcc	.+8      	; 0x3da2 <__ftoa_engine+0xd2>
    3d9a:	49 0f       	add	r20, r25
    3d9c:	56 1f       	adc	r21, r22
    3d9e:	c7 1f       	adc	r28, r23
    3da0:	d8 1f       	adc	r29, r24
    3da2:	99 0f       	add	r25, r25
    3da4:	66 1f       	adc	r22, r22
    3da6:	77 1f       	adc	r23, r23
    3da8:	88 1f       	adc	r24, r24
    3daa:	06 94       	lsr	r0
    3dac:	a9 f7       	brne	.-22     	; 0x3d98 <__ftoa_engine+0xc8>
    3dae:	84 91       	lpm	r24, Z
    3db0:	10 95       	com	r17
    3db2:	17 70       	andi	r17, 0x07	; 7
    3db4:	41 f0       	breq	.+16     	; 0x3dc6 <__ftoa_engine+0xf6>
    3db6:	d6 95       	lsr	r29
    3db8:	c7 95       	ror	r28
    3dba:	57 95       	ror	r21
    3dbc:	47 95       	ror	r20
    3dbe:	f7 94       	ror	r15
    3dc0:	e7 94       	ror	r14
    3dc2:	1a 95       	dec	r17
    3dc4:	c1 f7       	brne	.-16     	; 0x3db6 <__ftoa_engine+0xe6>
    3dc6:	ee e2       	ldi	r30, 0x2E	; 46
    3dc8:	f2 e0       	ldi	r31, 0x02	; 2
    3dca:	68 94       	set
    3dcc:	15 90       	lpm	r1, Z+
    3dce:	15 91       	lpm	r17, Z+
    3dd0:	35 91       	lpm	r19, Z+
    3dd2:	65 91       	lpm	r22, Z+
    3dd4:	95 91       	lpm	r25, Z+
    3dd6:	05 90       	lpm	r0, Z+
    3dd8:	7f e2       	ldi	r23, 0x2F	; 47
    3dda:	73 95       	inc	r23
    3ddc:	e1 18       	sub	r14, r1
    3dde:	f1 0a       	sbc	r15, r17
    3de0:	43 0b       	sbc	r20, r19
    3de2:	56 0b       	sbc	r21, r22
    3de4:	c9 0b       	sbc	r28, r25
    3de6:	d0 09       	sbc	r29, r0
    3de8:	c0 f7       	brcc	.-16     	; 0x3dda <__ftoa_engine+0x10a>
    3dea:	e1 0c       	add	r14, r1
    3dec:	f1 1e       	adc	r15, r17
    3dee:	43 1f       	adc	r20, r19
    3df0:	56 1f       	adc	r21, r22
    3df2:	c9 1f       	adc	r28, r25
    3df4:	d0 1d       	adc	r29, r0
    3df6:	7e f4       	brtc	.+30     	; 0x3e16 <__ftoa_engine+0x146>
    3df8:	70 33       	cpi	r23, 0x30	; 48
    3dfa:	11 f4       	brne	.+4      	; 0x3e00 <__ftoa_engine+0x130>
    3dfc:	8a 95       	dec	r24
    3dfe:	e6 cf       	rjmp	.-52     	; 0x3dcc <__ftoa_engine+0xfc>
    3e00:	e8 94       	clt
    3e02:	01 50       	subi	r16, 0x01	; 1
    3e04:	30 f0       	brcs	.+12     	; 0x3e12 <__ftoa_engine+0x142>
    3e06:	08 0f       	add	r16, r24
    3e08:	0a f4       	brpl	.+2      	; 0x3e0c <__ftoa_engine+0x13c>
    3e0a:	00 27       	eor	r16, r16
    3e0c:	02 17       	cp	r16, r18
    3e0e:	08 f4       	brcc	.+2      	; 0x3e12 <__ftoa_engine+0x142>
    3e10:	20 2f       	mov	r18, r16
    3e12:	23 95       	inc	r18
    3e14:	02 2f       	mov	r16, r18
    3e16:	7a 33       	cpi	r23, 0x3A	; 58
    3e18:	28 f0       	brcs	.+10     	; 0x3e24 <__ftoa_engine+0x154>
    3e1a:	79 e3       	ldi	r23, 0x39	; 57
    3e1c:	7d 93       	st	X+, r23
    3e1e:	2a 95       	dec	r18
    3e20:	e9 f7       	brne	.-6      	; 0x3e1c <__ftoa_engine+0x14c>
    3e22:	10 c0       	rjmp	.+32     	; 0x3e44 <__ftoa_engine+0x174>
    3e24:	7d 93       	st	X+, r23
    3e26:	2a 95       	dec	r18
    3e28:	89 f6       	brne	.-94     	; 0x3dcc <__ftoa_engine+0xfc>
    3e2a:	06 94       	lsr	r0
    3e2c:	97 95       	ror	r25
    3e2e:	67 95       	ror	r22
    3e30:	37 95       	ror	r19
    3e32:	17 95       	ror	r17
    3e34:	17 94       	ror	r1
    3e36:	e1 18       	sub	r14, r1
    3e38:	f1 0a       	sbc	r15, r17
    3e3a:	43 0b       	sbc	r20, r19
    3e3c:	56 0b       	sbc	r21, r22
    3e3e:	c9 0b       	sbc	r28, r25
    3e40:	d0 09       	sbc	r29, r0
    3e42:	98 f0       	brcs	.+38     	; 0x3e6a <__ftoa_engine+0x19a>
    3e44:	23 95       	inc	r18
    3e46:	7e 91       	ld	r23, -X
    3e48:	73 95       	inc	r23
    3e4a:	7a 33       	cpi	r23, 0x3A	; 58
    3e4c:	08 f0       	brcs	.+2      	; 0x3e50 <__ftoa_engine+0x180>
    3e4e:	70 e3       	ldi	r23, 0x30	; 48
    3e50:	7c 93       	st	X, r23
    3e52:	20 13       	cpse	r18, r16
    3e54:	b8 f7       	brcc	.-18     	; 0x3e44 <__ftoa_engine+0x174>
    3e56:	7e 91       	ld	r23, -X
    3e58:	70 61       	ori	r23, 0x10	; 16
    3e5a:	7d 93       	st	X+, r23
    3e5c:	30 f0       	brcs	.+12     	; 0x3e6a <__ftoa_engine+0x19a>
    3e5e:	83 95       	inc	r24
    3e60:	71 e3       	ldi	r23, 0x31	; 49
    3e62:	7d 93       	st	X+, r23
    3e64:	70 e3       	ldi	r23, 0x30	; 48
    3e66:	2a 95       	dec	r18
    3e68:	e1 f7       	brne	.-8      	; 0x3e62 <__ftoa_engine+0x192>
    3e6a:	11 24       	eor	r1, r1
    3e6c:	ef 90       	pop	r14
    3e6e:	ff 90       	pop	r15
    3e70:	0f 91       	pop	r16
    3e72:	1f 91       	pop	r17
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	99 27       	eor	r25, r25
    3e7a:	87 fd       	sbrc	r24, 7
    3e7c:	90 95       	com	r25
    3e7e:	08 95       	ret

00003e80 <strnlen_P>:
    3e80:	fc 01       	movw	r30, r24
    3e82:	05 90       	lpm	r0, Z+
    3e84:	61 50       	subi	r22, 0x01	; 1
    3e86:	70 40       	sbci	r23, 0x00	; 0
    3e88:	01 10       	cpse	r0, r1
    3e8a:	d8 f7       	brcc	.-10     	; 0x3e82 <strnlen_P+0x2>
    3e8c:	80 95       	com	r24
    3e8e:	90 95       	com	r25
    3e90:	8e 0f       	add	r24, r30
    3e92:	9f 1f       	adc	r25, r31
    3e94:	08 95       	ret

00003e96 <strnlen>:
    3e96:	fc 01       	movw	r30, r24
    3e98:	61 50       	subi	r22, 0x01	; 1
    3e9a:	70 40       	sbci	r23, 0x00	; 0
    3e9c:	01 90       	ld	r0, Z+
    3e9e:	01 10       	cpse	r0, r1
    3ea0:	d8 f7       	brcc	.-10     	; 0x3e98 <strnlen+0x2>
    3ea2:	80 95       	com	r24
    3ea4:	90 95       	com	r25
    3ea6:	8e 0f       	add	r24, r30
    3ea8:	9f 1f       	adc	r25, r31
    3eaa:	08 95       	ret

00003eac <fputc>:
    3eac:	0f 93       	push	r16
    3eae:	1f 93       	push	r17
    3eb0:	cf 93       	push	r28
    3eb2:	df 93       	push	r29
    3eb4:	fb 01       	movw	r30, r22
    3eb6:	23 81       	ldd	r18, Z+3	; 0x03
    3eb8:	21 fd       	sbrc	r18, 1
    3eba:	03 c0       	rjmp	.+6      	; 0x3ec2 <fputc+0x16>
    3ebc:	8f ef       	ldi	r24, 0xFF	; 255
    3ebe:	9f ef       	ldi	r25, 0xFF	; 255
    3ec0:	2c c0       	rjmp	.+88     	; 0x3f1a <fputc+0x6e>
    3ec2:	22 ff       	sbrs	r18, 2
    3ec4:	16 c0       	rjmp	.+44     	; 0x3ef2 <fputc+0x46>
    3ec6:	46 81       	ldd	r20, Z+6	; 0x06
    3ec8:	57 81       	ldd	r21, Z+7	; 0x07
    3eca:	24 81       	ldd	r18, Z+4	; 0x04
    3ecc:	35 81       	ldd	r19, Z+5	; 0x05
    3ece:	42 17       	cp	r20, r18
    3ed0:	53 07       	cpc	r21, r19
    3ed2:	44 f4       	brge	.+16     	; 0x3ee4 <fputc+0x38>
    3ed4:	a0 81       	ld	r26, Z
    3ed6:	b1 81       	ldd	r27, Z+1	; 0x01
    3ed8:	9d 01       	movw	r18, r26
    3eda:	2f 5f       	subi	r18, 0xFF	; 255
    3edc:	3f 4f       	sbci	r19, 0xFF	; 255
    3ede:	31 83       	std	Z+1, r19	; 0x01
    3ee0:	20 83       	st	Z, r18
    3ee2:	8c 93       	st	X, r24
    3ee4:	26 81       	ldd	r18, Z+6	; 0x06
    3ee6:	37 81       	ldd	r19, Z+7	; 0x07
    3ee8:	2f 5f       	subi	r18, 0xFF	; 255
    3eea:	3f 4f       	sbci	r19, 0xFF	; 255
    3eec:	37 83       	std	Z+7, r19	; 0x07
    3eee:	26 83       	std	Z+6, r18	; 0x06
    3ef0:	14 c0       	rjmp	.+40     	; 0x3f1a <fputc+0x6e>
    3ef2:	8b 01       	movw	r16, r22
    3ef4:	ec 01       	movw	r28, r24
    3ef6:	fb 01       	movw	r30, r22
    3ef8:	00 84       	ldd	r0, Z+8	; 0x08
    3efa:	f1 85       	ldd	r31, Z+9	; 0x09
    3efc:	e0 2d       	mov	r30, r0
    3efe:	09 95       	icall
    3f00:	89 2b       	or	r24, r25
    3f02:	e1 f6       	brne	.-72     	; 0x3ebc <fputc+0x10>
    3f04:	d8 01       	movw	r26, r16
    3f06:	16 96       	adiw	r26, 0x06	; 6
    3f08:	8d 91       	ld	r24, X+
    3f0a:	9c 91       	ld	r25, X
    3f0c:	17 97       	sbiw	r26, 0x07	; 7
    3f0e:	01 96       	adiw	r24, 0x01	; 1
    3f10:	17 96       	adiw	r26, 0x07	; 7
    3f12:	9c 93       	st	X, r25
    3f14:	8e 93       	st	-X, r24
    3f16:	16 97       	sbiw	r26, 0x06	; 6
    3f18:	ce 01       	movw	r24, r28
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	08 95       	ret

00003f24 <__ultoa_invert>:
    3f24:	fa 01       	movw	r30, r20
    3f26:	aa 27       	eor	r26, r26
    3f28:	28 30       	cpi	r18, 0x08	; 8
    3f2a:	51 f1       	breq	.+84     	; 0x3f80 <__ultoa_invert+0x5c>
    3f2c:	20 31       	cpi	r18, 0x10	; 16
    3f2e:	81 f1       	breq	.+96     	; 0x3f90 <__ultoa_invert+0x6c>
    3f30:	e8 94       	clt
    3f32:	6f 93       	push	r22
    3f34:	6e 7f       	andi	r22, 0xFE	; 254
    3f36:	6e 5f       	subi	r22, 0xFE	; 254
    3f38:	7f 4f       	sbci	r23, 0xFF	; 255
    3f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3e:	af 4f       	sbci	r26, 0xFF	; 255
    3f40:	b1 e0       	ldi	r27, 0x01	; 1
    3f42:	3e d0       	rcall	.+124    	; 0x3fc0 <__ultoa_invert+0x9c>
    3f44:	b4 e0       	ldi	r27, 0x04	; 4
    3f46:	3c d0       	rcall	.+120    	; 0x3fc0 <__ultoa_invert+0x9c>
    3f48:	67 0f       	add	r22, r23
    3f4a:	78 1f       	adc	r23, r24
    3f4c:	89 1f       	adc	r24, r25
    3f4e:	9a 1f       	adc	r25, r26
    3f50:	a1 1d       	adc	r26, r1
    3f52:	68 0f       	add	r22, r24
    3f54:	79 1f       	adc	r23, r25
    3f56:	8a 1f       	adc	r24, r26
    3f58:	91 1d       	adc	r25, r1
    3f5a:	a1 1d       	adc	r26, r1
    3f5c:	6a 0f       	add	r22, r26
    3f5e:	71 1d       	adc	r23, r1
    3f60:	81 1d       	adc	r24, r1
    3f62:	91 1d       	adc	r25, r1
    3f64:	a1 1d       	adc	r26, r1
    3f66:	20 d0       	rcall	.+64     	; 0x3fa8 <__ultoa_invert+0x84>
    3f68:	09 f4       	brne	.+2      	; 0x3f6c <__ultoa_invert+0x48>
    3f6a:	68 94       	set
    3f6c:	3f 91       	pop	r19
    3f6e:	2a e0       	ldi	r18, 0x0A	; 10
    3f70:	26 9f       	mul	r18, r22
    3f72:	11 24       	eor	r1, r1
    3f74:	30 19       	sub	r19, r0
    3f76:	30 5d       	subi	r19, 0xD0	; 208
    3f78:	31 93       	st	Z+, r19
    3f7a:	de f6       	brtc	.-74     	; 0x3f32 <__ultoa_invert+0xe>
    3f7c:	cf 01       	movw	r24, r30
    3f7e:	08 95       	ret
    3f80:	46 2f       	mov	r20, r22
    3f82:	47 70       	andi	r20, 0x07	; 7
    3f84:	40 5d       	subi	r20, 0xD0	; 208
    3f86:	41 93       	st	Z+, r20
    3f88:	b3 e0       	ldi	r27, 0x03	; 3
    3f8a:	0f d0       	rcall	.+30     	; 0x3faa <__ultoa_invert+0x86>
    3f8c:	c9 f7       	brne	.-14     	; 0x3f80 <__ultoa_invert+0x5c>
    3f8e:	f6 cf       	rjmp	.-20     	; 0x3f7c <__ultoa_invert+0x58>
    3f90:	46 2f       	mov	r20, r22
    3f92:	4f 70       	andi	r20, 0x0F	; 15
    3f94:	40 5d       	subi	r20, 0xD0	; 208
    3f96:	4a 33       	cpi	r20, 0x3A	; 58
    3f98:	18 f0       	brcs	.+6      	; 0x3fa0 <__ultoa_invert+0x7c>
    3f9a:	49 5d       	subi	r20, 0xD9	; 217
    3f9c:	31 fd       	sbrc	r19, 1
    3f9e:	40 52       	subi	r20, 0x20	; 32
    3fa0:	41 93       	st	Z+, r20
    3fa2:	02 d0       	rcall	.+4      	; 0x3fa8 <__ultoa_invert+0x84>
    3fa4:	a9 f7       	brne	.-22     	; 0x3f90 <__ultoa_invert+0x6c>
    3fa6:	ea cf       	rjmp	.-44     	; 0x3f7c <__ultoa_invert+0x58>
    3fa8:	b4 e0       	ldi	r27, 0x04	; 4
    3faa:	a6 95       	lsr	r26
    3fac:	97 95       	ror	r25
    3fae:	87 95       	ror	r24
    3fb0:	77 95       	ror	r23
    3fb2:	67 95       	ror	r22
    3fb4:	ba 95       	dec	r27
    3fb6:	c9 f7       	brne	.-14     	; 0x3faa <__ultoa_invert+0x86>
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	61 05       	cpc	r22, r1
    3fbc:	71 05       	cpc	r23, r1
    3fbe:	08 95       	ret
    3fc0:	9b 01       	movw	r18, r22
    3fc2:	ac 01       	movw	r20, r24
    3fc4:	0a 2e       	mov	r0, r26
    3fc6:	06 94       	lsr	r0
    3fc8:	57 95       	ror	r21
    3fca:	47 95       	ror	r20
    3fcc:	37 95       	ror	r19
    3fce:	27 95       	ror	r18
    3fd0:	ba 95       	dec	r27
    3fd2:	c9 f7       	brne	.-14     	; 0x3fc6 <__ultoa_invert+0xa2>
    3fd4:	62 0f       	add	r22, r18
    3fd6:	73 1f       	adc	r23, r19
    3fd8:	84 1f       	adc	r24, r20
    3fda:	95 1f       	adc	r25, r21
    3fdc:	a0 1d       	adc	r26, r0
    3fde:	08 95       	ret

00003fe0 <__prologue_saves__>:
    3fe0:	2f 92       	push	r2
    3fe2:	3f 92       	push	r3
    3fe4:	4f 92       	push	r4
    3fe6:	5f 92       	push	r5
    3fe8:	6f 92       	push	r6
    3fea:	7f 92       	push	r7
    3fec:	8f 92       	push	r8
    3fee:	9f 92       	push	r9
    3ff0:	af 92       	push	r10
    3ff2:	bf 92       	push	r11
    3ff4:	cf 92       	push	r12
    3ff6:	df 92       	push	r13
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	cf 93       	push	r28
    4002:	df 93       	push	r29
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	ca 1b       	sub	r28, r26
    400a:	db 0b       	sbc	r29, r27
    400c:	0f b6       	in	r0, 0x3f	; 63
    400e:	f8 94       	cli
    4010:	de bf       	out	0x3e, r29	; 62
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	cd bf       	out	0x3d, r28	; 61
    4016:	09 94       	ijmp

00004018 <__epilogue_restores__>:
    4018:	2a 88       	ldd	r2, Y+18	; 0x12
    401a:	39 88       	ldd	r3, Y+17	; 0x11
    401c:	48 88       	ldd	r4, Y+16	; 0x10
    401e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4020:	6e 84       	ldd	r6, Y+14	; 0x0e
    4022:	7d 84       	ldd	r7, Y+13	; 0x0d
    4024:	8c 84       	ldd	r8, Y+12	; 0x0c
    4026:	9b 84       	ldd	r9, Y+11	; 0x0b
    4028:	aa 84       	ldd	r10, Y+10	; 0x0a
    402a:	b9 84       	ldd	r11, Y+9	; 0x09
    402c:	c8 84       	ldd	r12, Y+8	; 0x08
    402e:	df 80       	ldd	r13, Y+7	; 0x07
    4030:	ee 80       	ldd	r14, Y+6	; 0x06
    4032:	fd 80       	ldd	r15, Y+5	; 0x05
    4034:	0c 81       	ldd	r16, Y+4	; 0x04
    4036:	1b 81       	ldd	r17, Y+3	; 0x03
    4038:	aa 81       	ldd	r26, Y+2	; 0x02
    403a:	b9 81       	ldd	r27, Y+1	; 0x01
    403c:	ce 0f       	add	r28, r30
    403e:	d1 1d       	adc	r29, r1
    4040:	0f b6       	in	r0, 0x3f	; 63
    4042:	f8 94       	cli
    4044:	de bf       	out	0x3e, r29	; 62
    4046:	0f be       	out	0x3f, r0	; 63
    4048:	cd bf       	out	0x3d, r28	; 61
    404a:	ed 01       	movw	r28, r26
    404c:	08 95       	ret

0000404e <_exit>:
    404e:	f8 94       	cli

00004050 <__stop_program>:
    4050:	ff cf       	rjmp	.-2      	; 0x4050 <__stop_program>
