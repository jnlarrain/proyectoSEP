
proyecto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000008da  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  00000982  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000982  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001668  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e3  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a0e  00000000  00000000  00002b47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00003558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000602  00000000  00000000  0000388c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001321  00000000  00000000  00003e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000051af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 47 01 	jmp	0x28e	; 0x28e <__ctors_end>
   4:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   8:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
   c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  10:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  14:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  18:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  1c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  20:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  24:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  28:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  2c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  30:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  34:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  38:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  3c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  40:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  44:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  4c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  50:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  54:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  58:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  5c:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  60:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>
  64:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__bad_interrupt>

00000068 <CHARACTERS>:
  68:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
  78:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
  88:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  98:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
  a8:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  b8:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  c8:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  d8:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  e8:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  f8:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 108:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
 118:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 128:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 138:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 148:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 158:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 168:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 178:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 188:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
 198:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
 1a8:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 1b8:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 1c8:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 1d8:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1e8:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1f8:	7c 14 14 14 08 08 14 14 14 7c 7c 08 04 04 08 48     |........||....H
 208:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 218:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 228:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
 238:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000248 <INIT_ST7735B>:
 248:	0b 01 80 c8 11 80 c8 3a 81 05 0a b1 83 00 06 03     .......:........
 258:	0a 20 80 0a 36 01 a0 b6 02 15 02 b4 01 00 e0 10     . ..6...........
 268:	09 16 09 20 21 1b 13 19 17 15 1e 2b 04 05 02 0e     ... !......+....
 278:	e1 90 0b 14 08 1e 22 1d 18 1e 1b 1a 24 2b 06 06     ......".....$+..
 288:	02 0f 0a 13 80 0a                                   ......

0000028e <__ctors_end>:
 28e:	11 24       	eor	r1, r1
 290:	1f be       	out	0x3f, r1	; 63
 292:	cf ef       	ldi	r28, 0xFF	; 255
 294:	d8 e0       	ldi	r29, 0x08	; 8
 296:	de bf       	out	0x3e, r29	; 62
 298:	cd bf       	out	0x3d, r28	; 61

0000029a <__do_copy_data>:
 29a:	11 e0       	ldi	r17, 0x01	; 1
 29c:	a0 e0       	ldi	r26, 0x00	; 0
 29e:	b1 e0       	ldi	r27, 0x01	; 1
 2a0:	ea ed       	ldi	r30, 0xDA	; 218
 2a2:	f8 e0       	ldi	r31, 0x08	; 8
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__do_copy_data+0x10>
 2a6:	05 90       	lpm	r0, Z+
 2a8:	0d 92       	st	X+, r0
 2aa:	a4 31       	cpi	r26, 0x14	; 20
 2ac:	b1 07       	cpc	r27, r17
 2ae:	d9 f7       	brne	.-10     	; 0x2a6 <__do_copy_data+0xc>

000002b0 <__do_clear_bss>:
 2b0:	21 e0       	ldi	r18, 0x01	; 1
 2b2:	a4 e1       	ldi	r26, 0x14	; 20
 2b4:	b1 e0       	ldi	r27, 0x01	; 1
 2b6:	01 c0       	rjmp	.+2      	; 0x2ba <.do_clear_bss_start>

000002b8 <.do_clear_bss_loop>:
 2b8:	1d 92       	st	X+, r1

000002ba <.do_clear_bss_start>:
 2ba:	a8 31       	cpi	r26, 0x18	; 24
 2bc:	b2 07       	cpc	r27, r18
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <.do_clear_bss_loop>
 2c0:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
 2c4:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_exit>

000002c8 <__bad_interrupt>:
 2c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002cc <main>:
#include <util/delay.h>
#include "ST7735/st7735.h"


void main(void)
{ 
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
	St7735Init();
 2d0:	0e 94 62 04 	call	0x8c4	; 0x8c4 <St7735Init>
	UpdateScreen();	
 2d4:	0e 94 0c 04 	call	0x818	; 0x818 <UpdateScreen>
	ClearScreen(0xffff);
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <ClearScreen>
	//DrawString(char *str, uint16_t color, ESizes size)
	//SetPosition(uint8_t x, uint8_t y)
	
  // draw line
  DrawLine(23, 137, 20, 20, 0x04af);
 2e0:	0f ea       	ldi	r16, 0xAF	; 175
 2e2:	14 e0       	ldi	r17, 0x04	; 4
 2e4:	24 e1       	ldi	r18, 0x14	; 20
 2e6:	44 e1       	ldi	r20, 0x14	; 20
 2e8:	69 e8       	ldi	r22, 0x89	; 137
 2ea:	87 e1       	ldi	r24, 0x17	; 23
 2ec:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DrawLine>
  // draw line
  DrawLine(23, 137, 21, 21, 0x04af);
 2f0:	25 e1       	ldi	r18, 0x15	; 21
 2f2:	45 e1       	ldi	r20, 0x15	; 21
 2f4:	69 e8       	ldi	r22, 0x89	; 137
 2f6:	87 e1       	ldi	r24, 0x17	; 23
 2f8:	0e 94 7d 03 	call	0x6fa	; 0x6fa <DrawLine>
  // set text position
  SetPosition(5, 2);
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	85 e0       	ldi	r24, 0x05	; 5
 300:	0e 94 1b 02 	call	0x436	; 0x436 <SetPosition>
  // draw text
  DrawString("ST7735 DRIVER test", 0x007b, X2);
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	6b e7       	ldi	r22, 0x7B	; 123
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 3e 03 	call	0x67c	; 0x67c <DrawString>
  // set text position

}
 312:	1f 91       	pop	r17
 314:	0f 91       	pop	r16
 316:	08 95       	ret

00000318 <HardwareReset>:
*/

void HardwareReset(void)
{
	// Actiavte pull-up register logical high on pin RST
	PORTB |= BIT0;
 318:	28 9a       	sbi	0x05, 0	; 5
	// DDR as output
	DDRB  |= BIT0;
 31a:	20 9a       	sbi	0x04, 0	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31c:	8f e4       	ldi	r24, 0x4F	; 79
 31e:	93 ec       	ldi	r25, 0xC3	; 195
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <HardwareReset+0x8>
 324:	00 c0       	rjmp	.+0      	; 0x326 <HardwareReset+0xe>
 326:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset Low
	PORTB &= ~BIT0;
 328:	28 98       	cbi	0x05, 0	; 5
 32a:	8f e4       	ldi	r24, 0x4F	; 79
 32c:	93 ec       	ldi	r25, 0xC3	; 195
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <HardwareReset+0x16>
 332:	00 c0       	rjmp	.+0      	; 0x334 <HardwareReset+0x1c>
 334:	00 00       	nop
	// delay 200 ms
	_delay_ms(200);
	// Reset High
	PORTB |= BIT0;
 336:	28 9a       	sbi	0x05, 0	; 5
 338:	08 95       	ret

0000033a <SpiInit>:

void SpiInit(void)
{

	// Output: SCK, MOSI, CS_LD, DC_LD
	DDRB  |= BIT5 | BIT3 | BIT2 | BIT1;
 33a:	84 b1       	in	r24, 0x04	; 4
 33c:	8e 62       	ori	r24, 0x2E	; 46
 33e:	84 b9       	out	0x04, r24	; 4
	DDRB  &= ~BIT4;
 340:	24 98       	cbi	0x04, 4	; 4
	PORTB |= BIT2 | BIT4;
 342:	85 b1       	in	r24, 0x05	; 5
 344:	84 61       	ori	r24, 0x14	; 20
 346:	85 b9       	out	0x05, r24	; 5
	SPCR  |= BIT6 | BIT4;// | BIT0 | BIT1;
 348:	8c b5       	in	r24, 0x2c	; 44
 34a:	80 65       	ori	r24, 0x50	; 80
 34c:	8c bd       	out	0x2c, r24	; 44
	// SPI2X - Prescaler fclk/2 = 8MHz
	SPSR |= (1 << SPI2X);
 34e:	8d b5       	in	r24, 0x2d	; 45
 350:	81 60       	ori	r24, 0x01	; 1
 352:	8d bd       	out	0x2d, r24	; 45
 354:	08 95       	ret

00000356 <CommandSend>:
}

uint8_t CommandSend(uint8_t data)
{
	// chip enable - active low
	PORTB &= ~BIT2;
 356:	2a 98       	cbi	0x05, 2	; 5
	// command (active low)
	PORTB &= ~BIT1;
 358:	29 98       	cbi	0x05, 1	; 5
	// transmitting data
	SPDR = data;
 35a:	8e bd       	out	0x2e, r24	; 46
	// wait till data transmit
	while (!(SPSR & (1 << SPIF)));
 35c:	0d b4       	in	r0, 0x2d	; 45
 35e:	07 fe       	sbrs	r0, 7
 360:	fd cf       	rjmp	.-6      	; 0x35c <CommandSend+0x6>
	// chip disable - idle high
	PORTB |= BIT2;
 362:	2a 9a       	sbi	0x05, 2	; 5
	// return received data
	return SPDR;
 364:	8e b5       	in	r24, 0x2e	; 46
}
 366:	08 95       	ret

00000368 <Data8BitsSend>:
  }
  // set window
  SetWindow(x, x, ys, ye);
  // draw pixel by 565 mode
  SendColor565(color, ye - ys);
}
 368:	2a 98       	cbi	0x05, 2	; 5
 36a:	29 9a       	sbi	0x05, 1	; 5
 36c:	8e bd       	out	0x2e, r24	; 46
 36e:	0d b4       	in	r0, 0x2d	; 45
 370:	07 fe       	sbrs	r0, 7
 372:	fd cf       	rjmp	.-6      	; 0x36e <Data8BitsSend+0x6>
 374:	2a 9a       	sbi	0x05, 2	; 5
 376:	8e b5       	in	r24, 0x2e	; 46
 378:	08 95       	ret

0000037a <Data16BitsSend>:
 37a:	2a 98       	cbi	0x05, 2	; 5
 37c:	29 9a       	sbi	0x05, 1	; 5
 37e:	9e bd       	out	0x2e, r25	; 46
 380:	0d b4       	in	r0, 0x2d	; 45
 382:	07 fe       	sbrs	r0, 7
 384:	fd cf       	rjmp	.-6      	; 0x380 <Data16BitsSend+0x6>
 386:	8e bd       	out	0x2e, r24	; 46
 388:	0d b4       	in	r0, 0x2d	; 45
 38a:	07 fe       	sbrs	r0, 7
 38c:	fd cf       	rjmp	.-6      	; 0x388 <Data16BitsSend+0xe>
 38e:	2a 9a       	sbi	0x05, 2	; 5
 390:	8e b5       	in	r24, 0x2e	; 46
 392:	08 95       	ret

00000394 <SendColor565>:
 394:	0f 93       	push	r16
 396:	1f 93       	push	r17
 398:	cf 93       	push	r28
 39a:	df 93       	push	r29
 39c:	8c 01       	movw	r16, r24
 39e:	eb 01       	movw	r28, r22
 3a0:	8c e2       	ldi	r24, 0x2C	; 44
 3a2:	0e 94 ab 01 	call	0x356	; 0x356 <CommandSend>
 3a6:	20 97       	sbiw	r28, 0x00	; 0
 3a8:	29 f0       	breq	.+10     	; 0x3b4 <SendColor565+0x20>
 3aa:	c8 01       	movw	r24, r16
 3ac:	0e 94 bd 01 	call	0x37a	; 0x37a <Data16BitsSend>
 3b0:	21 97       	sbiw	r28, 0x01	; 1
 3b2:	d9 f7       	brne	.-10     	; 0x3aa <SendColor565+0x16>
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <SetWindow>:
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	68 17       	cp	r22, r24
 3c8:	50 f1       	brcs	.+84     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3ca:	62 3a       	cpi	r22, 0xA2	; 162
 3cc:	50 f5       	brcc	.+84     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 3ce:	24 17       	cp	r18, r20
 3d0:	50 f1       	brcs	.+84     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3d2:	24 38       	cpi	r18, 0x84	; 132
 3d4:	50 f5       	brcc	.+84     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3d6:	12 2f       	mov	r17, r18
 3d8:	04 2f       	mov	r16, r20
 3da:	c6 2f       	mov	r28, r22
 3dc:	d8 2f       	mov	r29, r24
 3de:	8a e2       	ldi	r24, 0x2A	; 42
 3e0:	0e 94 ab 01 	call	0x356	; 0x356 <CommandSend>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 3ea:	8d 2f       	mov	r24, r29
 3ec:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 3f6:	8c 2f       	mov	r24, r28
 3f8:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 3fc:	8b e2       	ldi	r24, 0x2B	; 43
 3fe:	0e 94 ab 01 	call	0x356	; 0x356 <CommandSend>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 408:	80 2f       	mov	r24, r16
 40a:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 414:	81 2f       	mov	r24, r17
 416:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	05 c0       	rjmp	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	03 c0       	rjmp	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	01 c0       	rjmp	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	08 95       	ret

00000436 <SetPosition>:
 436:	8d 39       	cpi	r24, 0x9D	; 157
 438:	90 f0       	brcs	.+36     	; 0x45e <SetPosition+0x28>
 43a:	6d 37       	cpi	r22, 0x7D	; 125
 43c:	e0 f4       	brcc	.+56     	; 0x476 <SetPosition+0x40>
 43e:	6c 37       	cpi	r22, 0x7C	; 124
 440:	70 f4       	brcc	.+28     	; 0x45e <SetPosition+0x28>
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	68 5f       	subi	r22, 0xF8	; 248
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <cacheMemIndexRow+0x1>
 44c:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <cacheMemIndexRow>
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 456:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	08 95       	ret
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <cacheMemIndexRow+0x1>
 464:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <cacheMemIndexRow>
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 46e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	08 95       	ret
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	08 95       	ret

0000047a <DrawPixel>:
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	ea 01       	movw	r28, r20
 480:	26 2f       	mov	r18, r22
 482:	46 2f       	mov	r20, r22
 484:	68 2f       	mov	r22, r24
 486:	0e 94 df 01 	call	0x3be	; 0x3be <SetWindow>
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	70 e0       	ldi	r23, 0x00	; 0
 48e:	ce 01       	movw	r24, r28
 490:	0e 94 ca 01 	call	0x394	; 0x394 <SendColor565>
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <DrawChar>:
 49a:	4f 92       	push	r4
 49c:	5f 92       	push	r5
 49e:	7f 92       	push	r7
 4a0:	8f 92       	push	r8
 4a2:	9f 92       	push	r9
 4a4:	af 92       	push	r10
 4a6:	bf 92       	push	r11
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ef 92       	push	r14
 4ae:	ff 92       	push	r15
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	2b 01       	movw	r4, r22
 4b8:	41 11       	cpse	r20, r1
 4ba:	34 c0       	rjmp	.+104    	; 0x524 <DrawChar+0x8a>
 4bc:	68 94       	set
 4be:	99 24       	eor	r9, r9
 4c0:	92 f8       	bld	r9, 2
 4c2:	c8 2f       	mov	r28, r24
 4c4:	d0 e0       	ldi	r29, 0x00	; 0
 4c6:	ce 01       	movw	r24, r28
 4c8:	80 97       	sbiw	r24, 0x20	; 32
 4ca:	ec 01       	movw	r28, r24
 4cc:	cc 0f       	add	r28, r28
 4ce:	dd 1f       	adc	r29, r29
 4d0:	cc 0f       	add	r28, r28
 4d2:	dd 1f       	adc	r29, r29
 4d4:	c8 0f       	add	r28, r24
 4d6:	d9 1f       	adc	r29, r25
 4d8:	0f 2e       	mov	r0, r31
 4da:	f6 e1       	ldi	r31, 0x16	; 22
 4dc:	cf 2e       	mov	r12, r31
 4de:	f1 e0       	ldi	r31, 0x01	; 1
 4e0:	df 2e       	mov	r13, r31
 4e2:	f0 2d       	mov	r31, r0
 4e4:	0f 2e       	mov	r0, r31
 4e6:	f4 e1       	ldi	r31, 0x14	; 20
 4e8:	ef 2e       	mov	r14, r31
 4ea:	f1 e0       	ldi	r31, 0x01	; 1
 4ec:	ff 2e       	mov	r15, r31
 4ee:	f0 2d       	mov	r31, r0
 4f0:	fe 01       	movw	r30, r28
 4f2:	e9 0d       	add	r30, r9
 4f4:	f1 1d       	adc	r31, r1
 4f6:	e8 59       	subi	r30, 0x98	; 152
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	b4 90       	lpm	r11, Z
 4fc:	17 e0       	ldi	r17, 0x07	; 7
 4fe:	bb 20       	and	r11, r11
 500:	4c f4       	brge	.+18     	; 0x514 <DrawChar+0x7a>
 502:	f6 01       	movw	r30, r12
 504:	60 81       	ld	r22, Z
 506:	61 0f       	add	r22, r17
 508:	f7 01       	movw	r30, r14
 50a:	80 81       	ld	r24, Z
 50c:	a2 01       	movw	r20, r4
 50e:	89 0d       	add	r24, r9
 510:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 514:	bb 0c       	add	r11, r11
 516:	11 50       	subi	r17, 0x01	; 1
 518:	90 f7       	brcc	.-28     	; 0x4fe <DrawChar+0x64>
 51a:	9a 94       	dec	r9
 51c:	ff ef       	ldi	r31, 0xFF	; 255
 51e:	9f 12       	cpse	r9, r31
 520:	e7 cf       	rjmp	.-50     	; 0x4f0 <DrawChar+0x56>
 522:	9c c0       	rjmp	.+312    	; 0x65c <DrawChar+0x1c2>
 524:	41 30       	cpi	r20, 0x01	; 1
 526:	09 f0       	breq	.+2      	; 0x52a <DrawChar+0x90>
 528:	40 c0       	rjmp	.+128    	; 0x5aa <DrawChar+0x110>
 52a:	68 94       	set
 52c:	99 24       	eor	r9, r9
 52e:	92 f8       	bld	r9, 2
 530:	e8 2e       	mov	r14, r24
 532:	f1 2c       	mov	r15, r1
 534:	c7 01       	movw	r24, r14
 536:	80 97       	sbiw	r24, 0x20	; 32
 538:	7c 01       	movw	r14, r24
 53a:	ee 0c       	add	r14, r14
 53c:	ff 1c       	adc	r15, r15
 53e:	ee 0c       	add	r14, r14
 540:	ff 1c       	adc	r15, r15
 542:	e8 0e       	add	r14, r24
 544:	f9 1e       	adc	r15, r25
 546:	0f 2e       	mov	r0, r31
 548:	f6 e1       	ldi	r31, 0x16	; 22
 54a:	af 2e       	mov	r10, r31
 54c:	f1 e0       	ldi	r31, 0x01	; 1
 54e:	bf 2e       	mov	r11, r31
 550:	f0 2d       	mov	r31, r0
 552:	0f 2e       	mov	r0, r31
 554:	f4 e1       	ldi	r31, 0x14	; 20
 556:	cf 2e       	mov	r12, r31
 558:	f1 e0       	ldi	r31, 0x01	; 1
 55a:	df 2e       	mov	r13, r31
 55c:	f0 2d       	mov	r31, r0
 55e:	f7 01       	movw	r30, r14
 560:	e9 0d       	add	r30, r9
 562:	f1 1d       	adc	r31, r1
 564:	e8 59       	subi	r30, 0x98	; 152
 566:	ff 4f       	sbci	r31, 0xFF	; 255
 568:	84 90       	lpm	r8, Z
 56a:	c7 e0       	ldi	r28, 0x07	; 7
 56c:	88 20       	and	r8, r8
 56e:	ac f4       	brge	.+42     	; 0x59a <DrawChar+0x100>
 570:	f5 01       	movw	r30, r10
 572:	60 81       	ld	r22, Z
 574:	dc 2f       	mov	r29, r28
 576:	dd 0f       	add	r29, r29
 578:	6d 0f       	add	r22, r29
 57a:	f6 01       	movw	r30, r12
 57c:	80 81       	ld	r24, Z
 57e:	a2 01       	movw	r20, r4
 580:	89 0d       	add	r24, r9
 582:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 586:	f5 01       	movw	r30, r10
 588:	60 81       	ld	r22, Z
 58a:	6f 5f       	subi	r22, 0xFF	; 255
 58c:	6d 0f       	add	r22, r29
 58e:	f6 01       	movw	r30, r12
 590:	80 81       	ld	r24, Z
 592:	a2 01       	movw	r20, r4
 594:	89 0d       	add	r24, r9
 596:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 59a:	88 0c       	add	r8, r8
 59c:	c1 50       	subi	r28, 0x01	; 1
 59e:	30 f7       	brcc	.-52     	; 0x56c <DrawChar+0xd2>
 5a0:	9a 94       	dec	r9
 5a2:	ff ef       	ldi	r31, 0xFF	; 255
 5a4:	9f 12       	cpse	r9, r31
 5a6:	db cf       	rjmp	.-74     	; 0x55e <DrawChar+0xc4>
 5a8:	59 c0       	rjmp	.+178    	; 0x65c <DrawChar+0x1c2>
 5aa:	4a 30       	cpi	r20, 0x0A	; 10
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <DrawChar+0x116>
 5ae:	56 c0       	rjmp	.+172    	; 0x65c <DrawChar+0x1c2>
 5b0:	68 94       	set
 5b2:	ee 24       	eor	r14, r14
 5b4:	e2 f8       	bld	r14, 2
 5b6:	c8 2e       	mov	r12, r24
 5b8:	d1 2c       	mov	r13, r1
 5ba:	c6 01       	movw	r24, r12
 5bc:	80 97       	sbiw	r24, 0x20	; 32
 5be:	6c 01       	movw	r12, r24
 5c0:	cc 0c       	add	r12, r12
 5c2:	dd 1c       	adc	r13, r13
 5c4:	cc 0c       	add	r12, r12
 5c6:	dd 1c       	adc	r13, r13
 5c8:	c8 0e       	add	r12, r24
 5ca:	d9 1e       	adc	r13, r25
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f6 e1       	ldi	r31, 0x16	; 22
 5d0:	8f 2e       	mov	r8, r31
 5d2:	f1 e0       	ldi	r31, 0x01	; 1
 5d4:	9f 2e       	mov	r9, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	0f 2e       	mov	r0, r31
 5da:	f4 e1       	ldi	r31, 0x14	; 20
 5dc:	af 2e       	mov	r10, r31
 5de:	f1 e0       	ldi	r31, 0x01	; 1
 5e0:	bf 2e       	mov	r11, r31
 5e2:	f0 2d       	mov	r31, r0
 5e4:	f6 01       	movw	r30, r12
 5e6:	ee 0d       	add	r30, r14
 5e8:	f1 1d       	adc	r31, r1
 5ea:	e8 59       	subi	r30, 0x98	; 152
 5ec:	ff 4f       	sbci	r31, 0xFF	; 255
 5ee:	c4 91       	lpm	r28, Z
 5f0:	7e 2c       	mov	r7, r14
 5f2:	77 0c       	add	r7, r7
 5f4:	d7 e0       	ldi	r29, 0x07	; 7
 5f6:	cc 23       	and	r28, r28
 5f8:	54 f5       	brge	.+84     	; 0x64e <DrawChar+0x1b4>
 5fa:	f4 01       	movw	r30, r8
 5fc:	60 81       	ld	r22, Z
 5fe:	fd 2e       	mov	r15, r29
 600:	ff 0c       	add	r15, r15
 602:	6f 0d       	add	r22, r15
 604:	f5 01       	movw	r30, r10
 606:	80 81       	ld	r24, Z
 608:	a2 01       	movw	r20, r4
 60a:	87 0d       	add	r24, r7
 60c:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 610:	f4 01       	movw	r30, r8
 612:	60 81       	ld	r22, Z
 614:	6f 5f       	subi	r22, 0xFF	; 255
 616:	6f 0d       	add	r22, r15
 618:	f5 01       	movw	r30, r10
 61a:	80 81       	ld	r24, Z
 61c:	a2 01       	movw	r20, r4
 61e:	87 0d       	add	r24, r7
 620:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 624:	f4 01       	movw	r30, r8
 626:	60 81       	ld	r22, Z
 628:	6f 0d       	add	r22, r15
 62a:	f5 01       	movw	r30, r10
 62c:	80 81       	ld	r24, Z
 62e:	8f 5f       	subi	r24, 0xFF	; 255
 630:	a2 01       	movw	r20, r4
 632:	87 0d       	add	r24, r7
 634:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 638:	f4 01       	movw	r30, r8
 63a:	60 81       	ld	r22, Z
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	6f 0d       	add	r22, r15
 640:	f5 01       	movw	r30, r10
 642:	80 81       	ld	r24, Z
 644:	8f 5f       	subi	r24, 0xFF	; 255
 646:	a2 01       	movw	r20, r4
 648:	87 0d       	add	r24, r7
 64a:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 64e:	cc 0f       	add	r28, r28
 650:	d1 50       	subi	r29, 0x01	; 1
 652:	88 f6       	brcc	.-94     	; 0x5f6 <DrawChar+0x15c>
 654:	ea 94       	dec	r14
 656:	ff ef       	ldi	r31, 0xFF	; 255
 658:	ef 12       	cpse	r14, r31
 65a:	c4 cf       	rjmp	.-120    	; 0x5e4 <DrawChar+0x14a>
 65c:	80 e0       	ldi	r24, 0x00	; 0
 65e:	df 91       	pop	r29
 660:	cf 91       	pop	r28
 662:	1f 91       	pop	r17
 664:	ff 90       	pop	r15
 666:	ef 90       	pop	r14
 668:	df 90       	pop	r13
 66a:	cf 90       	pop	r12
 66c:	bf 90       	pop	r11
 66e:	af 90       	pop	r10
 670:	9f 90       	pop	r9
 672:	8f 90       	pop	r8
 674:	7f 90       	pop	r7
 676:	5f 90       	pop	r5
 678:	4f 90       	pop	r4
 67a:	08 95       	ret

0000067c <DrawString>:
 67c:	9f 92       	push	r9
 67e:	af 92       	push	r10
 680:	bf 92       	push	r11
 682:	cf 92       	push	r12
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	ec 01       	movw	r28, r24
 694:	88 81       	ld	r24, Y
 696:	88 23       	and	r24, r24
 698:	21 f1       	breq	.+72     	; 0x6e2 <DrawString+0x66>
 69a:	a4 2e       	mov	r10, r20
 69c:	8b 01       	movw	r16, r22
 69e:	94 2e       	mov	r9, r20
 6a0:	96 94       	lsr	r9
 6a2:	b1 2c       	mov	r11, r1
 6a4:	0f 2e       	mov	r0, r31
 6a6:	f6 e1       	ldi	r31, 0x16	; 22
 6a8:	cf 2e       	mov	r12, r31
 6aa:	f1 e0       	ldi	r31, 0x01	; 1
 6ac:	df 2e       	mov	r13, r31
 6ae:	f0 2d       	mov	r31, r0
 6b0:	0f 2e       	mov	r0, r31
 6b2:	f4 e1       	ldi	r31, 0x14	; 20
 6b4:	ef 2e       	mov	r14, r31
 6b6:	f1 e0       	ldi	r31, 0x01	; 1
 6b8:	ff 2e       	mov	r15, r31
 6ba:	f0 2d       	mov	r31, r0
 6bc:	b3 94       	inc	r11
 6be:	4a 2d       	mov	r20, r10
 6c0:	b8 01       	movw	r22, r16
 6c2:	0e 94 4d 02 	call	0x49a	; 0x49a <DrawChar>
 6c6:	f7 01       	movw	r30, r14
 6c8:	80 81       	ld	r24, Z
 6ca:	8a 5f       	subi	r24, 0xFA	; 250
 6cc:	f6 01       	movw	r30, r12
 6ce:	60 81       	ld	r22, Z
 6d0:	89 0d       	add	r24, r9
 6d2:	0e 94 1b 02 	call	0x436	; 0x436 <SetPosition>
 6d6:	fe 01       	movw	r30, r28
 6d8:	eb 0d       	add	r30, r11
 6da:	f1 1d       	adc	r31, r1
 6dc:	80 81       	ld	r24, Z
 6de:	81 11       	cpse	r24, r1
 6e0:	ed cf       	rjmp	.-38     	; 0x6bc <DrawString+0x40>
 6e2:	df 91       	pop	r29
 6e4:	cf 91       	pop	r28
 6e6:	1f 91       	pop	r17
 6e8:	0f 91       	pop	r16
 6ea:	ff 90       	pop	r15
 6ec:	ef 90       	pop	r14
 6ee:	df 90       	pop	r13
 6f0:	cf 90       	pop	r12
 6f2:	bf 90       	pop	r11
 6f4:	af 90       	pop	r10
 6f6:	9f 90       	pop	r9
 6f8:	08 95       	ret

000006fa <DrawLine>:
 6fa:	6f 92       	push	r6
 6fc:	7f 92       	push	r7
 6fe:	8f 92       	push	r8
 700:	9f 92       	push	r9
 702:	af 92       	push	r10
 704:	bf 92       	push	r11
 706:	cf 92       	push	r12
 708:	df 92       	push	r13
 70a:	ef 92       	push	r14
 70c:	ff 92       	push	r15
 70e:	0f 93       	push	r16
 710:	1f 93       	push	r17
 712:	cf 93       	push	r28
 714:	df 93       	push	r29
 716:	d8 2f       	mov	r29, r24
 718:	a6 2e       	mov	r10, r22
 71a:	c4 2f       	mov	r28, r20
 71c:	62 2e       	mov	r6, r18
 71e:	48 01       	movw	r8, r16
 720:	e6 2e       	mov	r14, r22
 722:	f1 2c       	mov	r15, r1
 724:	e8 1a       	sub	r14, r24
 726:	f1 08       	sbc	r15, r1
 728:	c2 2e       	mov	r12, r18
 72a:	d1 2c       	mov	r13, r1
 72c:	c4 1a       	sub	r12, r20
 72e:	d1 08       	sbc	r13, r1
 730:	ff 20       	and	r15, r15
 732:	34 f4       	brge	.+12     	; 0x740 <DrawLine+0x46>
 734:	f1 94       	neg	r15
 736:	e1 94       	neg	r14
 738:	f1 08       	sbc	r15, r1
 73a:	77 24       	eor	r7, r7
 73c:	7a 94       	dec	r7
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DrawLine+0x4a>
 740:	77 24       	eor	r7, r7
 742:	73 94       	inc	r7
 744:	dd 20       	and	r13, r13
 746:	34 f4       	brge	.+12     	; 0x754 <DrawLine+0x5a>
 748:	d1 94       	neg	r13
 74a:	c1 94       	neg	r12
 74c:	d1 08       	sbc	r13, r1
 74e:	bb 24       	eor	r11, r11
 750:	ba 94       	dec	r11
 752:	02 c0       	rjmp	.+4      	; 0x758 <DrawLine+0x5e>
 754:	bb 24       	eor	r11, r11
 756:	b3 94       	inc	r11
 758:	ce 14       	cp	r12, r14
 75a:	df 04       	cpc	r13, r15
 75c:	f4 f4       	brge	.+60     	; 0x79a <DrawLine+0xa0>
 75e:	cc 0c       	add	r12, r12
 760:	dd 1c       	adc	r13, r13
 762:	86 01       	movw	r16, r12
 764:	0e 19       	sub	r16, r14
 766:	1f 09       	sbc	r17, r15
 768:	a4 01       	movw	r20, r8
 76a:	6c 2f       	mov	r22, r28
 76c:	8d 2f       	mov	r24, r29
 76e:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 772:	ad 16       	cp	r10, r29
 774:	81 f1       	breq	.+96     	; 0x7d6 <DrawLine+0xdc>
 776:	ee 0c       	add	r14, r14
 778:	ff 1c       	adc	r15, r15
 77a:	d7 0d       	add	r29, r7
 77c:	11 23       	and	r17, r17
 77e:	1c f0       	brlt	.+6      	; 0x786 <DrawLine+0x8c>
 780:	cb 0d       	add	r28, r11
 782:	0e 19       	sub	r16, r14
 784:	1f 09       	sbc	r17, r15
 786:	0c 0d       	add	r16, r12
 788:	1d 1d       	adc	r17, r13
 78a:	a4 01       	movw	r20, r8
 78c:	6c 2f       	mov	r22, r28
 78e:	8d 2f       	mov	r24, r29
 790:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 794:	da 11       	cpse	r29, r10
 796:	f1 cf       	rjmp	.-30     	; 0x77a <DrawLine+0x80>
 798:	1e c0       	rjmp	.+60     	; 0x7d6 <DrawLine+0xdc>
 79a:	ee 0c       	add	r14, r14
 79c:	ff 1c       	adc	r15, r15
 79e:	86 01       	movw	r16, r12
 7a0:	0e 19       	sub	r16, r14
 7a2:	1f 09       	sbc	r17, r15
 7a4:	a4 01       	movw	r20, r8
 7a6:	6c 2f       	mov	r22, r28
 7a8:	8d 2f       	mov	r24, r29
 7aa:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 7ae:	6c 16       	cp	r6, r28
 7b0:	91 f0       	breq	.+36     	; 0x7d6 <DrawLine+0xdc>
 7b2:	cc 0c       	add	r12, r12
 7b4:	dd 1c       	adc	r13, r13
 7b6:	cb 0d       	add	r28, r11
 7b8:	10 16       	cp	r1, r16
 7ba:	11 06       	cpc	r1, r17
 7bc:	1c f0       	brlt	.+6      	; 0x7c4 <DrawLine+0xca>
 7be:	d7 0d       	add	r29, r7
 7c0:	0c 0d       	add	r16, r12
 7c2:	1d 1d       	adc	r17, r13
 7c4:	0e 19       	sub	r16, r14
 7c6:	1f 09       	sbc	r17, r15
 7c8:	a4 01       	movw	r20, r8
 7ca:	6c 2f       	mov	r22, r28
 7cc:	8d 2f       	mov	r24, r29
 7ce:	0e 94 3d 02 	call	0x47a	; 0x47a <DrawPixel>
 7d2:	c6 11       	cpse	r28, r6
 7d4:	f0 cf       	rjmp	.-32     	; 0x7b6 <DrawLine+0xbc>
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	df 91       	pop	r29
 7da:	cf 91       	pop	r28
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	ff 90       	pop	r15
 7e2:	ef 90       	pop	r14
 7e4:	df 90       	pop	r13
 7e6:	cf 90       	pop	r12
 7e8:	bf 90       	pop	r11
 7ea:	af 90       	pop	r10
 7ec:	9f 90       	pop	r9
 7ee:	8f 90       	pop	r8
 7f0:	7f 90       	pop	r7
 7f2:	6f 90       	pop	r6
 7f4:	08 95       	ret

000007f6 <ClearScreen>:

void ClearScreen(uint16_t color)
{
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	ec 01       	movw	r28, r24
  // set whole window
  SetWindow(0, SIZE_X, 0, SIZE_Y);
 7fc:	23 e8       	ldi	r18, 0x83	; 131
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	61 ea       	ldi	r22, 0xA1	; 161
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	0e 94 df 01 	call	0x3be	; 0x3be <SetWindow>
  // draw individual pixels 
  // CACHE_SIZE_MEM = SIZE_X * SIZE_Y
  SendColor565(color, CACHE_SIZE_MEM);
 808:	68 e8       	ldi	r22, 0x88	; 136
 80a:	73 e5       	ldi	r23, 0x53	; 83
 80c:	ce 01       	movw	r24, r28
 80e:	0e 94 ca 01 	call	0x394	; 0x394 <SendColor565>
}
 812:	df 91       	pop	r29
 814:	cf 91       	pop	r28
 816:	08 95       	ret

00000818 <UpdateScreen>:

void UpdateScreen(void)
{
  // display on
  CommandSend(DISPON);
 818:	89 e2       	ldi	r24, 0x29	; 41
 81a:	0e 94 ab 01 	call	0x356	; 0x356 <CommandSend>
 81e:	08 95       	ret

00000820 <DelayMs>:
}

void DelayMs(uint8_t time)
{
  // loop through real time
  while (time--) {
 820:	88 23       	and	r24, r24
 822:	41 f0       	breq	.+16     	; 0x834 <DelayMs+0x14>
 824:	ef e9       	ldi	r30, 0x9F	; 159
 826:	ff e0       	ldi	r31, 0x0F	; 15
 828:	31 97       	sbiw	r30, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <DelayMs+0x8>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <DelayMs+0xe>
 82e:	00 00       	nop
 830:	81 50       	subi	r24, 0x01	; 1
 832:	c1 f7       	brne	.-16     	; 0x824 <DelayMs+0x4>
 834:	08 95       	ret

00000836 <St7735Commands>:
 *
 * @param const uint8_t *
 * @return void
 */
void St7735Commands(const uint8_t *commands)
{
 836:	cf 92       	push	r12
 838:	df 92       	push	r13
 83a:	ef 92       	push	r14
 83c:	ff 92       	push	r15
 83e:	0f 93       	push	r16
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
  uint8_t milliseconds;
  uint8_t numOfCommands;
  uint8_t numOfArguments;

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
 846:	7c 01       	movw	r14, r24
 848:	2f ef       	ldi	r18, 0xFF	; 255
 84a:	e2 1a       	sub	r14, r18
 84c:	f2 0a       	sbc	r15, r18
 84e:	fc 01       	movw	r30, r24
 850:	d4 90       	lpm	r13, Z
  
  // loop through whole command list
  while (numOfCommands--) {
 852:	2d c0       	rjmp	.+90     	; 0x8ae <St7735Commands+0x78>
    // send command
    CommandSend(pgm_read_byte(commands++));
 854:	f7 01       	movw	r30, r14
 856:	84 91       	lpm	r24, Z
 858:	0e 94 ab 01 	call	0x356	; 0x356 <CommandSend>
    // read number of arguments
    numOfArguments = pgm_read_byte(commands++);
 85c:	f7 01       	movw	r30, r14
 85e:	31 96       	adiw	r30, 0x01	; 1
 860:	e4 91       	lpm	r30, Z
 862:	f2 e0       	ldi	r31, 0x02	; 2
 864:	ef 0e       	add	r14, r31
 866:	f1 1c       	adc	r15, r1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
 868:	2e 2f       	mov	r18, r30
 86a:	20 78       	andi	r18, 0x80	; 128
 86c:	c2 2e       	mov	r12, r18
    // remove delay flag
    numOfArguments &= ~DELAY;
 86e:	ef 77       	andi	r30, 0x7F	; 127
    // loop through number of arguments
    while (numOfArguments--) {
 870:	8f ef       	ldi	r24, 0xFF	; 255
 872:	8e 0f       	add	r24, r30
 874:	ee 23       	and	r30, r30
 876:	89 f0       	breq	.+34     	; 0x89a <St7735Commands+0x64>
 878:	3e 2d       	mov	r19, r14
 87a:	2f 2d       	mov	r18, r15
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	01 96       	adiw	r24, 0x01	; 1
 880:	e8 0e       	add	r14, r24
 882:	f9 1e       	adc	r15, r25
 884:	87 01       	movw	r16, r14
 886:	c3 2f       	mov	r28, r19
 888:	d2 2f       	mov	r29, r18
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
 88a:	fe 01       	movw	r30, r28
 88c:	84 91       	lpm	r24, Z
 88e:	0e 94 b4 01 	call	0x368	; 0x368 <Data8BitsSend>
 892:	21 96       	adiw	r28, 0x01	; 1
    // check if delay set
    milliseconds = numOfArguments & DELAY;
    // remove delay flag
    numOfArguments &= ~DELAY;
    // loop through number of arguments
    while (numOfArguments--) {
 894:	c0 17       	cp	r28, r16
 896:	d1 07       	cpc	r29, r17
 898:	c1 f7       	brne	.-16     	; 0x88a <St7735Commands+0x54>
      // send arguments
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
 89a:	cc 20       	and	r12, r12
 89c:	39 f0       	breq	.+14     	; 0x8ac <St7735Commands+0x76>
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
 89e:	e7 01       	movw	r28, r14
 8a0:	21 96       	adiw	r28, 0x01	; 1
 8a2:	f7 01       	movw	r30, r14
 8a4:	84 91       	lpm	r24, Z
      // delay
      DelayMs(milliseconds);
 8a6:	0e 94 10 04 	call	0x820	; 0x820 <DelayMs>
      Data8BitsSend(pgm_read_byte(commands++));
    }
    // check if delay set
    if (milliseconds) {
      // value in milliseconds
      milliseconds = pgm_read_byte(commands++);
 8aa:	7e 01       	movw	r14, r28
 8ac:	da 94       	dec	r13

  // number of commands
  numOfCommands = pgm_read_byte(commands++);
  
  // loop through whole command list
  while (numOfCommands--) {
 8ae:	d1 10       	cpse	r13, r1
 8b0:	d1 cf       	rjmp	.-94     	; 0x854 <St7735Commands+0x1e>
      milliseconds = pgm_read_byte(commands++);
      // delay
      DelayMs(milliseconds);
    }
  }
}
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	ff 90       	pop	r15
 8bc:	ef 90       	pop	r14
 8be:	df 90       	pop	r13
 8c0:	cf 90       	pop	r12
 8c2:	08 95       	ret

000008c4 <St7735Init>:


void St7735Init(void)
{
  // hardware reset
  HardwareReset();
 8c4:	0e 94 8c 01 	call	0x318	; 0x318 <HardwareReset>
  // init spi
  SpiInit();
 8c8:	0e 94 9d 01 	call	0x33a	; 0x33a <SpiInit>
  // load list of commands
  St7735Commands(INIT_ST7735B);
 8cc:	88 e4       	ldi	r24, 0x48	; 72
 8ce:	92 e0       	ldi	r25, 0x02	; 2
 8d0:	0e 94 1b 04 	call	0x836	; 0x836 <St7735Commands>
 8d4:	08 95       	ret

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
